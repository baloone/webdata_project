{"id":"220997971_Imperative_Functional_Programming","abstract":"We present a new model, based on monads, for performing input/output in a non-strict, purely functional language. It is composable, extensible, efficient, requires no extensions to the type system, and extends smoothly to incorporate mixed-language working and in-place array updates.","authors":["Simon Loftus Peyton Jones","Philip Wadler"],"meta":["March 1993Conference Record of the Annual ACM Symposium on Principles of Programming Languages 28(2):71-84","DOI:10.1145/158511.158524","SourceDBLP","Conference: Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages"],"references":["220676558_Implementing_Lazy_Functional_Languages_on_Stock_Hardware_The_Spineless_Tagless_G-Machine","277284775_Mutable_abstract_datatypes_--_or_--_how_to_have_your_state_and_munge_it_too","242385459_Nebula_a_functional_operating_system","228539472_The_implementation_of_practical_functional_programming_languages","222458666_Computational_interpretations_of_linear_logic","221305695_Update_Analysis_and_the_Efficient_Implementation_of_Functional_Aggregates","221305641_Functions_and_Dynamic_User_Interfaces","221252366_A_Semantic_Model_of_Reference_Counting_and_its_Abstraction_Detailed_Summary","220898059_Syntactic_Control_of_Inference_Part_2","220246669_Type_Inference_for_Polymorphic_References"]}