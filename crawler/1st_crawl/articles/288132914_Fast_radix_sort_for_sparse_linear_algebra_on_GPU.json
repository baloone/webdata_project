{"id":"288132914_Fast_radix_sort_for_sparse_linear_algebra_on_GPU","abstract":"Fast sorting is an important step in many parallel algorithms, which require data ranking, ordering or partitioning. Parallel sorting is a widely researched subject, and many algorithms were developed in the past. In this paper, the focus is on implementing highly efficient sorting routines for the sparse linear algebra operations, such as parallel sparse matrix - matrix multiplication, or factorization. We propose a fast and simple to implement variant of parallel radix sort algorithm, suitable for GPU architecture. Extensive testing on both synthetic and real-world data shows, that our method outperforms other similar state-of-the-art implementations. Our implementation is bandwidth-efficient, as it achieves sorting rates comparable to the theoretical upper bound of memory bandwidth. We also present several interesting code optimizations relevant to GPU programming.","authors":["Lukas Polok","Viorela Ila","P. Smrz"],"meta":["January 2014"],"references":["283616978_Optimizing_Sparse_Matrix-Matrix_Multiplication_for_the_GPU","265156269_Implicit_radix_sorting_on_GPUs","262239188_Cache_efficient_implementation_for_block_matrix_operations","261415963_Efficient_implementation_for_block_matrix_operations_for_nonlinear_least_squares_problems_in_robotic_applications","313645165_Scan_primitives_for_GPU_computing","271479905_Incremental_Cholesky_Factorization_for_Least_Squares_Problems_in_Robotics","264956418_Exposing_Fine-Grained_Parallelism_in_Algebraic_Multigrid_Methods","246432948_Improved_GPU_sorting","245935349_Direct_Methods_for_Sparse_Linear_Systems","236944302_Direct_Methods_for_Sparse_Linear_Systems_Fundamentals_of_Algorithms_2"]}