{"id":"328972427_Sherlock_N-overlap_Invasive_Normalization_and_Overlap_Coefficient_for_the_Similarity_Analysis_Between_Source_Code","abstract":"Some tools for detecting similarity, such as Sherlock, compare textual documents of any nature, but have limitations to compare source code files. The presence or absence of blank spaces between structure elements, variable names, among other actions interfere with the similarity index found. This paper evidences that the preprocessing of the source code improves Sherlock' performance. The results are based on experiments conducted with 66 source code previously plagiarized, and a base formed by 2160 codes created by students of engineering courses in programming classes. In this last set, the situation of similarity was not previously known, so a method was created to calculate precision and recall, in a relative way, based on a set of reference tools, as a kind of oracle. Our approach, called Sherlock N-overlap obtained, in most of the cases tested, similarity indexes superior to other complex tools such as MOSS, JPlag and SIM.","authors":["Allyson Bonetti França","Danilo Maciel","José Marques Soares","Giovanni Cordeiro Barroso"],"meta":["November 2018IEEE Transactions on Computers PP(99):1-1","DOI:10.1109/TC.2018.2881449"],"references":["321758404_Python_Source_Code_Plagiarism_Attacks_on_Introductory_Programming_Course_Assignments","320634007_A_comparison_of_code_similarity_analysers","309708569_Detecting_Source_Code_Plagiarism_on_Introductory_Programming_Course_Assignments_Using_a_Bytecode_Approach","268337343_Sistema_de_apoio_a_atividades_de_laboratorio_de_programacao_via_Moodle_com_suporte_ao_balanceamento_de_carga","267860515_Same_Difference_Detecting_Collusion_by_Finding_Unusual_Shared_Elements","262322336_A_Source_Code_Similarity_System_for_Plagiarism_Detection","262281635_Plagiarism_detection_for_Java_a_tool_comparison","261246344_Online_tool_for_student's_source_code_plagiarism_detection","225035806_Etude_de_la_distribution_florale_dans_une_portion_des_Alpes_et_du_Jura","224132474_Source_Code_Plagiarism-A_Student_Perspective","221615131_Plagiarism_detection_based_on_structural_information","220328285_An_Approach_to_Source-Code_Plagiarism_Detection_and_Investigation_Using_Latent_Semantic_Analysis","4305477_Fast_and_reliable_plagiarism_detection_system","3052950_Towards_a_Definition_of_Source-Code_Plagiarism","2840981_Winnowing_Local_Algorithms_for_Document_Fingerprinting","2832828_Finding_Plagiarisms_among_a_Set_of_Programs_with_JPlag","2249233_YAP3_Improved_Detection_Of_Similarities_In_Computer_Program_And_Other_Texts","305907501_Review_of_source-code_plagiarism_detection_in_academia","303942795_Software_similarity_and_classification","288970909_Method_of_establishing_groups_of_equal_amplitude_in_plant_sociology_based_on_similarity_of_species_content_and_its_application_to_analyses_of_the_vegetation_on_Danish_Commons","287580770_False_feathers_A_perspective_on_academic_plagiarism","281139450_Plagiarism_detection_tool_Parikshak","279760304_Similarity_estimation_techniques_from_rounding_algorithms","272638915_Efficient_clustering-based_source_code_plagiarism_detection_using_PIY","244957198_A_Handbook_for_Deterring_Plagiarism_in_Higher_Education","240319454_Plaggie_GNU-licensed_source_code_plagiarism_detection_engine_for_Java_exercises","238720710_Dice_LR_Measures_of_the_Amount_of_Ecologic_Association_Between_Species_Ecology_263_297-302","222800155_An_empirical_approach_for_detecting_program_smilarity_within_a_university_programming_environment","220675534_The_Issue_of_Software_Plagiarism_A_Student_View","220396243_Desktop_Tools_for_Offline_Plagiarism_Detection_in_Computer_Programs","220281387_Efficient_plagiarism_detection_for_large_code_repositories","3844926_Experience_using_MOSS_to_detect_cheating_on_programming_assignments","3050527_Plagiarism_in_Programming_Assignments"]}