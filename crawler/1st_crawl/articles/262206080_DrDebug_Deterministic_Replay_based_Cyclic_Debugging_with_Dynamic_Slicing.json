{"id":"262206080_DrDebug_Deterministic_Replay_based_Cyclic_Debugging_with_Dynamic_Slicing","abstract":"We present a collection of tools, DrDebug, that greatly advances the state-of-the-art of cyclic, interactive debugging of multi-threaded programs based upon the record and replay paradigm. The features of DrDebug significantly increase the efficiency of debugging by tailoring the scope of replay to a buggy execution region or an execution slice of a buggy region. In addition to supporting traditional debugger commands, DrDebug provides commands for recording, replaying, and dynamic slicing with several novel features. First, upon a user's request, a highly precise dynamic slice is computed that can then be browsed by the user by navigating the dynamic dependence graph with the assistance of our graphical user interface. Second, a dynamic slice of interest to the user can be used to compute an execution slice whose replay can then be carried out. Due to narrow scope, the replay can be performed efficiently as execution of code segments that do not belong to the execution slice is skipped. We also provide the capability of allowing the user to step from the execution of one statement in the slice to the next while examining the values of variables. To the best of our knowledge, this capability cannot be found in any other slicing tool. We have also integrated DrDebug with the Maple tool that exposes bugs and records buggy executions for replay. Our experiments demonstrate DrDebug's practicality.","authors":["Yan Wang","Harish Patil","Cristiano Pereira","Gregory Lueck"],"meta":["February 2014","DOI:10.1145/2544137.2544152","Conference: Proceedings of Annual IEEE/ACM International Symposium on Code Generation and Optimization","Project: PinPlay"],"references":["224343273_Dynamic_Slicing_of_Multithreaded_Programs_for_Race_Detection","221596304_Automatic_logging_of_operating_system_effects_to_guide_application-level_architecture_simulation","221560530_Dynamic_slicing_long_running_programs_through_execution_fast_forwarding","221554320_Debugging_reinvented_Asking_and_answering_why_and_why_not_questions_about_program_behavior","221305868_SPEComp_A_New_Benchmark_Suite_for_Measuring_Parallel_Computer_Performance","220854669_May_2010Analyzing_Concurrency_Bugs_Using_Dual_Slicing","220854566_Enabling_tracing_Of_long-running_multithreaded_programs_via_dynamic_execution_reduction","220799113_PinPlay_A_framework_for_deterministic_replay_and_reproducible_analysis_of_parallel_programs","220752268_9_8_Pin_Building_Customized_Program_Analysis_Tools_with_Dynamic_Instrumentation","220404330_Interprocedural_slicing_of_multithreaded_programs_with_applications_to_Java","290110131_BugNet","265454137_BENCHMARKING_MODERN_MULTIPROCESSORS","262425109_LEAN_Simplifying_Concurrency_Bug_Reproduction_via_Replay-supported_Execution_Reduction","262367510_Maple_A_Coverage-Driven_Testing_Tool_for_Multithreaded_Programs","254005134_PinADX_An_interface_for_customizable_debugging_with_dynamic_instrumentation","220939039_ConMem_Detecting_Severe_Concurrency_Bugs_through_an_Effect-Oriented_Approach","220854758_Efficient_online_detection_of_dynamic_control_dependence","220854389_Memory_slicing","220771235_A_Case_for_an_Interleaving_Constrained_Shared-Memory_Multi-Processor","220752448_Pruning_dynamic_slices_with_confidence","220751946_Toward_Generating_Reducible_Replay_Logs","220751901_Valgrind_A_framework_for_heavyweight_dynamic_binary_instrumentation","220281081_Isolating_bugs_in_multithreaded_programs_using_execution_suppression","220114727_Dynamic_Program_Slicing","4144882_BugNet_Continuously_Recording_Program_Execution_for_Deterministic_Replay_Debugging","4016783_Precise_dynamic_slicing_algorithms","2933535_Context-Sensitive_Slicing_of_Concurrent_Programs"]}