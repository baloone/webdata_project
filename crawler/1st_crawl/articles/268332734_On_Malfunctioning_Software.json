{"id":"268332734_On_Malfunctioning_Software","abstract":"Artefacts do not always do what they are supposed to do, due to a variety of reasons, including manufacturing problems, poor maintenance, and normal wear-and-tear. Since software is an artefact, it should be subject to malfunctioning in the same sense in which other artefacts can malfunction. Yet, whether software is on a par with other artefacts when it comes to malfunctioning crucially depends on the abstraction used in the analysis. We distinguish between \"negative\" and \"positive\" notions of malfunction. A negative malfunction, or dysfunction, occurs when an artefact token either does not (sometimes) or cannot (ever) do what it is supposed to do. A positive malfunction, or misfunction, occurs when an artefact token may do what is supposed to do but, at least occasionally, it also yields some unintended and undesirable effects. We argue that software, understood as type, may misfunction in some limited sense, but cannot dysfunction. Accordingly, one should distinguish software from other technical artefacts, in view of their design that makes dysfunction impossible for the former, while possible for the latter.","authors":["Luciano Floridi","Nir Fresco","Giuseppe Primiero"],"meta":["November 2014Synthese 192(4)","DOI:10.1007/s11229-014-0610-3","Project: Philosophy of Computer Science"],"references":["263945738_The_Problem_of_Justification_of_Empirical_Hypotheses_in_Software_Testing","263019222_Software_is_an_Abstract_Artifact","317621930_What_Engineers_Know_and_How_They_Know_It_Analytical_Studies_from_Aeronautical_History","316806956_Technical_Functions","293106910_The_functions_of_things_A_philosophical_perspective_on_material_culture","280984536_In_Defense_of_Proper_Function","279718997_Why_Technologies_are_Inherently_Normative","279185295_Functions","277682205_Algebraic_Specifications_Higher-Order_Types_and_Set-Theoretic_Models","271743591_Computing_and_Experiments"]}