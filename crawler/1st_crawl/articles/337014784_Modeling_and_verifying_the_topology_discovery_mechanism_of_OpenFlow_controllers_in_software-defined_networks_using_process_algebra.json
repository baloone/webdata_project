{"id":"337014784_Modeling_and_verifying_the_topology_discovery_mechanism_of_OpenFlow_controllers_in_software-defined_networks_using_process_algebra","abstract":"Software-Defined Networking (SDN) is an emerging paradigm, providing separation of concerns between controllers that manage the network and switches that forward data flow. SDN enables network programmability and reduces the complexity of network control and management. The OpenFlow protocol is a widely accepted interface between SDN controllers and switches. OpenFlow controllers are the core of Software-Defined Networks (SDNs). They collect topology information to build a global and shared view of the network, which is used to provide services for topology-dependent core modules and applications. Therefore, the accuracy of the centralized abstract view of the network is of outermost importance for many essential SDN operations. However, the topology discovery mechanism used in almost all the mainstream OpenFlow controllers suffers from two kinds of topology poisoning attacks: Link Fabrication Attack and Host Hijacking Attack. TopoGuard is a wide-spread secure OpenFlow controller, which improves the standard topology discovery mechanism, providing automatic and real-time detection of these two attacks. However, the mechanism of TopoGuard lacks formal verification, especially in the situation where some hosts are migrating to their new locations. In this paper, we propose a general parameterized framework, including the Communicating Sequential Processes (CSP) models of the network components and the interfaces among them. Two loopholes of TopoGuard are found by implementing and verifying the proposed system model, which is an instance of the framework, in the model checker Process Analysis Toolkit (PAT). Moreover, we propose a new topology discovery mechanism based on TopoGuard, which solves the two loopholes.","authors":["Shuangqing Xiang","Huibiao Zhu","Xi Wu","Lili Xiao"],"meta":["November 2019Science of Computer Programming 187(1):102343","DOI:10.1016/j.scico.2019.102343"],"references":["321121825_A_General_Formalism_for_Defining_and_Detecting_OpenFlow_Rule_Anomalies","300925112_Poisoning_Network_Visibility_in_Software-Defined_Networks_New_Attacks_and_Countermeasures","284714684_The_InSecurity_of_Topology_Discovery_in_Software_Defined_Networks","262805723_Software-Defined_Networking_A_Comprehensive_Survey","262363002_HotSwap_Correct_and_efficient_controller_upgrades_for_software-defined_networks","260085923_A_NICE_Way_to_Test_OpenFlow_Applications","221403222_PAT_Towards_Flexible_Verification_under_Fairness","220195143_OpenFlow_Enabling_innovation_in_campus_networks","3187899_Using_CSP_to_detect_errors_in_the_TMN_protocol","329478038_Modeling_and_Verifying_TopoGuard_in_OpenFlow-Based_Software_Defined_Networks","326332766_SDN-Actors_Modeling_and_Verification_of_SDN_Programs_22nd_International_Symposium_FM_2018_Held_as_Part_of_the_Federated_Logic_Conference_FloC_2018_Oxford_UK_July_15-17_2018_Proceedings","323979138_Uncovering_Bugs_in_P4_Programs_with_Assertion-based_Verification","321136647_Comparative_modelling_and_verification_of_Pthreads_and_Dthreads","305502187_Topology_Discovery_in_Software_Defined_Networks_Threats_Taxonomy_and_State-of-the-Art","300925102_SPHINX_Detecting_Security_Attacks_in_Software-Defined_Networks","282663668_Efficient_topology_discovery_in_OpenFlow-based_Software_Defined_Networks","282427860_Formalization_and_analysis_of_the_REST_architecture_from_the_process_algebra_perspective","266660070_Troubleshooting_Blackbox_SON_Control_Software_with_Minimal_Causal_Sequences","262285043_Machine-Verified_Network_Controllers","262164408_NetKAT_Semantic_Foundations_for_Networks","261264716_Model_checking_invariant_security_properties_in_OpenFlow","260522467_Model_checking_with_fairness_assumptions_using_PAT","258561035_Understanding_Concurrent_Systems","257411248_Modeling_and_Verifying_Hierarchical_Real-time_Systems_using_Stateful_Timed_CSP","254464170_VeriFlow_Verifying_Network-Wide_Invariants_in_Real_Time"]}