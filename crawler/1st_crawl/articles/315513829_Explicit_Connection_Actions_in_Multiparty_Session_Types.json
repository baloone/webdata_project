{"id":"315513829_Explicit_Connection_Actions_in_Multiparty_Session_Types","abstract":"This work extends asynchronous multiparty session types (MPST) with explicit connection actions to support protocols with optional and dynamic participants. The actions by which endpoints are connected and disconnected are a key element of real-world protocols that is not treated in existing MPST works. In addition, the use cases motivating explicit connections often require a more relaxed form of multiparty choice: these extensions do not satisfy the conservative restrictions used to ensure safety in standard syntactic MPST. Instead, we develop a modelling-based approach to validate MPST safety and progress for these enriched protocols. We present a toolchain implementation, for distributed programming based on our extended MPST in Java, and a core formalism, demonstrating the soundness of our approach. We discuss key implementation issues related to the proposed extensions: a practical treatment of choice subtyping for MPST progress, and multiparty correlation of dynamic binary connections.","authors":["Raymond Hu","Nobuko Yoshida"],"meta":["March 2017Lecture Notes in Computer Science","DOI:10.1007/978-3-662-54494-5_7","Conference: International Conference on Fundamental Approaches to Software Engineering"],"references":["314248337_Timed_runtime_monitoring_for_multiparty_conversations","306043658_An_Erlang_Implementation_of_Multiparty_Session_Actors","305516209_Behavioral_Types_in_Programming_Languages","304033202_Multiparty_Compatibility_for_Concurrent_Objects","299913348_Session_types_for_Rust","275341305_Mathematical_Structures_in_Computer_Science_On_asynchronous_eventful_session_semantics_On_asynchronous_eventful_session_semantics","267431541_Dynamic_Communicating_Automata_and_Branching_High-Level_MSCs","265618083_Global_Progress_and_its_Inference_for_Dynamically_Interleaved_Multiparty_Sessions","265089481_Timed_Runtime_Monitoring_for_Multiparty_Conversations","220997896_Multiparty_Asynchonous_Session_Types","220997804_Deciding_Choreography_Realizability","220719754_Realizability_of_Dynamic_MSC_Languages","220700411_A_Theory_of_Design-by-Contract_for_Distributed_Multiparty_Interactions","220267951_Dynamic_Message_Sequence_Charts","216817379_Haskell_Session_Types_with_Almost_No_Class","336057902_Realizability_of_Choreographies_Using_Process_Algebra_Encodings","309426740_Lightweight_Session_Programming_in_Scala_Artifact","309092166_Hybrid_Session_Verification_Through_Endpoint_API_Generation","307873157_Automated_Choreography_Repair","304347876_RFC_5321Simple_Mail_Transfer_Protocol","303789186_Multiparty_asynchronous_session_types","291283852_SPY_Local_Verification_of_Global_Protocols","287396693_Automatic_verification_of_interactions_in_asynchronous_systems_with_unbounded_buffers","286427512_The_Scribble_Protocol_Language","284787633_Protocols_by_Default_Safe_MPI_Code_Generation_based_on_Session_Types","278382311_Practical_interruptible_conversations_Distributed_Dynamic_Verification_with_Session_Types_and_Python","276464822_From_Communicating_Machines_to_Graphical_Choreographies","267075972_Multiparty_Session_Types_Meet_Communicating_Automata","262410813_Nested_Protocols_in_Session_Types","257012132_Efficient_sessions","238073281_Examples_for_Multiparty_Asynchronous_Session_Types","236124497_Multiparty_Compatibility_in_Communicating_Automata_Characterisation_and_Synthesis_of_Global_Session_Types","230775307_Parameterised_Multiparty_Session_Types","221496386_Session-Based_Distributed_Programming_in_Java","220997222_Dynamic_Multirole_Session_Types","220700507_Full_Abstraction_in_a_Subtyped_pi-Calculus_with_Linear_Types","220430671_On_Communicating_Finite-State_Machines","220248800_Verification_of_programs_with_half-duplex_communication","220197414_Subtyping_for_session_types_in_the_pi_calculus","220148885_Conversation_types","51946495_Session_Type_Inference_in_Haskell"]}