{"id":"220779327_Suffix_Arrays_a_New_Method_for_On-Line_String_Searches","abstract":"A new and conceptually simple data structure, called a suffix array, for on-line string searches is introduced. Constructing and querying suffix arrays is reduced to a sort and search paradigm that employs novel algorithms. The main advantage of suffix arrays over suffix trees is that, in practice, they use three to five times less space. From a complexity standpoint, suffix arrays permit on-line string searches of the type, “Is W a substring of A?” to be answered in time Q(P+logN), where P is the length of W and N is the length of A, which is competitive with (and in some cases slightly better than) suffix trees. The only drawback is that in those instances where the underlying alphabet is finite and small, suffix trees can be constructed in O(N) time in the worst case, versus O(NlogN) time for suffix arrays. However, an augmented algorithm is given that, regardless of the alphabet size, constructs suffix arrays in O(N) expected time, albeit with lesser space efficiency. It is believed that suffix arrays will prove to be better in practice than suffix trees for many applications.","authors":["Udi Manber","Gene Myers"],"meta":["January 1990SIAM Journal on Computing 22(5):319-327","DOI:10.1137/0222058","SourceDBLP","Conference: Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms, 22-24 January 1990, San Francisco, California."],"references":["265360369_Open_Problems_in_Stringology","226466001_Parallel_construction_of_a_suffix_tree_with_applications","221591625_Rapid_Identification_of_Repeated_Patterns_in_Strings_Trees_and_Arrays","220901161_Analyzing_and_compressing_assembly_code","220582224_Sequence_landscapes","243575865_Incremental_alignment_algorithms_and_their_applications","242358561_The_Myriad_Virtues_of_Subword_Trees","240903849_Detection_of_periodicities_and_string-matching_in_real_time","228057866_On_Finding_Lowest_Common_Ancestors_Simplification_and_Parallelization","225035654_Fast_Algorithms_for_Finding_Nearest_Common_Ancestors","223316549_The_smallest_automaton_recognizing_the_subwords_of_a_text","223031303_Structural_properties_of_the_string_statistics_problem","222878384_Fast_Parallel_and_Serial_Approximate_String_Matching","222171486_Optimal_off-line_dection_of_repetitions_in_a_string","221591480_Introducing_Efficient_Parallelism_into_Approximate_String_Matching_and_a_New_Serial_Algorithm","220683941_A_fast_test_for_unique_decipherability_based_on_suffix_trees","220618339_Efficient_On-Line_Construction_and_Correction_of_Position_Trees","220617310_Suffix_Arrays_A_New_Method_for_On-Line_String_Searches","220569085_A_new_distance_metric_on_strings_computable_in_linear_time","220432113_Linear_Algorithm_for_Data_Compression_via_String_Matching","220431105_A_Space-Economical_Suffix_Tree_Construction_Algorithm","220426150_A_Unifying_Look_at_Data_Structures","220421884_Analysis_and_Performance_of_Inverted_Data_Base_Structures","16619763_New_approaches_for_computer_analysis_of_nucleic_acid_sequences","3505582_Approximate_string_matching_in_sublinear_expected_time","3187095_Improving_Quicksort_Performance_with_a_Codeword_Data_Structure","3083701_A_fast_test_for_unique_decipherability_based_on_suffix_trees_Corresp"]}