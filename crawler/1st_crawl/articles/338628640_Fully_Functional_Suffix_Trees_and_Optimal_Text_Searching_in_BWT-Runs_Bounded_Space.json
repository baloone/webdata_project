{"id":"338628640_Fully_Functional_Suffix_Trees_and_Optimal_Text_Searching_in_BWT-Runs_Bounded_Space","abstract":"Indexing highly repetitive texts—such as genomic databases, software repositories and versioned text collections—has become an important problem since the turn of the millennium. A relevant compressibility measure for repetitive texts is r , the number of runs in their Burrows-Wheeler Transforms (BWTs). One of the earliest indexes for repetitive collections, the Run-Length FM-index, used O ( r ) space and was able to efficiently count the number of occurrences of a pattern of length m in a text of length n (in O ( m log log n ) time, with current techniques). However, it was unable to locate the positions of those occurrences efficiently within a space bounded in terms of r . In this article, we close this long-standing problem, showing how to extend the Run-Length FM-index so that it can locate the occ occurrences efficiently (in O ( occ log log n ) time) within O ( r ) space. By raising the space to O ( r log log n ), our index counts the occurrences in optimal time, O ( m ), and locates them in optimal time as well, O ( m + occ ). By further raising the space by an O ( w / log σ) factor, where σ is the alphabet size and w = Ω (log n ) is the RAM machine size in bits, we support count and locate in O (⌈ m log (σ)/ w ⌉) and O (⌈ m log (σ)/ w ⌉ + occ ) time, which is optimal in the packed setting and had not been obtained before in compressed space. We also describe a structure using O ( r log ( n / r )) space that replaces the text and extracts any text substring of length ℓ in the almost-optimal time O (log ( n / r )+ℓ log (σ)/ w ). Within that space, we similarly provide access to arbitrary suffix array, inverse suffix array, and longest common prefix array cells in time O (log ( n / r )), and extend these capabilities to full suffix tree functionality, typically in O (log ( n / r )) time per operation. Our experiments show that our O ( r )-space index outperforms the space-competitive alternatives by 1--2 orders of magnitude in time. Competitive implementations of the original FM-index are outperformed by 1--2 orders of magnitude in space and/or 2--3 in time.","authors":["Travis Gagie","Gonzalo Navarro","Nicola Prezza"],"meta":["January 2020Journal of the ACM 67(1):1-54","DOI:10.1145/3375890"],"references":["333367776_Prefix-free_parsing_for_building_big_BWTs","330097827_Optimal_Construction_of_Compressed_Indexes_for_Highly_Repetitive_Texts","328910664_A_faster_implementation_of_online_RLBWT_and_its_application_to_LZ77_parsing","325310785_Relative_Suffix_Trees","324055477_Universal_Compressed_Text_Indexing","323397683_Comparison_of_Burrows-Wheeler_Transform-Based_Mapping_Algorithms_Used_in_High-Throughput_Whole-Genome_Sequencing_Application_to_Illumina_Data_for_Livestock_Genomes1","322215824_Hybrid_Indexing_Revisited","322213114_Optimal-Time_Text_Indexing_in_BWT-runs_Bounded_Space","317957585_Optimal-Time_Text_Indexing_in_BWT-runs_Bounded_Space","312024271_Compressed_Computation_for_Text_Indexing","301124441_Universal_Indexes_for_Highly_Repetitive_Document_Collections","286187619_Practical_Compressed_Suffix_Trees","279863341_Big_Data_Astronomical_or_Genomical","272752260_Composite_Repetition-Aware_Data_Structures","261770315_Hybrid_Indexes_for_Repetitive_Datasets","251875988_Optimal_Top-k_Document_Retrieval","242074315_Locally_Compressed_Suffix_Arrays","236651605_Suffix_Tree_of_Alignment_An_Efficient_Index_for_Similar_Data","233886073_Linear_Time_Lempel-Ziv_Factorization_Simple_Fast_Small","229067733_Linear_Pattern_Matching_Algorithm","350146083_Resolution_of_the_Burrows-Wheeler_Transform_Conjecture","348147888_Optimal-Time_Dictionary-Compressed_Indexes","332411686_Efficient_Construction_of_a_Complete_Index_for_Pan-Genomics_Read_Alignment","324536079_Fast_Prefix_Search_in_Little_Space_with_Applications","323698140_On_the_Approximation_Ratio_of_Lempel-Ziv_Parsing","323698101_Compressed_Indexing_with_Signature_Grammars","320032878_Tail_bounds_for_sums_of_geometric_and_exponential_variables","319488991_A_Self-index_on_Block_Trees","319487570_Fast_Label_Extraction_in_the_CDAWG","319485678_Linear-Size_CDAWG_New_Repetition-Aware_Indexing_and_Grammar_Compression","318584181_Document_Listing_on_Repetitive_Collections_with_Guaranteed_Performance","318107350_Time-Space_Trade-Offs_for_Lempel-Ziv_Compressed_Indexing","309079178_Faster_compressed_suffix_trees_for_repetitive_collections","304896904_LZ77_Computation_Based_on_the_Run-Length_Encoded_BWT","301957619_Relative_FM-Indexes","290279457_Genome-scale_algorithm_design_Biological_sequence_analysis_in_the_era_of_high-throughput_sequencing","290279199_A_really_simple_approximation_of_smallest_grammar","284918365_Approximation_of_grammar-based_compression_via_recompression","279193152_Access_Rank_and_Select_in_Grammar-compressed_Strings","276512555_Random_Access_to_Grammar-Compressed_Strings_and_Trees","275587983_Dynamic_index_LZ_factorization_and_LCE_queries_in_compressed_space","268995845_LZ77-Based_Self-indexing_with_Faster_Pattern_Matching","268694869_Approximate_pattern_matching_in_LZ77-compressed_texts","263054075_The_DNA_data_deluge","262283354_Compressed_suffix_trees_Efficient_computation_and_storage_of_LCP-values","259338888_Suffix_Array_of_Alignment_A_Practical_Index_for_Similar_Data","258279066_From_Theory_to_Practice_Plug_and_Play_with_Succinct_Data_Structures","257145027_On_Compressing_and_Indexing_Repetitive_Sequences","234791256_Complete_inverted_files_for_efficient_text_retrieval_and_analysis","229067720_On-Line_Construction_of_Suffix_Trees","221886241_Langmead_B_Salzberg_SL_Fast_gapped-read_alignment_with_Bowtie_2_Nat_Methods_9_357-359","225582191_A_Fully-Compressed_Suffix_Trees","225134945_Permuted_Longest-Common-Prefix_Array","222410731_Application_of_Lempel-Ziv_factorization_to_the_approximation_of_grammar-based_compression","222291339_Surpassing_the_information_theoretic_bound_with_fusion_trees"]}