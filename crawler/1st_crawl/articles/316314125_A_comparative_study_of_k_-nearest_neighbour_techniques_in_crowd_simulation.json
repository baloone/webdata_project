{"id":"316314125_A_comparative_study_of_k_-nearest_neighbour_techniques_in_crowd_simulation","abstract":"The k-nearest neighbour (kNN) problem appears in many different fields of computer science, such as computer animation and robotics. In crowd simulation, kNN queries are typically used by a collision-avoidance method to prevent unnecessary computations. Many different methods for finding these neighbours exist, but it is unclear which will work best in crowd simulations, an application which is characterised by low dimensionality and frequent change of the data points. We therefore compare several data structures for performing kNN queries. We find that the nanoflann implementation of a k-d tree offers the best performance by far on many different scenarios, processing 100,000 agents in about 35 ms on a fast consumer PC.","authors":["Jordi Vermeulen","Arne Hillebrand","Roland Geraerts"],"meta":["May 2017Computer Animation and Virtual Worlds 28(11):e1775","DOI:10.1002/cav.1775"],"references":["273119462_Towards_Believable_Crowds_A_Generic_Multi-Level_Framework_for_Agent_Navigation","263734296_Comparative_Analysis_of_Data_Structures_for_Approximate_Nearest_Neighbor_Search","318494292_Closest-Point_Problem","314237638_R-trees_a_dynamic_index_structure_for_spatial_searching","313708771_The_R-tree_An_efficient_and_robust_access_method_for_points_and_rectangles","312466017_Survey_of_nearest_neighbor_techniques","299567044_Spatial_Sorting_an_Efficient_Strategy_for_Approximate_Nearest_Neighbor_Searching","266378625_Scalable_Nearest_Neighbor_Algorithms_for_High_Dimensional_Data","265283040_FLANN_-Fast_Library_for_Approximate_Nearest_Neighbors_User_Manual","263504496_Reciprocal_velocity_obstacles_for_real-time_multi-agent_navigation"]}