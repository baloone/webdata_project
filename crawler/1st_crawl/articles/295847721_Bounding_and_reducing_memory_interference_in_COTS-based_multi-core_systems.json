{"id":"295847721_Bounding_and_reducing_memory_interference_in_COTS-based_multi-core_systems","abstract":"In multi-core systems, main memory is a major shared resource among processor cores. A task running on one core can be delayed by other tasks running simultaneously on other cores due to interference in the shared main memory system. Such memory interference delay can be large and highly variable, thereby posing a significant challenge for the design of predictable real-time systems. In this paper, we present techniques to reduce this interference and provide an upper bound on the worst-case interference on a multi-core platform that uses a commercial-off-the-shelf (COTS) DRAM system. We explicitly model the major resources in the DRAM system, including banks, buses, and the memory controller. By considering their timing characteristics, we analyze the worst-case memory interference delay imposed on a task by other tasks running in parallel. We find that memory interference can be significantly reduced by (i) partitioning DRAM banks, and (ii) co-locating memory-intensive tasks on the same processing core. Based on these observations, we develop a memory interference-aware task allocation algorithm for reducing memory interference. We evaluate our approach on a COTS-based multi-core platform running Linux/RK. Experimental results show that the predictions made by our approach are close to the measured worst-case interference under workloads with both high and low memory contention. In addition, our memory interference-aware task allocation algorithm provides a significant improvement in task schedulability over previous work, with as much as 96 % more tasksets being schedulable.","authors":["Hyoseung Kim","Dionisio de Niz","Bj√∂rn Andersson","Mark Klein"],"meta":["May 2016Real-Time Systems 52(3)","DOI:10.1007/s11241-016-9248-1"],"references":["286988442_PALLOC_DRAM_bank-aware_memory_allocator_for_performance_isolation_on_multicore_platforms","278634352_A_Profiling_Framework_in_LinuxRK_and_its_Application","278632775_Bounding_Memory_Interference_Delay_in_COTS-based_Multi-Core_Systems","271550727_Coordinated_Bank_and_Cache_Coloring_for_Temporal_Protection_of_Memory_Accesses","315617251_Stall-Time_Fair_Memory_Access_Scheduling_for_Chip_Multiprocessors","313523824_Stall-time_fair_memory_access_scheduling_for_chip_multiprocessors","311488243_The_application_slowdown_model_quantifying_and_controlling_the_impact_of_inter-application_interference_at_shared_caches_and_main_memory","290982809_Fairness_via_source_throttling_A_configurable_and_hgh-performance_fairness_substrate_for_multi-core_memory_systems","281391897_ATLAS_A_scalable_and_high-performance_scheduling_algorithm_for_multiple_memory_controllers","275331546_Dynamic_Command_Scheduling_for_Real-Time_Memory_Controllers","271472620_The_Dirty-Block_Index","269651311_Parallelism-Aware_Batch_Scheduling","269332294_Worst_Case_Analysis_of_DRAM_Latency_in_Multi-requestor_Systems","269301504_Improving_system_throughput_and_fairness_simultaneously_in_shared_memory_CMP_systems_via_Dynamic_Bank_Partitioning","266652702_A_software_memory_partition_approach_for_eliminating_bank-level_interference_in_multicore_systems"]}