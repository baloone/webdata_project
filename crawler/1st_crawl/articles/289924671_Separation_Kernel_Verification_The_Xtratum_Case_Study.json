{"id":"289924671_Separation_Kernel_Verification_The_Xtratum_Case_Study","abstract":"The separation kernel concept was developed as an architecture to simplify formal kernel security verification, and is the basis for many implementations of integrated modular avionics in the aerospace domain. This paper reports on a feasibility study conducted for the European Space Agency, to explore the resources required to formally verify the correctness of such a kernel, given a reference specification and a implementation of same. The study was part of an activity called Methods and Tools for On-Board Software Engineering (MTOBSE) which produced a natural language Reference Specification for a Time-Space Partitioning (TSP) kernel, describing partition functional properties such as health monitoring, inter-partition communication, partition control, resource access, and separation security properties, such as the security policy and authorisation control. An abstract security model, and the reference specification were both formalised using Isabelle/HOL. The C sources of the open-source XtratuM kernel were obtained, and an Isabelle/HOL model of the code was semi-automatically produced. Refinement relations were written manually and some proofs were explored. We describe some of the details of what has been modelled and report on the current state of this work. We also make a comparison between our verification explorations, and the circumstances of NICTA’s successful verification of the sel4 kernel.","authors":["David Sanán","Andrew Butterfield","Mike Hinchey"],"meta":["July 2014","DOI:10.1007/978-3-319-12154-3_9","Conference: Working Conference on Verified Software: Theories, Tools, and Experiments"],"references":["267862753_The_Idaho_Partitioning_Machine_An_ACL2_Model","266654588_Formal_verification_of_information_flow_security_for_a_simple_ARM-based_separation_kernel","262244006_A_Verified_Information-Flow_Architecture","241098769_Better_Avionics_Software_Reliability_by_Code_Verification_A_Glance_at_Code_Verification_Methodology_in_the_Verisoft_XT_Project","221302314_Mind_the_Gap","220420663_seL4_Formal_Verification_of_an_Operating-System_Kernel","220309643_The_MILS_architecture_for_high-assurance_embedded_systems","3189823_Applying_Formal_Methods_to_a_Certifiably_Secure_Software_System","246136237_Experience_with_Isabelle_A_Generic_Theorem_Prover","225171221_Inductive_Datatypes_in_HOL_-_Lessons_Learned_in_Formal-Logic_Engineering","221246460_Partitioned_Embedded_Architecture_Based_on_Hypervisor_The_XtratuM_Approach","220150531_The_Existence_of_Refinement_Mappings","3507324_Common_Criteria_for_Information_Technology_Security_Evaluation","2994185_The_Protection_of_Information_in_Computer_Systems"]}