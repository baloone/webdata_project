{"id":"262162507_One_Logic_to_Use_Them_All","abstract":"Deductive program verification is making fast progress these days. One of the reasons is a tremendous improvement of theorem provers in the last two decades. This includes various kinds of automated theorem provers, such as ATP systems and SMT solvers, and interactive proof assistants. Yet most tools for program verification are built around a single theorem prover. Instead, we defend the idea that a collaborative use of several provers is a key to easier and faster verification.\nThis paper introduces a logic that is designed to target a wide set of theorem provers. It is an extension of first-order logic with polymorphism, algebraic data types, recursive definitions, and inductive predicates. It is implemented in the tool Why3, and has been successfully used in the verification of many non-trivial programs.","authors":["Jean-Christophe Filli√¢tre"],"meta":["June 2013","DOI:10.1007/978-3-642-38574-2_1","Conference: Proceedings of the 24th international conference on Automated Deduction"],"references":["280046846_Preserving_User_Proofs_Across_Specification_Changes","267562223_Integrating_Formal_Program_Verification_with_Testing","265866913_Why3_Shepherd_Your_Herd_of_Provers","262348521_Encoding_Monomorphic_and_Polymorphic_Types","262317947_A_TFF1_The_TPTP_typed_first-order_form_with_rank-1_polymorphism-Version_10","238474520_A_Glimpse_of_a_Verifying_C_Compiler_-_Extended_Abstract","234789107_Implementing_polymorphism_in_SMT_solvers","227297774_Deductive_software_verification","225170746_System_Description_E_081","225152604_Translating_Higher-Order_Clauses_to_First-Order_Clauses","225142568_Z3_an_efficient_SMT_solver","221255118_Expressing_Polymorphic_Types_in_a_Many-Sorted_Language","220910193_SeL4_Formal_verification_of_an_OS_kernel","220852281_A_Polymorphic_Intermediate_Verification_Language_Design_and_Logical_Encoding","220806126_SPASS_Version_35","220420663_seL4_Formal_Verification_of_an_Operating-System_Kernel","47865815_SPASS_Version_35","29625463_Zenon_An_Extensible_Automated_Theorem_Prover_Producing_Checkable_Proofs","24000534_A_Formally_Verified_Compiler_Back-end","2942131_Simplify_A_Theorem_Prover_for_Program_Checking","1960640_Certification_of_Bounds_on_Expressions_Involving_Rounded_Operators","266859603_Why3_-_Where_Programs_Meet_Provers","265455944_The_B-book_Assigning_programs_to_meanings_Forewords_by_Professor_A_Hoare_and_Pierre_Chapron","262248791_Discharging_Proof_Obligations_from_Atelier_B_Using_Multiple_Automated_Provers","246153525_Extensions_of_First_Order_Logic","244197182_The_Krakatoa_Tool_for_Certification_of_JavaJavaCard_Programs_Annotated_in_JML","228358762_The_Yices_SMT_solver","225417817_Vampire","225149162_Dafny_An_Automatic_Program_Verifier_for_Functional_Correctness","225147606_Handling_Polymorphism_in_Automated_Deduction","221551092_Automating_Induction_with_an_SMT_Solver","221403040_CVC3","221403006_CVC4","221355424_Computer-Aided_Security_Proofs_for_the_Working_Cryptographer","221323183_A_Quick_Tour_of_the_VeriFast_Program_Verifier","221160593_Verifying_Two_Lines_of_C_with_Why3_An_Exercise_in_Program_Verification","220806435_iProver_-_An_Instantiation-Based_Theorem_Prover_for_First-Order_Logic_System_Description","220806359_Sledgehammer_Judgement_Day","220806237_An_LCF-Style_Interface_between_HOL_and_First-Order_Logic","220806109_Proving_System_Correctness_with_KIV_30","220805811_PVS_A_Prototype_Verification_System","220695256_The_B-book_-_assigning_programs_to_meanings","220118340_The_KRAKATOA_tool_for_certificationof_JAVAJAVACARD_programs_annotated_in_JML","213884846_The_Coq_Proof_Assistant_Reference_Manual_--_Version_V80","2357662_PVS_A_Prototype_Verification_System"]}