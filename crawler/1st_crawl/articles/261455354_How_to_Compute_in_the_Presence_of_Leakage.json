{"id":"261455354_How_to_Compute_in_the_Presence_of_Leakage","abstract":"We address the following problem: how to execute any algorithm P, for an unbounded number of executions, in the presence of an adversary who observes partial information on the internal state of the computation during executions. The security guarantee is that the adversary learns nothing, beyond P's input/output behavior. This general problem is important for running cryptographic algorithms in the presence of side-channel attacks, as well as for running non-cryptographic algorithms, such as a proprietary search algorithm or a game, on a cloud server where parts of the execution's internals might be observed. Our main result is a compiler, which takes as input an algorithm P and a security parameter κ, and produces a functionally equivalent algorithm P'. The running time of P' is a factor of poly(κ) slower than P. P' will be composed of a series of calls to poly(κ)-time computable sub-algorithms. During the executions of P', an adversary algorithm A, which can choose the inputs of P', can learn the results of adaptively chosen leakage functions - each of bounded output size Ω̃(κ) - on the sub-algorithms of P' and the randomness they use. We prove that any computationally unbounded A observing the results of computationally unbounded leakage functions, will learn no more from its observations than it could given blackbox access only to the input-output behavior of P. This result is unconditional and does not rely on any secure hardware components.","authors":["Shafi Goldwasser","Guy Rothblum"],"meta":["October 2012Foundations of Computer Science, 1975., 16th Annual Symposium on 44(5):31-40","DOI:10.1109/FOCS.2012.34","Conference: Foundations of Computer Science (FOCS), 2012 IEEE 53rd Annual Symposium on"],"references":["221590713_Adaptively_Secure_Multi-Party_Computation","221498593_Storing_Secrets_on_Continually_Leaky_Devices","221498546_Cryptography_against_Continuous_Memory_Attacks","221347849_Fuzzy_Extractors_How_to_Generate_Strong_Keys_from_Biometrics_and_Other_Noisy_Data","220336940_Leakage-Resilient_Storage","220336924_On_the_Impossibility_of_Obfuscating_Programs","2816242_Software_Protection_and_Simulation_on_Oblivious_RAMs","2523341_Adaptively_Secure_Multi-party_Computation","2358897_Non-Interactive_CryptoComputing_for_NC1","267185998_How_to_Compute_under_calACsf0_Leakage_without_Secure_Hardware","262356200_Leakage-Resilient_Circuits_without_Computational_Assumptions","241623675_Multiparty_computation_secure_against_continual_memory_leakage","226854771_Leakage-Resilient_Signatures","226371957_After-the-Fact_Leakage_in_Public-Key_Encryption","225897865_Program_Obfuscation_with_Leaky_Hardware","224354130_Leakage-Resilient_Cryptography","221590273_Secure_computation_with_information_leaking_to_an_adversary","221499459_Overcoming_the_Hole_in_the_Bucket_Public-Key_Cryptography_Resilient_to_Continual_Memory_Leakage","221355447_Circular-Secure_Encryption_from_Decision_Diffie-Hellman","221355111_Protecting_Cryptographic_Keys_against_Continual_Leakage","221354906_One-Time_Programs","221354783_Securing_Computation_against_Continuous_Leakage","221354219_After-the-Fact_Leakage_in_Public-Key_Encryption","221354077_Achieving_Leakage_Resilience_through_Dual_System_Encryption","221354076_Physically_Observable_Cryptography_Extended_Abstract","221348450_Protecting_Circuits_from_Leakage_the_Computationally-Bounded_and_Noisy_Cases","221348070_A_Leakage-Resilient_Mode_of_Operation","221327119_Leakage-Resilient_Cryptography_from_the_Inner-Product_Extractor","221326741_Program_Obfuscation_with_Leaky_Hardware","220336569_Achieving_Leakage_Resilience_Through_Dual_System_Encryption","220336250_Overcoming_the_Hole_In_The_Bucket_Public-Key_Cryptography_Resilient_to_Continual_Memory_Leakage","220333733_How_to_Leak_on_Key_Updates","220333267_Public-Key_Cryptosystems_Resilient_to_Key_Leakage","220333191_Leakage-Resilient_Signatures","220137828_An_Exposition_of_Bourgain's_2-Source_Extractor","2415823_Private_Circuits_Securing_Hardware_against_Probing_Attacks"]}