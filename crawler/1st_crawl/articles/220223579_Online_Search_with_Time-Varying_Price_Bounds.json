{"id":"220223579_Online_Search_with_Time-Varying_Price_Bounds","abstract":"Online search is a basic online problem. The fact that its optimal deterministic/randomized solutions are given by simple formulas (however with difficult analysis) makes the problem attractive as a target to which other practical online problems can be transformed to find optimal solutions. However, since the upper/lower bounds of prices in available models are constant, natural online problems in which these bounds vary with time do not fit in the available models.\nWe present two new models where the bounds of prices are not constant but vary with time in certain ways. The first model, where the upper and lower bounds of (logarithmic) prices have decay speed, arises from a problem in concurrent data structures, namely to maximize the (appropriately defined) freshness of data in concurrent objects. For this model we present an optimal deterministic algorithm with competitive ratio\n\\(\\sqrt{D}\\)\n, where D is the known duration of the game, and a nearly-optimal randomized algorithm with competitive ratio\n\\(\\frac{\\ln D}{1+\\ln2-\\frac{2}{D}}\\)\n. We also prove that the lower bound of competitive ratios of randomized algorithms is asymptotically\n\\(\\frac{\\ln D}{4}\\)\n.\nThe second model is inspired by the fact that some applications do not utilize the decay speed of the lower bound of prices in the first model. In the second model, only the upper bound decreases arbitrarily with time and the lower bound is constant. Clearly, the lower bound of competitive ratios proved for the first model holds also against the stronger adversary in the second model. For the second model, we present an optimal randomized algorithm. Our numerical experiments on the freshness problem show that this new algorithm achieves much better/smaller competitive ratios than previous algorithms do, for instance 2.25 versus 3.77 for D=128.","authors":["Peter Damaschke","Phuong Hoai Ha","Philippas Tsigas"],"meta":["December 2009Algorithmica 55(4):619-642","DOI:10.1007/s00453-007-9156-9","SourceDBLP"],"references":["229024558_Competitive_solutions_for_online_financial_problems","225453208_Optimal_Search_and_One-Way_Trading_Online_Algorithms","220473623_Exploring_the_tradeoff_between_performance_and_data_freshness_in_database-driven_Web_servers","220073103_Managing_Deadline_Miss_Ratio_and_Sensor_Data_Freshness_in_Real-Time_Databases","200030230_Linearizability_A_Correctness_Condition_for_Concurrent_Objects","3513533_Competitive_analysis_of_financial_games","2648040_Wait-Free_Synchronization","2423990_Optimal_Buy-and-Hold_Strategies_for_Financial_Markets_with_Bounded_Daily_Returns","2279944_Update_Propagation_Strategies_to_Improve_Freshness_in_Lazy_Master_Replicated_Databases","314795961_Engineering_and_hosting_adaptive_freshness-sensitive_web_applications_on_data_centers","309456250_Wait-free_synchronization_ACM_Trans","297472914_Optimal_buy-and-hold_strategies_for_financial_markets_with_bounded_daily_returns","221942328_Self-tuning_reactive_diffracting_trees","221024081_Engineering_and_hosting_adaptive_freshness-sensitive_web_applications_on_data_centers","220768615_Competitive_Freshness_Algorithms_for_Wait-Free_Data_Objects","220689517_Online_Computation_and_Competitive_Analyses","220623830_Measuring_cache_freshness_by_additive_age","220376728_Efficient_self-tuning_spin-locks_using_competitive_analysis","4038501_Reactive_multiword_synchronization_for_multiprocessors","2645608_Synchronizing_a_database_to_Improve_Freshness"]}