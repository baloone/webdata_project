{"id":"346040491_An_Interactive_and_Dynamic_Search-Based_Approach_to_Software_Refactoring_Recommendations","abstract":"Successful software products evolve through a process of continual change. However, this process may weaken the design of the software and make it unnecessarily complex, leading to significantly reduced productivity and increased fault-proneness. Refactoring improves the software design while preserving overall functionality and behavior, and is an important technique in managing the growing complexity of software systems. Most of the existing work on software refactoring uses either an entirely manual or a fully automated approach. Manual refactoring is time-consuming, error-prone and unsuitable for large-scale, radical refactoring. On the other hand, fully automated refactoring yields a static list of refactorings which, when applied, leads to a new and often hard to comprehend design. Furthermore, it is difficult to merge these refactorings with other changes performed in parallel by developers. In this paper, we propose a refactoring recommendation approach that dynamically adapts and interactively suggests refactorings to developers and takes their feedback into consideration. Our approach uses NSGA-II to find a set of good refactoring solutions that improve software quality while minimizing the deviation from the initial design. These refactoring solutions are then analyzed to extract interesting common features between them such as the frequently occurring refactorings in the best non-dominated solutions. Based on this analysis, the refactorings are ranked and suggested to the developer in an interactive fashion as a sequence of transformations. The developer can approve, modify or reject each of the recommended refactorings, and this feedback is then used to update the proposed rankings of recommended refactorings. After a number of introduced code changes and interactions with the developer, the interactive NSGA-II algorithm is executed again on the new modified system to repair the set of refactoring solutions based on the new changes and the feedback received from the developer. We evaluated our approach on a set of eight open source systems and two industrial projects provided by an industrial partner. Statistical analysis of our experiments shows that our dynamic interactive refactoring approach performed significantly better than four existing search-based refactoring techniques and one fully-automated refactoring tool not based on heuristic search.","authors":["Vahid Alizadeh","Marouane Kessentini","Mohamed Wiem Mkaouer","Mel Ocinneide"],"meta":["September 2020IEEE Transactions on Software Engineering 46(9):932-961","DOI:10.1109/TSE.2018.2872711"],"references":["287972729_On_the_use_of_many_quality_attributes_for_software_refactoring_a_many-objective_search-based_software_engineering_approach","266385069_RefactoringScript_A_Script_and_Its_Processor_for_Composite_Refactoring","265552713_Many-objective_software_remodularization_using_NSGA-III","262364433_Supervised_software_modularisation","260061494_The_Use_of_Development_History_in_Software_Refactoring_Using_a_Multi-Objective_Evolutionary_Algorithm","258378296_Exploring_the_Eradication_of_Code_Smells_An_Empirical_and_Theoretical_Perspective","235924392_Search-based_Refactoring_Towards_Semantics_Preservation","235924378_Maintainability_Defects_Detection_and_Correction_A_Multi-Objective_Approach","224260052_A_practical_guide_for_using_statistical_tests_to_assess_randomized_algorithms_in_software_engineering","224206747_A_Refactoring_Approach_to_Parallelism","224177572_An_Interactive_Evolutionary_Multiobjective_Optimization_Method_Based_on_Progressively_Approximated_Value_Functions","224175111_Integration_of_Preferences_in_Hypervolume-Based_Multiobjective_Evolutionary_Algorithms_by_Means_of_Desirability_Functions","222413173_Search-Based_Refactoring_for_Software_Maintenance","221469956_Search-Based_Parallel_Refactoring_Using_Population-Based_Direct_Approaches","220742366_Innovization_Innovating_design_principles_through_optimization","220741091_On_the_Use_of_Genetic_Programming_for_Automated_Refactoring_and_the_Introduction_of_Design_Patterns","220741085_Pareto_Optimal_Search_Based_Refactoring_at_the_Design_Level","4120064_Evolving_transformation_sequences_using_genetic_algorithms","4010973_A_metric-based_approach_to_enhance_design_quality_through_meta-pattern_transformations","3929872_Automated_support_for_program_refactoring_using_invariants","3418802_Dynamic_Multiobjective_Optimization_Problems_Test_Cases_Approximations_and_Applications","310821619_Interactive_and_guided_architectural_refactoring_with_search-based_recommendation","304915785_Multi-Criteria_Code_Refactoring_Using_Search-Based_Software_Engineering_An_Industrial_Case_Study","286334742_Simultaneous_comparisons_and_the_control_of_type_I_errors","271528890_Refactoring_Improving_the_Design_of_Existing_Code","266656205_Manual_refactoring_changes_with_automated_refactoring_validation","262395024_Search-Based_Software_Engineering_Trends_Techniques_and_Applications","262251391_A_field_study_of_refactoring_challenges_and_benefits","262159942_A_Comparative_Study_of_Manual_and_Automated_Refactorings","260648607_Programmer-Friendly_Refactoring_Errors","257559900_Parameter_tuning_or_default_values_An_empirical_investigation_in_search-based_software_engineering","254041678_WitchDoctor_IDE_support_for_real-time_auto-completion_of_refactorings","245348706_An_Object-Oriented_Design_Quality_Assessment_Model","242598207_Refactoring_An_Aid_in_Designing_Application_Frameworks_and_Evolving_Object-Oriented_Systems","240802102_A_Critique_and_Improvement_of_the_CL_Common_Language_Effect_Size_Statistics_of_McGraw_and_Wong","234137797_Putting_the_Developer_in-the-Loop_An_Interactive_GA_for_Software_Re-modularization","233483904_Trial-and-error_solving_of_a_confinement_problem_by_a_jumping_spider_Portia_fimbriata","222695111_Evolutionary_multiobjective_optimization_using_an_outranking-based_dominance_generalization","221554695_JDeodorant_Identification_and_Application_of_Extract_Class_Refactorings","221321806_BeneFactor_A_flexible_refactoring_tool_for_eclipse","221219778_Design_Defects_Detection_and_Correction_by_Example","220743540_Search-Based_Determination_of_Refactorings_for_Improving_the_Class_Structure_of_Object-Oriented_Systems","216027190_Test-Driven_Development-By_Example","200827826_Experimentation_In_Software_Engineering_An_Introduction","33690516_Refactoring_Object-Oriented_Frameworks","4262085_Refactoring--Does_It_Improve_Software_Quality","4114677_Refactoring_-_Improving_coupling_and_cohesion_of_existing_code","3418687_A_fast_and_elitist_multiobjective_genetic_algorithm_NSGA-II","3249558_Refactoring_Tools_Fitness_for_Purpose"]}