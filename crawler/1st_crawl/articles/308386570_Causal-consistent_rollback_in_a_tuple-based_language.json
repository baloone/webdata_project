{"id":"308386570_Causal-consistent_rollback_in_a_tuple-based_language","abstract":"Rollback is a fundamental technique for ensuring reliability of systems, allowing one, in case of troubles, to recover a past system state. However, the definition of rollback in a concurrent/distributed scenario is quite tricky. We propose an approach based on the notion of causal-consistent reversibility: any given past action can be undone, provided that all the actions caused by it are undone as well. Given that, we define a rollback as the minimal causal-consistent sequence of backward steps able to undo a given action. We define the semantics of such a rollback operator, and show that it satisfies the above specification. The approach that we present is quite general, but we instantiate it in the case of μKlaim, a formal coordination language based on distributed tuple spaces. We remark that this is the first definition of causal-consistent rollback in a shared-memory setting. We illustrate the use of rollback in μKlaim on a simple, but realistic, application scenario.","authors":["Elena Giachino","Ivan Lanese","Claudio Antares Mezzina","Francesco Tiezzi"],"meta":["September 2016Journal of Logical and Algebraic Methods in Programming 88(3)","DOI:10.1016/j.jlamp.2016.09.003"],"references":["280752222_Causal-Consistent_Reversible_Debugging","278623175_Causal-Consistent_Reversibility","262279575_Concurrent_Flexible_Reversibility","262253402_Warp_speed_Executing_time_warp_on_1966080_cores","261157289_A_Compositional_Semantics_for_the_Reversible_p-Calculus","261039109_A_review_of_reverse_debugging","234790489_System_Structure_for_Software_Fault_Tolerance","228796126_Reversible_Communicating_Concurrent_Systems","227281389_The_Klaim_Project_Theory_and_Practice","221550839_On_the_Statistical_Thermodynamics_of_Reversible_Communicating_Processes","220700934_Reversible_Communicating_Systems","220700540_Controlling_Reversibility_in_Higher-Order_Pi","220700366_Transactions_in_RCCS","220676521_Lightweight_checkpointing_for_concurrent_ML","3719748_Using_reversible_computing_to_achieve_fail-safety","3449335_Basic_Concepts_and_Taxonomy_of_Dependable_and_Secure_Computing","3187929_KLAIM_A_kernel_language_for_agents_interaction_and_mobility","2561132_Resource_Access_and_Mobility_Control_with_Dynamic_Privileges_Acquisition","2467023_Using_Reversible_Computing_to_Achieve_Fail-Safety","311471587_Safe_programmable_speculative_parallelism","308808921_Causal-Consistent_Reversibility_in_a_Tuple-Based_Language","283364215_A_Reversible_Process_Calculus_and_the_Modelling_of_the_ERK_Signalling_Pathway","280235950_Towards_Modelling_of_Local_Reversibility","278828881_Reversibility_in_the_higher-order_p-calculus","233765921_A_Reversible_Abstract_Machine_and_Its_Space_Overhead","222783480_Reversing_Algebraic_Process_Calculi","222745053_Reversible_Irreversible_and_Optimal_l-machines","222424005_Abstractions_for_fault-tolerant_global_computing","220997796_Transactors_A_programming_model_for_maintaining_globally_consistent_distributed_in_unreliable_environments","220752285_Safe_Programmable_Speculative_Parallelism","220700991_Reversing_Higher-Order_Pi","220404862_Generative_communication_in_LINDA","220404717_A_Formal_Approach_to_Undo_Operations_in_Programming_Languages","220280151_KLAVA_A_Java_package_for_distributed_and_mobile_applications","2550152_A_Survey_of_Rollback-Recovery_Protocols_in_Message-Passing_Systems"]}