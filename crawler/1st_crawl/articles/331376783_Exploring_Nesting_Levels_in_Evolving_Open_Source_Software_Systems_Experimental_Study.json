{"id":"331376783_Exploring_Nesting_Levels_in_Evolving_Open_Source_Software_Systems_Experimental_Study","abstract":"Background\nSoftware complexity affects its quality; a complex software is not only difficult to read, maintain and less efficient, but it also can be less secure with many vulnerabilities. Complexity metrics, e.g. cyclomatic complexity and nesting levels, are commonly used to predict and benchmark software cost and efficiency. Complexity metrics are also used to decide if code refactoring is needed.\n\nObjective\nSoftware systems with high complexity need more time to develop and test and may lead to bad understandability and more errors. Nesting level in the target structure may result in developing more complex software in what is so-called the nesting problem. Nesting problem should be shortened by rewriting the code or breaking into several functional procedures.\n\nMethod\nIn this paper, the relationship between the nesting levels, the cyclomatic complexity, and lines of code (LOC) metrics are measured through several software releases. In order to address how strong a relationship between these factors with the nesting level, correlation coefficients are calculated. Moreover, to examine to what extent the developers are aware of and tackle the nesting problem, the evolution of nesting levels for ten releases of five open sources systems is studied to see if it is improving over successive versions or not.\n\nResults\nThe result shows that the nesting level has variant effects on the cyclomatic complexity and SLOC for the five studied systems.\n\nConclusion\nnesting level has the tendency to have a positive correlation with other factors (cyclomatic complexity and LOC).","authors":["Mamdouh Alenezi","Mohammad I. Zarour","Mohammed Akour"],"meta":["February 2019Recent Patents on Computer Science 12(4)","DOI:10.2174/2213275912666190204134206","Project: Exploring Software Quality"],"references":["324641184_Assessing_the_Refactoring_of_Brain_Methods","283817877_Empirical_Analysis_of_the_Complexity_Evolution_in_Open-Source_Software_Systems","269800522_A_Review_and_Analysis_of_Software_Complexity_Metrics_in_Structural_Testing","261455470_Cyclomatic_complexity_The_nesting_problem","258403375_Lessons_Learnt_from_Gauging_Software_Metrics_of_Cabin_Software_in_a_Commercial_Airliner","221418563_On_the_Impact_of_Design_Flaws_on_Software_Defects","220534289_Exploring_the_Structure_of_Complex_Software_Designs_An_Empirical_Study_of_Open_Source_and_Proprietary_Code","220377011_A_unified_metric_of_software_complexity_Measuring_productivity_quality_and_value","3188321_Empirical_Analysis_of_CK_Metrics_for_Object-Oriented_Design_Complexity_Implications_for_Software_Defects","341152727_An_Empirical_Analysis_of_the_Maintainability_Evolution_of_Open_Source_Systems","318126532_An_automated_code_smell_and_anti-pattern_detection_approach","311609822_Software_Metrics_and_Security_Vulnerabilities_Dataset_and_Exploratory_Study","279355975_Experimentation_in_Software_Engineering","269198360_The_Dimensionality_Of_Program_Complexity","221609653_Is_Complexity_Really_the_Enemy_of_Software_Security","221555743_Mining_metrics_to_predict_component_failures","221553690_The_Dimensionality_of_Program_Complexity","221494930_An_Empirical_Model_to_Predict_Security_Vulnerabilities_using_Code_Complexity_Metrics","220692125_Object-Oriented_Metrics_in_Practice_Using_Software_Metrics_to_Characterize_Evaluate_and_Improve_the_Design_of_Object-Oriented_Systems","220356602_Code_quality_analysis_in_open_source_software_development","220070444_A_Complexity_Measure","220068977_Evaluating_Complexity_Code_Churn_and_Developer_Activity_Metrics_as_Indicators_of_Software_Vulnerabilities","200827826_Experimentation_In_Software_Engineering_An_Introduction","3514328_Metrics_for_Assessing_a_Software_System's_Maintainability","3189025_A_Complexity_Measure"]}