{"id":"303099518_An_Analysis_of_the_Search_Spaces_for_Generate_and_Validate_Patch_Generation_Systems","abstract":"We present the first systematic analysis of key characteristics of patch search spaces for automatic patch generation systems. We analyze sixteen different configurations of the patch search spaces of SPR and Prophet, two current state-of-the-art patch generation systems. The analysis shows that 1) correct patches are sparse in the search spaces (typically at most one correct patch per search space per defect), 2) incorrect patches that nevertheless pass all of the test cases in the validation test suite are typically orders of magnitude more abundant, and 3) leveraging information other than the test suite is therefore critical for enabling the system to successfully isolate correct patches.\nWe also characterize a key tradeoff in the structure of the search spaces. Larger and richer search spaces that contain correct patches for more defects can actually cause systems to find fewer, not more, correct patches. We identify two reasons for this phenomenon: 1) increased validation times because of the presence of more candidate patches and 2) more incorrect patches that pass the test suite and block the discovery of correct patches. These fundamental properties, which are all characterized for the first time in this paper, help explain why past systems often fail to generate correct patches and help identify challenges, opportunities, and productive future directions for the field.","authors":["Fan Long","Martin Rinard"],"meta":["February 2016","DOI:10.1145/2884781.2884872","Conference: the 38th International Conference"],"references":["301428541_The_plastic_surgery_hypothesis","288827327_An_Empirical_Study_on_Real_Bug_Fixes","277334296_Automatic_Repair_of_Real_Bugs_An_Experience_Report_on_the_Defects4J_Dataset","266659285_Defects4J_a_database_of_existing_faults_to_enable_controlled_testing_studies_for_Java_programs","266206811_Vejovis_Suggesting_Fixes_for_JavaScript_Faults","264673563_A_Critical_Review_of_Automatic_Patch_Generation_Learned_from_Human-Written_Patches_Essay_on_the_Problem_Statement_and_the_Evaluation_of_Automatic_Software_Repair","261598130_Automatic_Repair_of_Buggy_If_Conditions_and_Missing_Preconditions_with_SMT","261101009_Do_the_Fix_Ingredients_Already_Exist_An_Empirical_Inquiry_into_the_Redundancy_Assumptions_of_Program_Repair_Approaches","260424732_The_Strength_of_Random_Search_on_Automated_Program_Repair","258499614_Mining_Software_Repair_Models_for_Reasoning_on_the_Search_Space_of_Automated_Program_Fixing","253239334_Cost-Aware_Automatic_Program_Repair","241632971_Automated_repair_of_HTML_generation_errors_in_PHP_applications_using_string_constraint_solving","237054160_MintHint_Automated_Synthesis_of_Repair_Hints","221496277_Detecting_and_Escaping_Infinite_Loops_with_Jolt","220910210_Automatically_Patching_Errors_in_Deployed_Software","220854570_Automated_Fixing_of_Programs_with_Contracts","304286816_Repairing_Programs_with_Semantic_Code_Search_T","304286697_Fixing_Recurring_Crash_Bugs_via_Analyzing_QA_Sites_T","303284530_Automatic_patch_generation_by_learning_correct_code","301274054_Automatic_patch_generation_by_learning_correct_code","300645911_Deductive_Program_Repair","299909645_Staged_program_repair_with_condition_synthesis","299868538_Is_the_cure_worse_than_the_disease_overfitting_in_automated_program_repair","279843686_Automatic_Error_Elimination_by_Horizontal_Code_Transfer_Across_Multiple_Applications","279835627_Automatic_Error_Elimination_by_Multi-Application_Code_Transfer","279835496_An_Analysis_of_Patch_Plausibility_and_Correctness_for_Generate-And-Validate_Patch_Generation_Systems","266657664_Automatic_Runtime_Error_Repair_and_Containment_via_Recovery_Shepherding","266656091_Data-guided_repair_of_selection_statements","262284670_Bolt_on-demand_infinite_loop_escape_in_unmodified_binaries","261276659_Leveraging_program_equivalence_for_adaptive_program_repair_Models_and_first_results","261230128_Automatic_patch_generation_learned_from_human-written_patches","261166224_SemFix_Program_repair_via_semantic_analysis","254041670_A_systematic_study_of_automated_program_repair_Fixing_55_out_of_105_bugs_for_8_each","241770215_Self-Stabilizing_Java","234801914_Enhancing_server_availability_and_security_through_failure-oblivious_computing","221560750_Managing_performance_vs_accuracy_trade-offs_with_loop_perforation","221321177_Using_early_phase_termination_to_eliminate_load_imbalances_at_barrier_synchronization_points","221235796_Probabilistic_accuracy_bounds_for_fault-tolerant_computations_that_discard_tasks","221032853_Detecting_and_eliminating_memory_leaks_using_cyclic_memory_allocation","220883949_Assertion-based_repair_of_complex_data_structures","220854671_Inference_and_enforcement_of_data_structure_consistency_specifications","220851853_KLEE_Unassisted_and_Automatic_Generation_of_High-Coverage_Tests_for_Complex_Systems_Programs","220719944_Using_Mutation_to_Automatically_Suggest_Fixes_for_Faulty_Programs","3189704_Goal-Directed_Reasoning_for_Specification-Based_Data_Structure_Repair","2563411_Automatic_Detection_and_Repair_of_Errors_in_Data_Structures"]}