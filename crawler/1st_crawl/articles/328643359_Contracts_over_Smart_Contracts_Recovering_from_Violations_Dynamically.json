{"id":"328643359_Contracts_over_Smart_Contracts_Recovering_from_Violations_Dynamically","abstract":"Smart contracts which enforce behaviour between parties have been hailed as a new way of regulating business, particularly on public distributed ledger technologies which ensure the immutability of smart contracts, and can do away with points of trust. Many such platforms, including Ethereum, come with a virtual machine on which smart contracts are executed, described in an imperative manner. Given the critical nature of typical smart contract applications, their bugs and vulnerabilities have proved to be particularly costly. In this paper we argue how dynamic analysis can be used not only to identify errors in the contracts, but also to support recovery from such errors. Furthermore, contract immutability means that code cannot be easily fixed upon discovering a problem. To address this issue, we also present a specification-driven approach, allowing developers to promise behavioural properties via smart contracts, but still allowing them to update the code which implements the specification in a safe manner.","authors":["Christian Colombo","Joshua Ellul","Gordon J. Pace"],"meta":["November 2018","Project: Runtime Verification of Smart Contracts"],"references":["327515721_Runtime_Verification_of_Ethereum_Smart_Contracts","323084577_Runtime_Failure_Prevention_and_Reaction","262251836_Recovery_within_Long-Running_Transactions","326948399_KEVM_A_Complete_Formal_Semantics_of_the_Ethereum_Virtual_Machine","323392357_A_Semantic_Framework_for_the_Security_Analysis_of_Ethereum_smart_contracts","321146810_A_Concurrent_Perspective_on_Smart_Contracts","309448109_Formal_Verification_of_Smart_Contracts_Short_Paper","309444724_Making_Smart_Contracts_Smarter","307507489_Step_by_Step_Towards_Creating_a_Safe_Smart_Contract_Lessons_and_Insights_from_a_Cryptocurrency_Lab","257563476_Safer_asynchronous_runtime_monitoring_using_compensations"]}