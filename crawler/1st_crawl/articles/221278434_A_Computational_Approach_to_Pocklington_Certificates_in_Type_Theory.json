{"id":"221278434_A_Computational_Approach_to_Pocklington_Certificates_in_Type_Theory","abstract":"Pocklington certificates are known to provide short proofs of primality. We show how to perform this in the framework of formal, mechanically checked, proofs. We present an encoding of certificates for the proof system Coq which yields radically improved performances by relying heavily on computations inside and outside of the system (twolevel approach). 1 Formal Computational Proofs 1.1 Machines and the Quest for Correctness It is generally considered that modern mathematical logic was born towards the end of 19 th century, with the work of logicians like Frege, Peano, Russell or Zermelo, which lead to the precise definition of the notion of logical deduction and to formalisms like arithmetic, set theory or early type theory. From then on, a mathematical proof could be understood as a mathematical object itself, whose correction obeys some well-defined syntactical rules. In most formalisms, a formal proof is viewed as some tree-structure; in natural deduction for instance, given to formal proofs σA and σB respectively of propositions A and B, these can be combined in order to build a proof of A ∧ B: σA σB ⊢ A ⊢ B ⊢ A ∧ B To sum things up, the logical point of view is that a mathematical statement holds in a given formalism if there exists a formal proof of this statement which follows the syntactical rules of the formalism. A traditional mathematical text can then be understood as an informal description of the formal proof. Things changed in the 1960-ties, when N.G. de Bruijn’s team started to use computers to actually build formal proofs and verify their correctness. Using the fact that data-structures like formal proofs are very naturally represented in a computer’s memory, they delegated the proof-verification work to the machine; their software Automath is considered as the first proof-system and is the common","authors":["Benjamin Gregoire","Laurent Théry","Benjamin Werner"],"meta":["April 2006","DOI:10.1007/11737414_8","SourceDBLP","Conference: Functional and Logic Programming, 8th International Symposium, FLOPS 2006, Fuji-Susono, Japan, April 24-26, 2006, Proceedings"],"references":["221241347_A_Compiled_Implementation_of_Strong_Reduction","2508612_Autarkic_Computations_in_Formal_Proofs","272858062_Algebra","248736853_The_determination_of_the_prime_or_composite_nature_of_large_numbers_by_Fermat''''s_theorem","243503803_GNU_MP_The_GNU_Multiple_Precision_Arithmetic_Library","242921381_New_Primality_Criteria_and_Factorizations_of_2_m_1","242702740_Factorizations_of_bn_1","242297917_Preliminary_evaluation_of_the_interactive_drama_facade","227013443_A_Skeptic's_Approach_to_Combining_HOL_and_Maple","220160843_Formal_and_Efficient_Primality_Proofs_by_Use_of_Computer_Algebra_Oracles"]}