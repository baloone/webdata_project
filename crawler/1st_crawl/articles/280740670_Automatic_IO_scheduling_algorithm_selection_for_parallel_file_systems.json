{"id":"280740670_Automatic_IO_scheduling_algorithm_selection_for_parallel_file_systems","abstract":"This article presents our approach to provide input/output (I/O) scheduling with double adaptivity: to applications and devices. In high-performance computing environments, parallel file systems provide a shared storage infrastructure to applications. In the situation where multiple applications access this shared infrastructure concurrently, their performance can be impaired because of interference. Our work focuses on I/O scheduling as a tool to improve performance by alleviating interference effects. The role of the I/O scheduler is to decide the order in which applications' requests must be processed by the parallel file system's servers, applying optimizations to adjust the resulting access pattern for improved performance. Our approach to improve I/O scheduling results is based on using information from applications' access patterns and storage devices' sensitivity to access sequentiality. We have applied machine learning to provide the ability to automatically select the best scheduling algorithm for each situation. Our approach improves performance by up to 75% over an approach that uses the same scheduling algorithm to all situations, without adaptability. Our results evidence that both aspects – applications and storage devices – are essential to make good scheduling decisions. Copyright","authors":["Francieli Zanon Boito","Rodrigo Virote Kassick","Philippe Olivier Alexandre. Navaux","Yves Denneulin"],"meta":["August 2015Concurrency and Computation Practice and Experience 28(8)","DOI:10.1002/cpe.3606"],"references":["281295751_Two-Choice_Randomized_Dynamic_IO_Scheduler_for_Object_Storage_Systems","271453751_CALCioM_Mitigating_IO_Interference_in_HPC_Systems_through_Cross-Application_Coordination","262270954_Damaris_How_to_Efficiently_Leverage_Multicore_Parallelism_to_Achieve_Scalable_Jitter-free_IO","234786520_Block_management_in_solid-state_devices","230808400_Overview_of_the_MPI-IO_Parallel_IO_Interface","221900777_The_WEKA_data_mining_software_An_update","221306476_Performance_Evaluation_of_a_Prototype_Distributed_NFS_Server","220782818_IOrchestrator_Improving_the_Performance_of_Multi-node_IO_Systems_via_Inter-Server_Coordination","220782397_Server-Side_IO_Coordination_for_Parallel_File_Systems","220782191_QoS_Support_for_End_Users_of_IO-intensive_Applications_using_Shared_Storage_Systems","220781967_Parallel_IO_prefetching_using_MPI_file_caching_and_IO_signatures","220457276_Grid'5000_A_Large_Scale_And_Highly_Reconfigurable_Experimental_Grid_Testbed","215990408_The_WEKA_data_mining_software_An_update","50282877_EDDK_Energy-Efficient_Distributed_Deterministic_Key_Management_for_Wireless_Sensor_Networks","44046251_IO_Scheduling_Service_for_Multi-Application_Clusters","3789915_Data_sieving_and_collective_IO_in_ROMIO","279201915_Towards_Fast_profiling_of_Storage_Devices_Regarding_Access_Sequentiality","269308679_AGIOS_Application-guided_IO_scheduling_for_parallel_file_systems","262315207_The_impact_of_applications'_IO_strategies_on_the_performance_of_the_Lustre_parallel_file_system","261093552_Hierarchical_IO_Scheduling_for_Collective_IO","232616235_Design_and_Development_of_a_Novel_MEMS_Force_Sensor_for_Plantar_Pressure_Measurement","221595845_Understanding_intrinsic_characteristics_and_system_implications_of_flash_memory_based_solid_state_drives","221040994_Performance_of_Parallel_IO_Scheduling_Strategies_on_a_Network_of_Workstations","220941028_Improving_Parallel_Write_by_Node-Level_Request_Scheduling","220232795_A_Novel_network_request_scheduler_for_a_large_scale_storage_system","200040509_Operating_System_Concepts","2449392_Overview_of_the_MPI-IO_Parallel_IO_Interface"]}