{"id":"222459696_A_Theory_of_Type_Polymorphism_in_Programming","abstract":"The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot “go wrong” and a Syntactic Soundness Theorem states that if accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on is in fact already implemented and working, for the metalanguage ML in the Edinburgh LCF system.","authors":["Robin Milner"],"meta":["December 1978Journal of Computer and System Sciences 17(3):348-375","DOI:10.1016/0022-0000(78)90014-4","Sourcedx.doi.org"],"references":["237107559_Towards_a_Mathematical_Semantics_for_Computer_Languages","220897137_Data_Types_as_Objects","220198334_Revised_report_on_the_algorithm_language_ALGOL_68","213877138_Data_Types_as_Lattices","305261183_Programming_with_abstract_data_types","266710408_Recursive_Programming_Techniques","266249757_The_next_700_programming_languages","243536627_X-calculus_models_of_programming_languages","242637297_Lattice-theoretic_models_for_various_type-free_calculi","235208888_Models_of_LCF","235089022_Lambda-calculus_models_of_programming_languages","234779198_A_Metalanguage_for_interactive_proof_in_LCF","225393796_On_a_new_approach_to_representation_independent_data_classes","220997277_Syntactic_Control_of_Interference","220688092_Edinburgh_LCF","220431038_A_Machine-Oriented_Logic_Based_on_the_Resolution_Principle","220427503_The_Treatment_of_Data_Types_in_EL1","220423540_Some_Ideas_on_Data_Types_in_High-Level_Languages","215519779_The_Principal_Type-Scheme_of_an_Object_in_Combinatory_Logic","213885836_The_principal_type-scheme_of_an_object_in_Combinatory_Logic","213881955_A_Powerdomain_Construction","213881660_Programming_with_Abstract_Data_Types","213878750_Towards_a_Theory_of_Type_Structure"]}