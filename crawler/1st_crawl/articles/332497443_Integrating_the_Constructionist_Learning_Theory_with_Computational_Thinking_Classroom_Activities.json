{"id":"332497443_Integrating_the_Constructionist_Learning_Theory_with_Computational_Thinking_Classroom_Activities","abstract":"In computer science education at school, computational thinking has been an emerging topic over the last decade. Even though, computational thinking is interpreted and integrated in classrooms in different ways, an identification process about what computational thinking is about has been in progress among computer science schoolteachers and computer science education researchers since Wing's initial paper on the characteristics of computational thinking. On the other hand, the constructionist learning theory by Papert, based on constructivism and Piaget, has a long tradition in computer science education for describing the students' learning process by hands-on activities. Our contribution, in this paper, is to present a new mapping tool which can be used to review classroom activities in terms of both computational thinking and constructionist learning. For the tool, we have reused existing definitions of computer science concepts and computational thinking concepts and combined these with our new constructionism matrix. The matrix's most notable feature is its scale of learners' autonomy. This scale represents the degree of choices learners have at each stage of development of their artefact. To develop the scale definitions, we trialed the mapping tool, coding twenty-one popular international computing activities for pupils aged 5 to 11 (K-5). From our trial, we have shown that we can use the mapping tool, with a moderate to high degree of reliability across coders, to analyse classroom activities with regard to computational thinking and constructionism, however, further validation is needed to establish its usefulness. Despite a small number of activities (n = 21) being analysed with our mapping tool, our preliminary results showed several interesting findings. Firstly, that learner autonomy was low for defining the problem and developing their own design. Secondly that the activity type (such as lesson plan rather than online activity) or artefact created (such as physical artefact rather than onscreen activity or unplugged activity), rather than the computational thinking or computer science concept being taught was related to learner autonomy. This provides some tentative evidence, which may seem obvious, that the learning context rather than the learning content is related to degree of constructionism of an activity and that computational thinking per se may not be related to constructionism. However, further work is needed on a larger number of activities to verify and validate this suggestion.","authors":["Andrew Csizmadia","Bernhard Standl","Jane Waite"],"meta":["April 2019Informatics in Education 18(1):41-67","DOI:10.15388/infedu.2019.03","Project: Pedagogy and CS Education in Schools"],"references":["321148188_Solving_Everyday_Challenges_in_a_Computational_Way_of_Thinking","316446592_Computational_Thinking_in_Teacher_Education","315831218_Developing_a_Two-Dimensional_Categorization_System_for_Educational_Tasks_in_Informatics","308499063_It's_Computational_Thinking_Bebras_Tasks_in_the_Curriculum","323936320_Abstraction_in_action_K-5_teachers'_uses_of_levels_of_abstraction_particularly_the_design_level_in_teaching_programming","319393897_Taxonomy_of_educational_objectives_The_classification_of_educational_goals_Handbook_I_cognitive_domain","319134131_K-8_Learning_Trajectories_Derived_from_Research_Literature_Sequence_Repetition_Conditionals","316945956_A_Literature_Review_through_the_Lens_of_Computer_Science_Learning_Goals_Theorized_and_Explored_in_Research","316940190_Abstraction_and_common_classroom_activities","310792069_The_long_quest_for_computational_thinking"]}