{"id":"340642631_Preserving_Instance_State_during_Refactorings_in_Live_Environments","abstract":"An important activity of software evolution consists in applying refactorings to enhance the quality of the code without changing its behaviour. Having a proper refactoring tool is a must-to in any professional development environment. In addition, live programming allows faster development than the usual edit-compile-debug process. During live programming sessions, the developer can directly manipulate instances and modify the state of the running program. However, when a complex refactoring is performed, instances may be corrupted (i.e., their state is lost). For example, when pushing an instance variable to a superclass there is a moment where the superclass does not have yet acquired the new instance variable and the subclass does not have it any more. It means that the value assigned to this instance variable in existing instances is lost after the refactoring. This problem is not anecdotal since 36% of the refactorings described in Fowlerâ€™s catalogue corrupt instances when used in a live programming context. There is a need to manually migrate, regenerate or reload instances from persistent sources. This manual fix lowers the usefulness of live programming.\nIn this context of live programming, we propose, AtomicRefactoring, a new solution based on Dynamic Software Update to preserve the state of the application after performing refactorings. We provide a working extension to the existing refactoring tool developed for the language Pharo (a new offspring inheriting from Smalltalk), allowing application developers to perform complex refactorings preserving the live state of the running program.","authors":["Pablo Tesone","Guillermo Polito","Luc Fabresse","Noury Bouraqadi"],"meta":["April 2020Future Generation Computer Systems 110(4)","DOI:10.1016/j.future.2020.04.010"],"references":["329006813_Dynamic_Software_Update_from_Development_to_Production","283468840_Virtualization_Support_for_Dynamic_Core_Library_Update","283303481_A_Bootstrapping_Infrastructure_to_Build_and_Extend_Pharo-Like_Languages","280700144_A_Partial_Read_Barrier_for_Efficient_Support_of_Live_Object-oriented_Programming","277145402_An_Experimental_Investigation_on_the_Innate_Relationship_between_Quality_and_Refactoring","262424350_Refactoring_Practice_How_it_is_and_How_it_Should_be_Supported_-_An_Eclipse_Case_Study","260648605_Evaluating_Dynamic_Software_Update_Safety_Using_Systematic_Testing","259358759_Dynamic_Software_Updating_with_Gosh_Current_Status_and_the_Road_Ahead","254041677_Use_disuse_and_misuse_of_automated_refactorings","221303100_Dynamic_code_evolution_for_Java","220875477_The_LAN-simulation_A_Refactoring_Teaching_Example","220566511_Programming_in_an_Interactive_Environment_the_LISP_Experience","4175851_The_role_of_refactorings_in_API_evolution","3188387_A_Survey_of_software_refactoring","2568977_A_Survey_of_Object-Oriented_Concepts","2336695_SELF_the_power_of_simplicity","318494157_Real-time_programming_and_the_big_ideas_of_computational_literacy","305508033_Tedsuto_A_General_Framework_for_Testing_Dynamic_Software_Updates","304531584_Live_Robot_Programming_The_Language_its_Implementation_and_Robot_API_Independence","299909727_Measure_it_Manage_it_Ignore_it_software_practitioners_and_technical_debt","292538200_Rubah_DSU_for_Java_on_a_stock_JVM","276155941_Live_programming_for_robotic_fabrication","271528890_Refactoring_Improving_the_Design_of_Existing_Code","268979023_Smalltalk-80_The_Language_and_Its_Implementation","267455778_Bootstrapping_Reflective_Systems_The_Case_of_Pharo","263813577_An_Empirical_Study_of_RefactoringChallenges_and_Benefits_at_Microsoft","262251391_A_field_study_of_refactoring_challenges_and_benefits","262159942_A_Comparative_Study_of_Manual_and_Automated_Refactorings","260399487_Newspeak_Programming_Language_Draft_Specification_Version_005","259684109_A_survey_of_dynamic_software_updating","251576036_Dynamic_Software_Updates_for_Java_A_VM-Centric_Approach","239063293_An_automated_refactoring_tool","238676735_Smith_self_the_power_of_simplicity","226161621_Evolving_Object-Oriented_Designs_with_Refactorings","223666605_VIVA_A_visual_language_for_image_processing","221320542_Living_it_up_with_a_Live_programming_language","220752408_Safe_and_timely_updates_to_multi-threaded_programs","220752286_Dynamic_Software_Updates_A_VM-centric_Approach","216574350_JavAdaptor_-_Flexible_Runtime_Updates_of_Java_Applications","33690516_Refactoring_Object-Oriented_Frameworks","31676201_Javascript_the_definitive_guide_D_Flanagan","30870310_Smalltalk-80_The_Interactive_Programming_Environment","3998746_A_Technique_for_Dynamic_Updating_of_Java_Software","2959341_Direct_Manipulation_A_Step_Beyond_Programming_Languages","2370880_Dynamic_Software_Updating"]}