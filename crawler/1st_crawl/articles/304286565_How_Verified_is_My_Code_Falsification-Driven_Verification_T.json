{"id":"304286565_How_Verified_is_My_Code_Falsification-Driven_Verification_T","authors":["Alex Groce","Iftekhar Ahmed","Carlos Jensen","Paul Mckenney"],"meta":["November 2015","DOI:10.1109/ASE.2015.40","Conference: 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)"],"references":["308409498_Finding_Model-Checkable_Needles_in_Large_Source_Code_Haystacks_Modular_Bug-Finding_via_Static_Analysis_and_Dynamic_Invariant_Discovery","281584658_Trivial_Compiler_Equivalence_A_Large_Scale_Empirical_Study_of_a_Simple_Fast_and_Effective_Equivalent_Mutant_Detection_Technique","277665552_Are_We_There_Yet_Determining_the_Adequacy_of_Formalized_Requirements_and_Test_Suites","277017031_Coverage_and_Its_Discontents","262398289_Testing_Static_Analyzers_with_Randomly_Generated_Programs","262222409_Comparing_non-adequate_test_suites_using_coverage_criteria","257522893_Symbolic_PathFinder_Integrating_symbolic_execution_with_model_checking_for_Java_bytecode_analysis","242391888_Read-copy_update_Using_execution_history_to_solve_concurrency_problems","242147328_Quickly_testing_the_tester_via_path_coverage","226418910_Exploiting_Traces_in_Program_Analysis","225782013_Error_Explanation_with_Distance_Metrics","225142568_Z3_an_efficient_SMT_solver","221027205_Mutation_Coverage_Estimation_for_Model_Checking","220884524_A_Theory_of_Mutations_with_Applications_to_Vacuity_Coverage_and_Fault_Tolerance","220854469_Random_testing_and_model_checking_Building_a_common_framework_for_nondeterministic_exploration","220370158_Making_the_Most_of_BMC_Counterexamples","220136171_Model_Checking_Programs","4251339_Randomized_Differential_Testing_as_a_Prelude_to_Formal_Verification","4200521_Is_mutation_an_appropriate_tool_for_testing_experiments","3810042_Coverage_estimation_for_symbolic_model_checking","2562625_A_Practical_Approach_to_Coverage_in_Model_Checking","2399715_Mutation_of_Model_Checker_Specifications_for_Test_Generation_and_Evaluation","319393294_Logic_of_Scientific_Discovery","313210214_A_survey_of_program_slicing_techniques","290840648_A_tool_for_checking_ANSI-c_programs","284411763_An_extensible_SAT-solver","274431438_Structured_deferral","270187343_The_Logic_of_Scientific_Discovery","263452357_Checked_coverage_An_indicator_for_oracle_quality","254463384_Finding_common_ground_Choose_assert_and_assume","254058542_Computing_Mutation_Coverage_in_Interpolation-Based_Model_Checking","246718957_Logik_Der_Forschung_The_Logic_of_Scientific_Discovery","236982641_Structured_Deferral_Synchronization_via_Procrastination","234791161_Programming_pearls_Writing_correct_programs","224237894_Formal_verification_of_arbiters_using_property_strengthening_and_underapproximations","221403526_Abstraction_for_Falsification","220884491_Beyond_Vacuity_Towards_the_Strongest_Passing_Formula","220854693_When_only_random_testing_will_do","220752409_Finding_and_Understanding_Bugs_in_C_Compilers","220720114_Assessing_Oracle_Quality_with_Checked_Coverage","220353806_The_read-copy-update_mechanism_for_supporting_real-time_applications_on_shared-memory_multiprocessor_systems_with_Linux","220281712_Practical_Fast_Searching_in_Strings","213894810_A_Survey_of_Program_Slicing_Techniques","4219083_Efficient_Generation_of_Counterexamples_and_Witnesses_in_Symbolic_Model_Checking","4016783_Precise_dynamic_slicing_algorithms","2554020_Efficient_Computation_of_Recurrence_Diameters","2301899_Efficient_Generation_of_Counterexamples_and_Witnesses_in_Symbolic_Model_Checking"]}