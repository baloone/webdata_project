{"id":"311912240_WASTK_An_Weighted_Abstract_Syntax_Tree_Kernel_Method_for_Source_Code_Plagiarism_Detection","abstract":"In this paper, we introduce a source code plagiarism detection method,\nnamed WASTK (Weighted Abstract Syntax Tree Kernel), for computer\nscience education. Different from other plagiarism detection methods,\nWASTK takes some aspects other than the similarity between programs\ninto account. WASTK firstly transfers the source code of a program to\nan abstract syntax tree and then gets the similarity by calculating the\ntree kernel of two abstract syntax trees. To avoid misjudgment caused\nby trivial code snippets or frameworks given by instructors, an idea\nsimilar to TF IDF (Term Frequency - Inverse Document Frequency) in\nthe field of information retrieval is applied. Each node in an abstract\nsyntax tree is assigned a weight by TF IDF. WASTK is evaluated\non different datasets, and as a result, performs much better than other\npopular methods like Sim and JPlag","authors":["Deqiang Fu","Yanyan Xu","Haoran Yu","Boyang Yang"],"meta":["February 2017Scientific Programming 2017(1)","DOI:10.1155/2017/7809047"],"references":["331132565_A_Comparison_of_Similarity_Techniques_for_Detecting_Source_Code_Plagiarism","292407673_Software_Source_Code_Plagiarism_Detection_A_Survey","275254743_Computation_of_Program_Source_Code_Similarity_by_Composition_of_Parse_Tree_and_Call_Graph","262281635_Plagiarism_detection_for_Java_a_tool_comparison","346695369_Sim_a_utility_for_detecting_similarity_in_computer_programs","301690162_A_statistical_interpretation_of_term_specificity_and_its_application_in_retrieval","301558702_Process_Model_Improvement_for_Source_Code_Plagiarism_Detection_in_Student_Programming_Assignments","278392812_YAP3","268189860_A_Source_Code_Plagiarism_Detecting_Method_Using_Sequence_Alignment_with_Abstract_Syntax_Tree_Elements","265606543_Internet_plagiarism_in_higher_education_tendencies_triggering_factors_and_reasons_among_teacher_candidates"]}