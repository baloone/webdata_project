{"id":"318011734_Identifying_Patch_Correctness_in_Test-Based_Automatic_Program_Repair","abstract":"Test-based automatic program repair has attracted a lot of attentions in recent years. Given a program and a test suite containing at least a failed test, test-based automatic program repair approaches change the program to make all test pass. A major challenge faced by automatic program repair approaches is weak test suite. That is, the test suites in practice are often too weak to guarantee correctness, and many patches that pass all the tests are not correct. As a result, existing approaches often generate a large number of incorrect patches. To reduce the number of incorrect patches generated, in this paper we propose a novel approach that heuristically determines the correctness of the generated patches. The core idea of our approach is to exploit the behavior similarity of test case executions. The executions of passed tests on original and patched programs are likely to behave similarly while the executions of failed tests on original and patched programs are likely to behave differently. Also, if two tests exhibit similar runtime behavior, the two tests are likely to have the same test results. Based on these observations, we generate new test inputs to enhance the test suites and use their behavior similarity to determine patch correctness. Our approach is evaluated on a dataset consisting of 130 patches generated from existing program repair systems including jGenProg, Nopol, Kali, and ACS. Our approach successfully prevented 56.3% of the incorrect patches to be generated, without blocking any correct patches.","authors":["Xinyuan Liu","Muhan Zeng","Yingfei Xiong","Lu Zhang"],"meta":["June 2017"],"references":["314152764_Test_Case_Generation_for_Program_Repair_A_Study_of_Feasibility_and_Effectiveness","309450255_Automatic_Repair_of_Real_Bugs_in_Java_A_Large-Scale_Experiment_on_the_Defects4J_Dataset","307307206_Precise_Condition_Synthesis_for_Program_Repair","305772994_Anti-patterns_in_Search-Based_Program_Repair","346372662_Trusted_Software_Repair_for_System_Resiliency","318868782_Better_test_cases_for_better_automated_program_repair","318375339_Identifying_test-suite-overfitted_patches_through_test_case_generation","308858592_Safe_Memory-Leak_Fixing_for_C_Programs","305252944_Qlose_Program_Repair_with_Quantitative_Objectives","304552841_DirectFix_Looking_for_Simple_Program_Repairs"]}