{"id":"305483785_A_Generic_Framework_for_Symbolic_Execution_A_Coinductive_Approach","abstract":"We propose a language-independent symbolic execution framework. The approach is parameterised by a language definition, which consists of a signature for the syntax and execution infrastructure of the language, a model interpreting the signature, and rewrite rules for the language's operational semantics. Then, symbolic execution amounts to computing symbolic paths using a derivative operation. We prove that the symbolic execution thus defined has the properties naturally expected from it, meaning that the feasible symbolic executions of a program and the concrete executions of the same program mutually simulate each other. We also show how a coinduction-based extension of symbolic execution can be used for the deductive verification of programs. We show how the proposed symbolic-execution approach, and the coinductive verification technique based on it, can be seamlessly implemented in language definition frameworks based on rewriting such as the framework. A prototype implementation of our approach has been developed in . We illustrate it on the symbolic analysis and deductive verification of nontrivial programs.","authors":["Dorel Lucanu","Vlad Rusu","Andrei Arusoaie"],"meta":["July 2016Journal of Symbolic Computation 80(3)","DOI:10.1016/j.jsc.2016.07.012","Project: K Framework"],"references":["324519920_Program_Verification_by_Coinduction","281499352_A_Generic_Framework_for_Symbolic_Execution_Theory_and_Applications","280853066_Verifying_Reachability-Logic_Properties_on_Rewriting-Logic_Specifications","329648496_Dynamic_Logic","319394472_Dynamic_Logic","289691041_Checking_reachability_using_matching_logic","281470128_Symbolic_execution_based_on_language_transformation","279957000_Dynamic_Logic","279401584_DART","278646722_CUTE"]}