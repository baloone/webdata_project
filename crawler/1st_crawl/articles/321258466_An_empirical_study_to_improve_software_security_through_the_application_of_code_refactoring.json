{"id":"321258466_An_empirical_study_to_improve_software_security_through_the_application_of_code_refactoring","abstract":"Context\nCode bad smells indicate design flaws that can degrade the quality of software and can potentially lead to the introduction of faults. They can be eradicated by applying refactoring techniques. Code bad smells that impact the security perspective of software should be detected and removed from their code base. However, the existing literature is insufficient to support this claim and there are few studies that empirically investigate bad smells and refactoring opportunities from a security perspective.\n\nObjective\nIn this paper, we investigate how refactoring can improve the security of an application by removing code bad smell.\n\nMethod\nWe analyzed three different code bad smells in five software systems. First, the identified code bad smells are filtered against security attributes. Next, the object-oriented design and security metrics are calculated for the five investigated systems. Later, refactoring is applied to remove security-related code bad smells. The correctness of detection and refactoring of investigated code smells are then validated. Finally, both traditional object-oriented and security metrics are again calculated after removing bad smells to assess its impact on the design and security attributes of systems.\n\nResults\nWe found ‘feature envy’ to be the most abundant security bad smell in investigated projects. The ‘move method’ and ‘move field’ are commonly applied refactoring techniques because of the abundance of feature envy.\n\nConclusion\nThe results of security metrics indicate that refactoring helps improve the security of an application without compromising the overall quality of software systems.","authors":["Haris Mumtaz","Mohammad Alshayeb","Sajjad Mahmood","Mahmood Niazi"],"meta":["November 2017Information and Software Technology 96","DOI:10.1016/j.infsof.2017.11.010"],"references":["279201127_On_Experimenting_Refactoring_Tools_to_Remove_Code_Smells","264791334_Identifying_Refactoring_Opportunities_in_Object-Oriented_Code_A_Systematic_Literature_Review","261417003_Do_code_smells_reflect_important_maintainability_aspects","261120990_Automated_Refactoring_Using_Design_Differencing","260648740_An_Attack_Surface_Metric","237450613_Detecting_Model_Refactoring_Opportunities_Using_Heuristic_Search","232650234_DECOR_A_Method_for_the_Specification_and_Detection_of_Code_and_Design_Smells","228760676_Formal_UML_support_for_the_semi-automatic_application_of_object-oriented_refactorings","226750589_Reporting_Experiments_in_Software_Engineering","226460096_A_Metric-Based_Approach_for_Anti-pattern_Detection_in_UML_Designs","224247686_An_Experience_Report_on_Using_Code_Smells_Detection_Tools","221616889_Towards_an_Integrated_Quality_Assessment_and_Improvement_Approach_for_UML_Models","221610247_A_Methodology_for_Secure_Software_Design","221554988_Security_metrics_for_source_code_structures","221464726_CoSMo_An_Approach_Towards_Conceptual_Security_Modeling","221258536_Managing_Model_Quality_in_UML-Based_Software_Development","220905456_Towards_a_Business_Process-Driven_Framework_for_Security_Engineering_with_the_UML","220902834_Software_Quality_Analysis_by_Code_Clones_in_Industrial_Legacy_Software","220741091_On_the_Use_of_Genetic_Programming_for_Automated_Refactoring_and_the_Introduction_of_Design_Patterns","344912814_Chapter_2_Design_Smells","312485573_Automatic_Detection_of_Instability_Architectural_Smells","311100294_Detecting_Model_Refactoring_Opportunities_Using_Heuristic_Search","305296096_Towards_a_Metrics_Suite_for_Object_Oriented_Design","305031906_Revisiting_the_relationship_between_code_smells_and_refactoring","303481027_Do_Developers_Focus_on_Severe_Code_Smells","271658546_Are_test_smells_really_harmful_An_empirical_study","271528890_Refactoring_Improving_the_Design_of_Existing_Code","265852680_Identifying_Software_Metrics_Thresholds_for_Safety_Critical_System","261245615_An_Empirical_Validation_of_Coupling_Metrics_Using_Automated_Refactoring","260648930_Automated_Behavioral_Testing_of_Refactoring_Engines","259137329_To_what_extent_can_maintenance_problems_be_predicted_by_code_smell_detection_-_An_empirical_study","258162389_UML_model_refactoring_A_systematic_literature_review","247931263_Security_Metrics_for_Object-Oriented_Designs","245348706_An_Object-Oriented_Design_Quality_Assessment_Model","237104595_Practical_analysis_for_refactoring","231381554_Quasi-Experimentation_Design_Analysis_Issue_for_Field_Settings","225227130_A_New_Paradigm_for_Adding_Security_into_is_Development_Methods","225197198_Measuring_usability_as_quality_of_use","224247687_On_Investigating_Code_Smells_Correlations","224088295_Measure_Diagnose_Refactor_A_Formal_Quality_Cycle_for_Software_Models","223073497_An_object-oriented_high-level_design-based_class_cohesion_metric","221321533_Refactoring_UML_models_using_openarchitectureware_to_measure_uml_model_quality_and_perform_pattern_matching_on_UML_models_with_OCL_queries","220868409_UMLsec_Extending_UML_for_secure_systems_development","220772840_Assessing_the_Impact_of_Refactoring_on_Security-Critical_Object-Oriented_Designs","220694795_Essential_Software_Architecture","220692878_Secure_Systems_Development_with_UML","220673981_Code_Bad_Smells_A_review_of_current_knowledge","220377535_Identifying_thresholds_for_object-oriented_software_metrics","220277921_Cloning_considered_harmful_considered_harmful_patterns_of_cloning_in_software","201381729_Experimental_and_Quasi-Experimental_Designs_for_Research","4231685_An_Investigation_of_Bad_Smells_in_Object-Oriented_Design","4175844_Measurement_and_quality_in_object-oriented_design","33690516_Refactoring_Object-Oriented_Frameworks","27484158_Security_Metrics_for_Object-Oriented_Class_Designs","4175576_Product_Metrics_for_Automatic_Identification_of_Bad_Smell_Design_Problems_in_Java_Source-Code"]}