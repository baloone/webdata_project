{"id":"318106879_Piecewise_Holistic_Autotuning_of_Parallel_Programs_with_CERE","abstract":"Current architecture complexity requires fine tuning of compiler and runtime parameters to achieve best performance. Autotuning substantially improves default parameters in many scenarios, but it is a costly process requiring long iterative evaluations. We propose an automatic piecewise autotuner based on CERE (Codelet Extractor and REplayer). CERE decomposes applications into small pieces called codelets: Each codelet maps to a loop or to an OpenMP parallel region and can be replayed as a standalone program. Codelet autotuning achieves better speedups at a lower tuning cost. By grouping codelet invocations with the same performance behavior, CERE reduces the number of loops or OpenMP regions to be evaluated. Moreover, unlike whole-program tuning, CERE customizes the set of best parameters for each specific OpenMP region or loop. We demonstrate the CERE tuning of compiler optimizations, number of threads, thread affinity, and scheduling policy on both nonuniform memory access and heterogeneous architectures. Over the NAS benchmarks, we achieve an average speedup of 1.08× after tuning. Tuning a codelet is 13× cheaper than whole-program evaluation and predicts the tuning impact with a 94.7% accuracy. Similarly, exploring thread configurations and scheduling policies for a Black-Scholes solver on an heterogeneous big.LITTLE architecture is over 40× faster using CERE.","authors":["Mihail Popov","Chadi Akel","Yohan Chatelain","William Jalby"],"meta":["June 2017Concurrency and Computation Practice and Experience 29(17)","DOI:10.1002/cpe.4190","Project: CERE/PCERE"],"references":["303980080_COBAYN_Compiler_autotuning_framework_using_Bayesian_networks","278005915_PCERE_Fine-Grained_Parallel_Benchmark_Decomposition_for_Scalability_Prediction","276178180_CERE_LLVM-Based_Codelet_Extractor_and_REplayer_for_Piecewise_Benchmarking_and_Optimization","262160044_Fine-grained_Benchmark_Subsetting_for_System_Selection","313593641_Hierarchical_groupings_to_optimize_an_objective_function","305984616_Piecewise_Holistic_Autotuning_of_Compiler_and_Runtime_Parameters","302581125_Clustering-based_selection_for_the_exploration_of_compiler_optimization_sequences","298570154_WHO_BELONGS_IN_THE_FAMILY","278023933_CQA_A_code_quality_analyzer_tool_at_binary_level","262254176_Finding_Good_Optimization_Sequences_Covering_Program_Space","261307488_Is_Source-Code_Isolation_Viable_for_Performance_Characterization","258905605_Adaptive_Sampling_for_Performance_Characterization_of_Application_Kernels","228077321_Reverse-Time_Migration","225732776_Milepost_GCC_Machine_Learning_Enabled_Self-tuning_Compiler","261075325_BarrierPoint_Sampled_simulation_of_multi-threaded_applications"]}