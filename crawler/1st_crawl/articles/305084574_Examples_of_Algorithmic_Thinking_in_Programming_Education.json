{"id":"305084574_Examples_of_Algorithmic_Thinking_in_Programming_Education","abstract":"Algorithmic thinking and problem solving strategies are essential principles of computer science. Programming education should reflect this and emphasize different aspects of these principles rather than syntactical details of a concrete programming language. In this paper, we identify three major aspects of algorithmic thinking as objectives of our curricula: the notion of a formal language to express algorithms, abstraction and automation to transfer proven strategies to new instances, and the limits of practical computability. The primary contribution of this paper are three examples that illustrate how general aspects of algorithmic thinking can be incorporated into programming classes. The examples are taken from our teaching materials for K-12 and university non-majors and have been extensively tested in the field.","authors":["Juraj Hromkovic","Tobias Kohn","Dennis Komm","Giovanni Serafini"],"meta":["July 2016","DOI:10.15388/ioi.2016.08"],"references":["316800698_Einfuhrung_in_die_Kryptologie","314947900_Einfuhrung_in_die_Programmierung_mit_LOGO","308499256_Combining_the_Power_of_Python_with_the_Simplicity_of_Logo_for_a_Sustainable_Computer_Science_Education","304405348_On_computable_numbers_with_an_application_to_the_Entscheidungsproblem","262403769_Computer_Science_Unplugged_and_Related_Projects_in_Math_and_Computer_Science_Popularization","220692529_Abenteuer_Informatik_-_IT_zum_Anfassen_von_Routenplaner_bis_Online-Banking"]}