{"id":"307552951_Past-Freeze_reachability_analysis_Reaching_further_with_DAG-directed_exhaustive_state-space_analysis","abstract":"Model-checking enables the automated formal verification of software systems through the explicit enumeration of all the reachable states. While this technique has been successfully applied to industrial systems, it suffers from the state-space explosion problem because of the exponential growth in the number of states with respect to the number of interacting components. In this paper, we present a new reachability analysis algorithm, named Past-Free[ze], that reduces the state-space explosion problem by freeing parts of the state-space from memory. This algorithm relies on the explicit isolation of the acyclic parts of the system before analysis. The parallel composition of these parts drives the reachability analysis, the core of all model-checkers. During the execution, the past states of the system are freed from memory making room for more future states. To enable counter-example construction, the past states can be stored on external storage. To show the effectiveness of the approach, the algorithm was implemented in the OBP Observation Engine and was evaluated both on a synthetic benchmark and on realistic case studies from automotive and aerospace domains. The benchmark, composed of 50 test cases, shows that in average, 75% of the state-space can be dropped from memory thus enabling the exploration of up to 14 times more states than traditional approaches. Moreover, in some cases, the reachability analysis time can be reduced by up to 25%. In realistic settings, the use of Past-Free[ze] enabled the exploration of a state-space 4.5 times larger on the automotive case study, where almost 50% of the states are freed from memory. Moreover, this approach offers the possibility of analyzing an arbitrary number of interactions between the environment and the system-under-verification; for instance, in the case of the aerospace example, 1000 pilot/system interactions could be analyzed unraveling an 80 GB state-space using only 10 GB of memory. Copyright","authors":["Ciprian Teodorov","Luka Le Roux","Zoé Drey","Philippe Dhaussy"],"meta":["August 2016Software Testing Verification and Reliability 26(7)","DOI:10.1002/stvr.1611","Project: Context-aware Verification"],"references":["282183462_Environment-driven_reachability_for_timed_systems","258385104_Improving_Model_Checking_with_Context_Modelling","234807189_Automatic_Verification_of_Finite_State_Concurrent_Systems_Using_Temporal_Logic_Specifications","225510930_Combining_partial_order_reductions_with_on-the-fly_model-checking","225178220_Bounded_Model_Checking_Using_Satisfiability_Solving","222579044_Specification_and_Generation_of_Environment_for_Model_Checking_of_Software_Components","221628021_Partition-Based_Decision_Heuristics_for_Image_Computation_Using_SAT_and_BDDs","221512764_Folk_Theorems_on_the_Correspondence_between_State-Based_and_Event-Based_Systems","221105612_Automatic_Generation_of_Model_Checking_Scripts_Based_on_Environment_Modeling","220883777_Cluster-based_IO-efficient_LTL_model_checking","43002648_Evaluating_Context_Descriptions_and_Property_Definition_Patterns_for_Software_Formal_Validation","41223129_Automatic_Generation_of_Model_Checking_Scripts_based_on_Environment_Modeling","4117707_Guiding_CNF-SAT_search_via_efficient_constraint_partitioning","2627359_Model_Checking_TLA_Specifications","2593589_Property_Specification_Patterns_for_Finite-State_Verification","321522271_Computational_Science_and_Its_Applications_-_ICCSA_2017_17th_International_Conference_Trieste_Italy_July_3-6_2017_Proceedings_Part_V","313218002_Timed_automata_Semantics_algorithms_and_tools","298632064_IEEEACM_International_Conference_on_Computer-Aided_Design_Digest_of_Technical_Papers_ICCAD_Foreword","291095325_Proceedings_-_International_Conference_on_Software_Engineering_Preface","285309211_Proceedings_of_15th_International_Conference_on_Computer-Aided_Verification_CAV'03","278797819_Model-Based_Analysis","268366041_Context_Aware_Model_Exploration_with_OBP_tool_to_Improve_Model-Checking","266022852_Context-Aware_Verification_of_a_Cruise-Control_System","262913390_Context-Aware_Verification_of_a_Landing_Gear_System","261179979_Introduction_to_Algorithms_Third_Edition","245330749_The_tool_TINA_-_construction_of_abstract_state_spaces_for_Petri_nets_and_time_Petri_nets","242503195_Verification_Model_Checking_and_Abstract_Interpretation_10th_International_Conference_VMCAI_2009_Savannah_GA_USA_January_18-20_2009_Proceedings","242502978_Foundations_of_Software_Science_and_Computational_Structures_11th_International_Conference_FOSSACS_2008_Held_as_Part_of_the_Joint_European_Conferences_on_Theory_and_Practice_of_Software_ETAPS_2008_Bud","239577954_Compiler_Construction_17th_International_Conference_CC_2008_Held_as_Part_of_the_Joint_European_Conferences_on_Theory_and_Practice_of_Software_ETAPS_2008_Budapest_Hungary_March_29_-_April_6_2008_Procee","226034976_Exploiting_symmetry_in_temporal_logic_model_checking","225544261_Specification_and_verification_of_concurrent_systems_in_CESAR","224146609_Environment_generation_for_validating_event-driven_software_using_model_checking","222470936_Symbolic_Model_Checking_1020_States_and_Beyond","221403054_Semi-external_LTL_Model_Checking","3187858_The_Model_Checker_Spin","2880029_The_Ulg_partial-order_package_for_SPIN"]}