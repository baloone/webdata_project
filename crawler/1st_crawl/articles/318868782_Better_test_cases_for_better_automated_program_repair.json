{"id":"318868782_Better_test_cases_for_better_automated_program_repair","abstract":"Automated generate-and-validate program repair techniques (G&V techniques) suffer from generating many overfitted patches due to in-capabilities of test cases. Such overfitted patches are incor- rect patches, which only make all given test cases pass, but fail to fix the bugs. In this work, we propose an overfitted patch detec- tion framework named Opad (Overfitted PAtch Detection). Opad helps improve G&V techniques by enhancing existing test cases to filter out overfitted patches. To enhance test cases, Opad uses fuzz testing to generate new test cases, and employs two test or- acles (crash and memory-safety) to enhance validity checking of automatically-generated patches. Opad also uses a novel metric (named O-measure) for deciding whether automatically-generated patches overfit. Evaluated on 45 bugs from 7 large systems (the same benchmark used by GenProg and SPR), Opad filters out 75.2% (321/427) over- fitted patches generated by GenProg/AE, Kali, and SPR. In addition, Opad guides SPR to generate correct patches for one more bug (the original SPR generates correct patches for 11 bugs). Our analysis also shows that up to 40% of such automatically-generated test cases may further improve G&V techniques if empowered with better test oracles (in addition to crash and memory-safety oracles employed by Opad).","authors":["Jinqiu Yang","Alexey Zhikhartsev","Yuefei Liu","Lin Tan"],"meta":["August 2017","DOI:10.1145/3106237.3106274","Conference: the 2017 11th Joint Meeting"],"references":["314152764_Test_Case_Generation_for_Program_Repair_A_Study_of_Feasibility_and_Effectiveness","305772994_Anti-patterns_in_Search-Based_Program_Repair","301428541_The_plastic_surgery_hypothesis","297777476_Nopol_Automatic_Repair_of_Conditional_Statement_Bugs_in_Java_Programs","277664637_Are_Mutants_a_Valid_Substitute_for_Real_Faults_in_Software_Testing","266659083_Extending_a_search-based_test_generator_with_adaptive_dynamic_symbolic_execution","261101009_Do_the_Fix_Ingredients_Already_Exist_An_Empirical_Inquiry_into_the_Redundancy_Assumptions_of_Program_Repair_Approaches","260424732_The_Strength_of_Random_Search_on_Automated_Program_Repair","221560749_EvoSuite_Automatic_test_suite_generation_for_object-oriented_software","221496449_Augmenting_Automatically_Generated_Unit-Test_Suites_with_Regression_Oracle_Checking","220422300_An_Empirical_Study_of_the_Reliability_of_UNIX_Utilities","318375339_Identifying_test-suite-overfitted_patches_through_test_case_generation","304552841_DirectFix_Looking_for_Simple_Program_Repairs","303284530_Automatic_patch_generation_by_learning_correct_code","303099518_An_Analysis_of_the_Search_Spaces_for_Generate_and_Validate_Patch_Generation_Systems","303099279_Angelix_Scalable_Multiline_Program_Patch_Synthesis_via_Symbolic_Analysis","301274054_Automatic_patch_generation_by_learning_correct_code","299909645_Staged_program_repair_with_condition_synthesis","299868538_Is_the_cure_worse_than_the_disease_overfitting_in_automated_program_repair","299868471_Assertions_are_strongly_correlated_with_test_suite_effectiveness","279835496_An_Analysis_of_Patch_Plausibility_and_Correctness_for_Generate-And-Validate_Patch_Generation_Systems","278646722_CUTE","266656203_Coverage_is_not_strongly_correlated_with_test_suite_effectiveness","261276659_Leveraging_program_equivalence_for_adaptive_program_repair_Models_and_first_results","261230128_Automatic_patch_generation_learned_from_human-written_patches","254041670_A_systematic_study_of_automated_program_repair_Fixing_55_out_of_105_bugs_for_8_each","221321488_Randoop_Feedback-directed_random_testing_for_Java","220851853_KLEE_Unassisted_and_Automatic_Generation_of_High-Coverage_Tests_for_Complex_Systems_Programs","220281481_JCrasher_An_automatic_robustness_tester_for_Java","4251303_Feedback-Directed_Random_Test_Generation"]}