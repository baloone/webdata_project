{"id":"267441102_What_is_Computation_Actor_Model_versus_Turing's_Model","abstract":"Concurrency is of crucial importance to the science and engineering of computation in part because of the rise of the Internet and many-core architectures. However, concurrency extends computation beyond the conceptual framework of Church, Gandy, Gödel, Herbrand, Kleene, Post, Rosser, Sieg, Turing, etc. because there are effective computations that cannot be performed by Turing machines. In the Actor model, computation is conceived as distributed in space where computational devices communicate asynchronously and the entire computation is not in any well-defined state. (An Actor can have stable information about about what it was like when it receives a message.) Turing’s Model is a special case of the Actor model. A non-deterministic Turing machine has bounded non-determinism (i.e. there is a bound on the size of integer that can be computed starting on a blank tape by an always-halting machine). Proving that a server will actually provide service to its clients requires unbounded non-determinism. In the semantics of bounded nondeterminism, a request to a shared resource might never receive service because a nondeterministic transition is always made to service another request instead. That’s why the semantics of CSP were reversed from bounded non-determinism to unbounded non-determinism. However, bounded non-determinism was but a symptom of deeper underlying issues with communicating sequential processes as a foundation for concurrency. The Computational Representation Theorem characterizes the semantics of Actor systems without making use of sequential processes.","authors":["Carl Hewitt"],"meta":["December 2012","DOI:10.1142/9789814374309_0009"],"references":[]}