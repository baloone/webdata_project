{"id":"312244145_The_next_700_syntactical_models_of_type_theory","abstract":"A family of syntactic models for the calculus of construction with universes (CCÏ) is described, all of them preserving conversion of the calculus definitionally, and thus giving rise directly to a program transformation of CCÏ into itself.\nThose models are based on the remark that negative type constructors (e.g. dependent product, coinductive types or universes) are underspecified in type theoryâwhich leaves some freedom on extra intensional specifications.\nThe model construction can be seen as a compilation phase from a complex type theory into a simpler type theory.\nSuch models can be used to derive (the negative part of) independence results with respect to CCÏ, such as functional extensionality, propositional extensionality, univalence or the fact that bisimulation on a coinductive type may not coincide with equality.\nThey can also be used to add new principles to the theory, which we illustrate by defining a version of CCÏ with ad-hoc polymorphism that shows in particular that parametricity is not an implicit requirement of type theory.\nThe correctness of some of the models/program transformations have been checked in the Coq proof assistant and have been instrumented as a Coq plugin.","authors":["Simon Boulier","Pierre-Marie Pédrot","Nicolas Tabareau"],"meta":["January 2017","DOI:10.1145/3018610.3018620","Conference: the 6th ACM SIGPLAN Conference"],"references":["261055294_Extending_Type_Theory_with_Forcing","234802263_Parametricity_and_Dependent_Types","233398973_The_Simplicial_Model_of_Univalent_Foundations","225243273_Sets_in_types_types_in_sets","221570282_Realizability_and_Parametricity_in_Pure_Type_Systems","220369289_Type_Theory_Should_Eat_Itself","3811865_Extensional_equality_in_intensional_type_theory","2856909_Internal_Type_Theory","2839840_A_General_Formulation_of_Simultaneous_Inductive-Recursive_Definitions_in_Type_Theory","349905301_The_simplicial_model_of_Univalent_Foundations_after_Voevodsky","346427507_Syntax_and_Semantics_of_Dependent_Types","319394715_The_Coq_proof_assistant_reference_manual_version_74","310820954_The_Definitional_Side_of_the_Forcing","303008830_Type_Theory_in_Type_Theory_using_Quotient_Inductive_Types","292002560_Type_theory_in_type_theory_using_quotient_inductive_types","281011975_The_Coq_Proof_Assistant_Reference_Manual_Version_72","261055324_A_Computational_Interpretation_of_Parametricity","245785078_Continuation_semantics_or_expressing_im-plication_by_negation","221241437_Parametricity_and_dependent_types","220695495_Extensional_Constructs_in_Intensional_Type_Theory","220148389_Comprehension_Categories_and_the_Semantics_of_Type_Dependency","44922045_Pure_Type_System_conversion_is_always_typable","38958567_Extraction_de_programmes_dans_le_Calcul_des_Constructions","3501215_ECC_an_extended_calculus_of_constructions"]}