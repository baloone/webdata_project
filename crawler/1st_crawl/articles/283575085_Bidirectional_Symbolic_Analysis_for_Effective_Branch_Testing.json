{"id":"283575085_Bidirectional_Symbolic_Analysis_for_Effective_Branch_Testing","abstract":"Structural coverage metrics, and in particular branch coverage, are popular approaches to measure the thoroughness of test suites. Unfortunately, the presence of elements that are not executable in the program under test and the difficulty of generating test cases for rare conditions impact on the effectiveness of the coverage obtained with current approaches. In this paper, we propose a new approach that combines symbolic execution and symbolic reachability analysis to improve the effectiveness of branch testing. Our approach embraces the ideal definition of branch coverage as the percentage of executable branches traversed with the test suite, and proposes a new bidirectional symbolic analysis for both testing rare execution conditions and eliminating infeasible branches from the set of test objectives. The approach is centered on a model of the analyzed execution space. The model identifies the frontier between symbolic execution and symbolic reachability analysis, to guide the alternation and the progress of bidirectional analysis towards the coverage targets. The experimental results presented in the paper indicate that the proposed approach can both find test inputs that exercise rare execution conditions that are not identified with state-of-the-art approaches and eliminate many infeasible branches from the coverage measurement. It can thus produce a modified branch coverage metric that indicates the amount of feasible branches covered during testing, and helps team leaders and developers in estimating the amount of not-yet-covered feasible branches. The approach proposed in this paper suffers less than the other approaches from particular cases that may trap the analysis in unbounded loops.","authors":["Mauro Baluda","Giovanni Denaro","Mauro Pezz√®"],"meta":["January 2015IEEE Transactions on Software Engineering 42(5):1-1","DOI:10.1109/TSE.2015.2490067"],"references":["308846592_Dynamic_Data_Flow_Testing_of_Object_Oriented_Systems","299907212_Symbolic_execution_of_programs_with_heap_inputs","271531907_Enhancing_Reuse_of_Constraint_Solutions_to_Improve_Symbolic_Execution","262352357_Green_Reducing_reusing_and_recycling_constraints_in_program_analysis","262286609_Enhancing_symbolic_execution_with_built-in_term_rewriting_and_constrained_lazy_initialization","261449670_Improving_search-based_test_suite_generation_with_dynamic_symbolic_execution","261449201_Search-based_data-flow_test_generation","261260747_Make_test-zesti_A_symbolic_execution_solution_for_improving_regression_testing","257665177_Software_testing_with_code-based_test_generators_Data_and_lessons_learned_from_a_case_study_with_an_industrial_software_component","254462822_Search-based_system_testing_High_coverage_no_false_alarms","239949433_Orthogonal_Exploration_of_the_Search_Space_in_Evolutionary_Test_Case_Generation","237657574_Fuzzing_with_Code_Fragments","233906336_Evolutionary_functional_black-box_testing_in_an_industrial_setting","232615538_Whole_Test_Suite_Generation","228886250_Structural_coverage_of_feasible_code","228851975_Stateful_testing_Finding_more_errors_in_code_and_contracts","228851505_The_species_per_path_approach_to_SearchBased_test_data_generation","319395113_DO-178B_Software_Considerations_in_Airborne_Systems_and_Equipment_Certification","313432643_Parallel_symbolic_execution_for_automated_real-world_software_testing","313306042_Time-aware_test_suite_prioritization","313134763_Timeaware_test_suite_prioritization_in_Proceedings_of_the_2006","312867253_Automated_whitebox_fuzz_testing","311471839_Steering_symbolic_execution_to_less_traveled_paths","302436239_One-test-at-a-time_heuristic_search_for_interaction_test_suites","300204812_Reusing_constraint_proofs_in_program_analysis","290755688_Software_Model_Checking_via_IC3","289400619_Mutation-driven_generation_of_unit_tests_and_oracles","286746557_Automated_Coverage-Driven_Test_Data_Generation_Using_Dynamic_Symbolic_Execution","278646722_CUTE","271452670_Compositional_may-must_program_analysis","271368423_Predictive_testing","269199773_QuickCheck","269033954_Check_'n'_crash","266656203_Coverage_is_not_strongly_correlated_with_test_suite_effectiveness","262327261_TRACER_a_symbolic_execution_tool_for_verification","262288155_DART_Directed_Automated_Random_Testing","262254937_Test_input_generation_using_dynamic_programming","262248553_KATCH_high-coverage_testing_of_software_patches","262239904_Boosting_concolic_testing_via_interpolation","262238490_Multi-solver_Support_in_Symbolic_Execution","262209955_Accurate_Invariant_Checking_for_Programs_Manipulating_Lists_and_Arrays_with_Infinite_Data","262203892_Steering_Symbolic_Execution_to_Less_Traveled_Paths","256261599_Compositional_Invariant_Checking_for_Overlaid_and_Nested_Linked_Lists","248609253_Pex_-_white_box_test_generation_for","242608871_Abstraction-guided_Test_Generation_A_Case_Study","236896048_The_Software_Model_Checker_BLAST_Applications_to_Software_Engineering","235248128_Combining_model-based_and_combinatorial_testing_for_effective_test_case_generation","234811765_Flow_Analysis_of_Computer_Programs","234762383_Test_input_generation_with_Java_PathFinder","229033648_Optimizing_Constraint_Solving_to_Better_Support_Symbolic_Execution","228460140_Automatically_Finding_Performance_Problems_With_Feedback-Directed_Learning_Software_Testing","225604756_Verifying_Heap-Manipulating_Programs_in_an_SMT_Framework","225499454_Inferring_Loop_Invariants_Using_Postconditions","224645792_Improving_Evolutionary_Real-Time_Testing_by_Seeding_Structural_Test_Data","225354614_A_survey_of_new_trends_in_symbolic_execution_for_software_testing_and_analysis"]}