{"id":"309371360_Building_Efficient_and_Highly_Run-time_Adaptable_Virtual_Machines","abstract":"Programming language virtual machines (VMs) realize language semantics, enforce security properties, and execute applications efficiently. Fully Reflective Execution Environments (EEs) are VMs that additionally expose their whole structure and behavior to applications. This enables developers to observe and adapt VMs at run time. However, there is a belief that reflective EEs are not viable for practical usages because such flexibility would incur a high performance overhead. To refute this belief, we built a reflective EE on top of a highly optimizing dynamic compiler. We introduced a new optimization model that, based on the conjecture that variability of low-level (EE-level) reflective behavior is low in many scenarios, mitigates the most significant sources of the performance overheads related to the reflective capabilities in the EE. Our experiments indicate that reflective EEs can reach peak performance in the order of standard VMs. Concretely, that a) if reflective mechanisms are not used the execution overhead is negligible compared to standard VMs, b) VM operations can be redefined at language-level without incurring in significant overheads, c) for several software adaptation tasks, applying the reflection at the VM level is not only lightweight in terms of engineering effort, but also competitive in terms of performance in comparison to other ad-hoc solutions.","authors":["Guido Chari","Diego Garbervetsky","Stefan Marr"],"meta":["November 2016ACM SIGPLAN Notices","DOI:10.1145/2989225.2989234","Conference: 2th Symposium on Dynamic Languages","Project: Reflective Execution Environments"],"references":["283470854_Tracing_vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_for_Self-Optimizing_Interpreters","282511676_Snippets_Taking_the_High_Road_to_a_Low_Level","282151815_Tracing_vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_for_Self-Optimizing_Interpreters","281298896_Towards_Fully_Reflective_Environments","275654155_Zero-Overhead_Metaprogramming_Reflection_and_Metaobject_Protocols_Fast_and_without_Compromises","330265230_The_Art_of_the_Metaobject_Protocol","311407775_Tracing_Vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_For_Self-Optimizing_Interpreters","288492152_Pinocchio","268979023_Smalltalk-80_The_Language_and_Its_Implementation","266661845_Compiling_a_Reflective_Language_using_MetaOCaml"]}