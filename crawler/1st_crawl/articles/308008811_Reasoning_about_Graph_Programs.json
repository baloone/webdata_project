{"id":"308008811_Reasoning_about_Graph_Programs","abstract":"GP 2 is a non-deterministic programming language for computing by graph transformation. One of the design goals for GP 2 is syntactic and semantic simplicity, to facilitate formal reasoning about programs. In this paper, we demonstrate with four case studies how programmers can prove termination and partial correctness of their solutions. We argue that GP 2's graph transformation rules, together with induction on the length of program executions, provide a convenient framework for program verification.","authors":["Detlef Plump"],"meta":["September 2016","DOI:10.4204/EPTCS.225.6","Project: The Graph Programming Language GP 2"],"references":["304370781_Compiling_Graph_Programs_to_C","274902681_A_Reference_Interpreter_for_the_Graph_Programming_Language_GP_2","262604446_Verifying_Monadic_Second-Order_Properties_of_Graph_Programs","229165457_AGG_20_--_New_Features_for_Specifying_and_Analyzing_Algebraic_Graph_Transformations","228451916_Hoare-Style_Verification_of_Graph_Programs","279258170_Visual_Modelling_of_Complex_Systems_Towards_an_Abstract_Machine_for_PORGY","247442902_Introduction_To_Algorithms","239641908_Topology_of_Series-Parallel_Networks","235950089_Digraphs_Theory_Algorithms_and_Applications_Second_Edition","225521624_GrGenNET"]}