{"id":"246839477_Mixing_Finite_Success_and_Finite_Failure_in_an_Automated_Prover","abstract":"The operational semantics and typing of modern program- ming and specification languages are often defined using relations and proof systems. In simple settings, logic programming can be used to pro- vide rather direct and natural interpreters for such operational semantics. More complex features of specifications such as names and their bind- ings, proof rules with negative premise, and the exhaustive enumeration of state spaces, all pose significant challenges to conventional logic pro- gramming systems. In this paper, we describe a simple architecture for the implementation of deduction systems that allows a specification to interleave both with finite success and finite failure. The implementation techniques for this prover are largely common ones from logic program- ming, i.e., logic variables, (higher-order pattern) unification, backtrack- ing (using stream-based computation), and abstract syntax based on simply typed -terms. We present a particular instance of this prover architecture and its prototype implementation, based on a dual interpre- tation of (finite) success and failure in proof search. We discuss impor- tant dierences between this prover and traditional logic programming and present an implementation of bisimulation checking for -calculus, which cannot be so directly and declaratively done in traditional logic programming languages.","authors":["Alwen Tiu","Gopalan Nadathur","Dale Miller"],"meta":["January 2005"],"references":["222671193_A_Proof_Search_Specification_of_the_p-Calculus","299057322_Model_checking_for_pi-calculus_using_proof_search","243615654_A_fixpoint_theorem_in_linear_logic","243301753_Model_Checking_for_p-Calculus_Using_Proof_Search","242914081_A_theory_of_bisimulation_for_the_p-calculus","240154309_On_the_structure_of_inductive_reasoning_Circular_and_tree-shaped_proofs_in_the_lu-calculus","239557390_A_unification_algorithm_for_typed_-calculus","238719836_The_Collected_Papers_of_Gerard_Gentzen","225517393_Modal_logics_for_mobile_processes","222978514_Modal_logic_for_mobile_processes"]}