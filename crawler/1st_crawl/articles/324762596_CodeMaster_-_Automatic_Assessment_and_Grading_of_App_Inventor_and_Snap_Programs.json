{"id":"324762596_CodeMaster_-_Automatic_Assessment_and_Grading_of_App_Inventor_and_Snap_Programs","abstract":"The development of computational thinking is a major topic in K-12 education. Many of these experiences focus on teaching programming using block-based languages. As part of these activities, it is important for students to receive feedback on their assignments. Yet, in practice it may be difficult to provide personalized, objective and consistent feedback. In this context, automatic assessment and grading has become important. While there exist diverse graders for text-based languages, support for block-based programming languages is still scarce. This article presents CodeMaster, a free web application that in a problem-based learning context allows to automatically assess and grade projects programmed with App Inventor and Snap!. It uses a rubric measuring computational thinking based on a static code analysis. Students can use the tool to get feedback to encourage them to improve their programming competencies. It can also be used by teachers for assessing whole classes easing their workload.","authors":["Christiane Gresse von Wangenheim","Jean Carlo Rossa Hauck","Matheus Faustino DEMETRIO","Rafael PELLE"],"meta":["April 2018Informatics in Education 17(1):117-150","DOI:10.15388/infedu.2018.08","Project: K-12 Computing Education - Computação na Escola"],"references":["354582893_THE_ASSESSMENT_OF_MOBILE_COMPUTATIONAL_THINKING","332592567_Approaches_to_Assess_Computational_Thinking_Competences_Based_on_Code_Analysis_in_K-12_Education_A_Systematic_Mapping_Study","316613934_On_the_Automatic_Assessment_of_Computational_Thinking_Skills_A_Comparison_with_Human_Experts","308605512_Quizly_A_live_coding_assessment_platform_for_App_Inventor","306108077_THE_USEFULNESS_OF_RUBRICS_IN_COMPUTER_SCIENCE","305081810_Developing_a_Rubric_for_a_Creative_CS_Principles_Lab","305081685_Towards_a_Systematic_Review_of_Automated_Feedback_Generation_for_Programming_Exercises","296148316_Comparing_Computational_Thinking_Development_Assessment_Scores_with_Software_Complexity_Metrics","284181364_Dr_Scratch_a_Web_Tool_to_Automatically_Evaluate_Scratch_Projects","283118935_Automatic_Detection_of_Bad_Programming_Habits_in_Scratch_A_Preliminary_Study","281714025_Dr_Scratch_Automatic_Analysis_of_Scratch_Projects_to_Assess_and_Foster_Computational_Thinking","276852167_Designing_for_deeper_learning_in_a_blended_computer_science_course_for_middle_school_students","274309848_Computational_Thinking","270675622_Feedback_for_Programming_Assignments_Using_Software-Metrics_and_Reference_Code","265641341_Early_Validation_of_Computational_Thinking_Pattern_Analysis","265641212_Real_Time_Assessment_of_Computational_Thinking","258134754_Computational_Thinking_in_K-12_A_Review_of_the_State_of_the_Field","257682607_Validation_study_of_a_method_for_assessing_complex_ill-structured_problem_solving_by_using_causal_representations","257391334_Software_Verification_and_Graph_Similarity_for_Automated_Evaluation_of_Students'_Assignments","256005803_Computer_Programming_Goes_Back_to_School","254006849_The_fairy_performance_assessment_Measuring_computational_thinking_in_middle_school","234695222_Problem-Based_Learning_Where_Did_it_Come_from_What_Does_it_Do_and_Where_is_it_Going","319284330_Work_in_Progress_Identifying_and_Analyzing_Original_Projects_in_an_Open-Ended_Blocks_Programming_Environment","314838098_Grading_programming_assignments_using_rubrics","314637334_Autograding_and_Feedback_for_Snap_A_Visual_Programming_Language_Abstract_Only","313196550_Assessment_and_classroom_learning_Assessment_in_education_Principles","312984568_Perceived_usefulness_perceived_ease_and_user_acceptance_of_information_technology","311491293_Testing_Strategies_for_the_Automated_Grading_of_Student_Programs","311489141_ITCH_Individual_Testing_of_Computer_Homework_for_Scratch_Assignments","309916565_Ninja_code_village_for_scratch_Function_samplesfunction_analyser_and_automatic_assessment_of_computational_thinking_concepts","309407647_A_Method_for_Measuring_of_Block-based_Programming_Code_Quality","305688123_Teaching_for_Quality_Learning_at_University","299374346_Creating_Instructional_Rubrics_for_Inclusive_Classrooms","280559547_To_Block_or_not_to_Block_That_is_the_Question_Students'_Perceptions_of_Blocks-based_Programming","275156960_Guidelines_for_conducting_systematic_mapping_studies_in_software_engineering_An_update","266562898_Review_on_teaching_and_learning_of_computational_thinking_through_programming_What_is_next_for_K-12","262404862_Modeling_the_learning_progressions_of_computational_thinking_of_primary_grade_students","262389338_Assessment_of_computer_science_learning_in_a_scratch-based_outreach_program","262273672_Automatic_Grading_of_Computer_Programs_A_Machine_Learning_Approach","258967180_Goalquestionmetric_paradigm","258382647_Teaching_computer_science_through_problems_not_solutions","258182775_The_Power_of_Feedback","257926245_Bringing_Problem-Based_Learning_to_Higher_Education_Theory_and_Practice","252197785_Problem-based_Learning_in_Analytical_Science_Undergraduate_Teaching","249900581_Assessment_Literacy_for_Teachers_Faddish_or_Fundamental","249613404_Weighted_primary_trait_analysis_for_computer_program_evaluation","245507946_Assessing_Student_Performance_Exploring_the_Purpose_and_Limits_of_Testing","243668632_Effective_Tutoring_Techniques_A_Comparison_of_Human_Tutors_and_Intelligent_Tutoring_Systems","238680022_Understanding_Rubrics","234728924_A_Review_of_Problem-based_Learning","228593520_SUS_A_quick_and_dirty_usability_scale","233243503_Assessment_literacy_development_Identifying_gaps_in_teacher_Candidates'_learning","228368593_Determining_What_Individual_SUS_Scores_Mean_Adding_an_Adjective_Rating_Scale","228328446_A_Survey_of_Automated_Assessment_Approaches_for_Programming_Assignments","227493992_Design-based_science_DBS_and_student_learning"]}