{"id":"325142264_Mechanized_Verification_of_Fine-Grained_Concurrent_Programs","abstract":"Efficient concurrent programs and data structures rarely employ coarse-grained synchronization mechanisms (i.e., locks); instead, they implement custom synchronization patterns via fine-grained primitives, such as compare-and-swap. Due to sophisticated interference scenarios between threads, reasoning about such programs is challenging and error-prone, and can benefit from mechanization. In this paper, we present the first completely formalized framework for mechanized verification of full functional correctness of fine-grained concurrent programs. Our tool is based on the recently proposed program logic FCSL. It is implemented as an embedded DSL in the dependently-typed language of the Coq proof assistant, and is powerful enough to reason about programming features such as higher-order functions and local thread spawning. By incorporating a uniform concurrency model, based on state-transition systems and partial commutative monoids, FCSL makes it possible to build proofs about concurrent libraries in a thread-local, compositional way, thus facilitating scalability and reuse: libraries are verified just once, and their specifications are used ubiquitously in client-side reasoning. We illustrate the proof layout in FCSL by example, outline its infrastructure, and report on our experience of using FCSL to verify a number of concurrent algorithms and data structures.","authors":["Ilya Sergey","Aleksandar Nanevski","A Banerjee"],"meta":["June 2015","Conference: 36th ACM SIGPLAN Conference on Programming Language Design and ImplementationVolume: 50"],"references":["265296589_Verifying_Concurrent_Programs_by_Controlling_Alias_Interference","262248265_High-Level_Separation_Logic_for_Low-Level_Code","255564350_Back_and_Forth_Prophecy_Variables_for_Static_Verification_of_Concurrent_Programs","234800126_Tentative_Steps_Toward_a_Development_Method_for_Interfering_Programs","227091901_The_Role_of_Auxiliary_Variables_in_the_Formal_Development_of_Concurrent_Programs","221257599_Flat_combining_and_the_synchronization-parallelism_tradeoff","221241198_Ynot_Dependent_types_for_imperative_programs","221241180_How_to_make_Ad_Hoc_proof_automation_less_Ad_Hoc","221056939_Verification_of_Concurrent_Programs_with_Chalice","220997513_Permission_accounting_in_separation_logic","220997082_Structuring_the_Verification_of_Heap-Manipulating_Programs","220422909_Verifying_Properties_of_Parallel_Programs_An_Axiomatic_Approach","213884333_Polymorphism_and_Separation_in_Hoare_Type_Theory","200030230_Linearizability_A_Correctness_Condition_for_Concurrent_Objects","48412075_A_Small_Scale_Reflection_Extension_for_the_Coq_system","29634245_Formal_certification_of_a_compiler_back-end_or_Programming_a_compiler_with_a_proof_assistant","282926793_Iris_Monoids_and_Invariants_as_an_Orthogonal_Basis_for_Concurrent_Reasoning","267672965_Program_logics_for_certified_compilers","262411350_Subjective_Auxiliary_State_for_Coarse-Grained_Concurrency","262290050_Modular_Verification_of_Linearizability_with_Non-Fixed_Linearization_Points","262287363_Views_Compositional_Reasoning_for_Concurrent_Programs","262203648_Unifying_Refinement_and_Hoare-Style_Reasoning_in_a_Logic_for_Higher-Order_Concurrency","257282396_Interactive_theorem_proving_and_program_development_Coq'Art_The_Calculus_of_inductive_constructions","242476929_Two_constructive_realizations_of_the_block_concept_and_their_equivalence","242071403_The_Ramifications_of_Sharing_in_Data_Structures","239579778_Systems_programming_coping_with_parallelism","223340839_A_semantics_of_concurrent_separation_logic","220997232_Expressive_Modular_Fine-Grained_Concurrency_Specification","220997172_Local_Rely-Guarantee_Reasoning","220752273_Mostly-Automated_Verification_of_Low-Level_Programs_in_Computational_Separation_Logic","220427132_Certified_Software","213877666_Certified_Programming_with_Dependent_Types","200031684_Guarded_Commands_Nondeterminacy_and_Formal_Derivation_of_Programs","3965916_Separation_logic_A_logic_for_shared_mutable_data_structures","2888551_Resources_Concurrency_and_Local_Reasoning"]}