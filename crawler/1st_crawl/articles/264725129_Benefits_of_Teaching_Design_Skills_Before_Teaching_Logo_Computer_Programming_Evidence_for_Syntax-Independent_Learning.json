{"id":"264725129_Benefits_of_Teaching_Design_Skills_Before_Teaching_Logo_Computer_Programming_Evidence_for_Syntax-Independent_Learning","abstract":"We compared two groups of twenty computer-naive college students as they received instruction and practice in writing Logo programs. The design group received pretraining in general design principles such as modularity (breaking a procedure into parts) and reusability (using the same subprocedure more than once) presented in English whereas the no-design group did not. On programming assignments during Logo learning, the design group generated more revision cycles, more test runs, more syntax errors, and more input lines than the no-design group; and the design group wrote final programs that were shorter, more modular, more efficient, and more flexible than the no-design group. However, the groups generally did not differ on cognitive tests such spatial cognition, instruction comprehension, and planning. These results are consistent with Dyck and Mayer's syntax-independent access theory-planning skills for programming can be learned independently of the syntax of the programming language [1].","authors":["Anne Fay","Richard Mayer"],"meta":["October 1994Journal of Educational Computing Research 11(3):187-210","DOI:10.2190/5MN5-P7LW-JRB4-W9T5"],"references":["275625864_Assessing_Children's_Logo_Debugging_Skills_With_A_Formal_Model","258932197_The_Role_of_Social_Interaction_in_the_Development_of_Higher-Order_Thinking_in_Logo_Environments","238678736_The_Cognitive_Consequences_of_Programming_Instruction_in_Classrooms","232539181_Effects_of_Computer_Programming_on_Young_Children's_Cognition","222449750_On_the_cognitive_effects_of_computer_programming","200772570_Reciprocal_teaching_of_comprehension-fostering_and_monitoring_activities","321601657_Computer-Based_Learning_Environments_and_Problem_Solving","300180474_Cognitive_Effects_of_Learning_to_Program_in_Logo_A_One-Year_Study_With_Sixth_Graders","290109443_Teaching_for_Transfer_of_Problem-Solving_Skills_to_Computer_Programming","274670472_Transfer_of_Cognitive_Skills_from_Programming_When_and_How","271729852_Pascal_and_High_School_Students_A_Study_of_Errors","250144651_Programming_Objects_to_Think_With_Logo_and_the_Teaching_and_Learning_of_Problem_Solving","247317227_Learning_In_Complex_Domains_A_Cognitive_Analysis_of_Computer_Programming","242587347_From_Problems_to_Programs_Via_Plans_The_Content_and_Structure_of_Knowledge_for_Introductory_LISP_Programming","237956587_Knowledge-Based_Instruction_Teaching_Problem_Solving_In_a_Logo_Learning_Environment","232566651_Children's_naive_conceptions_and_confusions_about_Logo_graphics_commands","232551168_Human_learning_Century_psychology_series","232542611_A_Chain_of_Cognitive_Changes_With_Learning_to_Program_in_Logo","232507248_Using_Conceptual_Models_to_Teach_BASIC_Computer_Programming","232456841_Teaching_for_Transfer_of_Computer_Program_Comprehension_Skill","220426367_Learning_to_Program_and_Learning_to_Think_What's_the_Connection","209409803_Rocky_Roads_to_Transfer_Rethinking_Mechanism_of_a_Neglected_Phenomenon","32231255_Language-Independent_Conceptual_Bugs_in_Novice_Programming"]}