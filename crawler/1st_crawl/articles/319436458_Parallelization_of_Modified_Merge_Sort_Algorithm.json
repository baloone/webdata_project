{"id":"319436458_Parallelization_of_Modified_Merge_Sort_Algorithm","abstract":"Modern architectures make possible development in new algorithms for large data sets and distributed computing. The newly proposed versions can benefit both from faster computing on the multi core architectures, and intelligent programming techniques that use efficient procedures available in the latest programming studios. Frequently used algorithms to sort arrays of data in NoSQL databases is merge sort, where as NoSQL we understand any database without typical SQL programming interpreter. The author describes how to use the parallelization of the sorting processes for the modified method of sorting by merging for large data sets. The subject of this research is the claim that the parallelization of the sorting method is faster and beneficial for multi-core systems. Presented results show how the number of processors influences the sorting performance. The results are presented in theoretical assumptions and confirmed in practical benchmark tests. The method is compared to other sorting methods like quick sort, heap sort, and merge sort to show potential efficiency.","authors":["Zbigniew Marsza≈Çek"],"meta":["September 2017Symmetry 9(9):176","DOI:10.3390/sym9090176"],"references":["316078182_Self-Sorting_Based_MAC_Protocol_for_High-Density_Vehicular_Ad_Hoc_Networks","313542986_Contrastive_analysis_of_bubble_merge_sort_proposing_hybrid_approach","312963714_Merge_sort_enhanced_in_place_sorting_algorithm","306067883_Enhanced_Merge_Sort-_A_New_Approach_to_the_Merging_Process","314254651_An_Efficient_ON_Comparison-Free_Sorting_Algorithm","313072230_Preprocessing_Large_Data_Sets_by_the_Use_of_Quick_Sort_Algorithm","312244303_Chronological_BigData_Curation","312077406_Robust_Massively_Parallel_Sorting","308500511_Novel_Recursive_Fast_Sort_Algorithm","306185941_Bidirectional_Conditional_Insertion_Sort_algorithm_An_efficient_progress_on_the_classical_insertion_sort"]}