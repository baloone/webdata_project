{"id":"297617240_Towards_More_Accurate_Severity_Prediction_and_Fixer_Recommendation_of_Software_Bugs","abstract":"Due to the unavoidable bugs appearing in the most of the software systems, bug resolution has become one of the most important activities in software maintenance. For large-scale software programs, developers usually depend on bug reports to fix the given bugs. When a new bug is reported, a triager has to complete two important tasks that include severity identification and fixer assignment. The purpose of severity identification is to decide how quickly the bug report should be addressed while fixer assignment means that the new bug needs to be assigned to an appropriate developer for fixing. However, a large number of bug reports submitted every day increase triagersâ€™ workload, thus leading to the reduction in the accuracy of severity identification and fixer assignment. Therefore it is necessary to develop an automatic approach to perform severity prediction and fixer recommendation instead of manual work. This article proposes a more accurate approach to accomplish the goal. We firstly utilize modified REP algorithm (i.e., REPtopic) and K-Nearest Neighbor (KNN) classification to search the historical bug reports that are similar to a new bug. Next, we extract their features (e.g., assignees and similarity) to develop the severity prediction and fixer recommendation algorithms. Finally, by adopting the proposed algorithms, we achieve severity prediction and semi-automatic fixer recommendation on five popular open source projects, including GNU Compiler Collection (GCC), OpenOffice, Eclipse, NetBeans, and Mozilla. The results demonstrated that our method can improve the performance of severity prediction and fixer recommendation through comparison with the cutting-edge studies.","authors":["Tao Zhang","Jiachi Chen","Geunseok Yang","Byungjeong Lee"],"meta":["March 2016Journal of Systems and Software 117","DOI:10.1016/j.jss.2016.02.034"],"references":["316921877_Where_should_the_bugs_be_fixed_More_accurate_information_retrieval-based_bug_localization_based_on_bug_reports","273393708_Towards_Effective_Bug_Triage_with_Software_Data_Reduction_Techniques","271551495_An_empirical_study_of_bug_report_field_reassignment","266657936_Improving_the_accuracy_of_duplicate_bug_report_detection_using_textual_similarity_measures","226675412_A_Probabilistic_Interpretation_of_Precision_Recall_and_F-Score_with_Implication_for_Evaluation","224343298_Automated_Severity_Assessment_of_Software_Defect_Reports","224198234_Predicting_Re-opened_Bugs_A_Case_Study_on_the_Eclipse_Project","224137662_Predicting_the_severity_of_a_reported_bug","221615003_Optimisation_methods_for_ranking_functions_with_multiple_parameters","221603514_CosTriage_A_Cost-Aware_Triage_Algorithm_for_Bug_Reporting_Systems","221560202_Fuzzy_set_and_cache-based_approach_for_bug_triaging","221555186_Summarizing_software_artifacts_A_case_study_of_bug_reports","221554685_Who_should_fix_this_bug","221345726_Learning_to_Rank_using_Gradient_Descent","220883724_Towards_more_accurate_retrieval_of_duplicate_bug_reports","311532789_Latent_dirichlet_allocation","303131021_AUSUM_Approach_for_unsupervised_bug_report_summarization","283339779_Automated_Bug_Report_Field_Reassignment_and_Refinement_Prediction","283178962_Variable_selection_for_partially_time-varying_coefficient_error-in-variables_models","273068200_Dual_analysis_for_recommending_developers_to_resolve_bugs","271454998_Labeled_LDA","264227177_Towards_Semi-automatic_Bug_Triage_and_Severity_Prediction_Based_on_Topic_Model_and_Multi-Feature_of_Bug_Reports","262353440_DRETOM_Developer_recommendation_based_on_topic_models_for_bug_resolution","262170733_An_Empirical_Study_on_Improving_Severity_Prediction_of_Defect_Reports_Using_Feature_Selection","261524244_Predicting_the_priority_of_a_reported_bug_using_machine_learning_techniques_and_cross_project_validation","261487328_Incorporating_version_histories_in_Information_Retrieval_based_bug_localization","261417008_DRONE_Predicting_Priority_of_Reported_Bugs_by_Multi-factor_Analysis","261276658_Improving_bug_localization_using_structured_information_retrieval","261163821_R2Fix_Automatically_Generating_Bug_Fixes_from_Bug_Reports","261139491_A_Noun-Based_Approach_to_Feature_Location_using_Time-Aware_Term-Weighting","260736846_Accurate_developer_recommendation_for_bug_resolution","260648777_Where_Should_We_Fix_This_Bug_A_Two-Phase_Recommendation_Model","259842609_Bug_Report_Assignee_Recommendation_Using_Activity_Profiles","258576255_Test_on_Hybrid_Connection_for_Steel_Bars_in_Concrete","257650337_A_Hybrid_Bug_Triage_Algorithm_for_Developer_Recommendation","254040901_Developer_Prioritization_in_Bug_Repositories","254040900_WhoseFault_Automatic_developer-to-fault_assignment_through_fault_localization","247408669_The_Effects_of_Violations_of_Assumptions_Underlying_the_T_Test","242591539_Individual_Comparisons_by_Ranking_Methods","239831976_Information_Retrieval_Based_Nearest_Neighbor_Classification_for_Fine-Grained_Bug_Severity_Prediction","221656942_Assigning_Bug_reports_using_a_vocabulary-based_expertise_model_of_developers","221656940_Retrieval_from_software_libraries_for_bug_localization_A_comparative_study_of_generic_and_composite_text_models","221569897_Comparing_Mining_Algorithms_for_Predicting_the_Severity_of_a_Reported_Bug","221560063_Improving_Bug_Triage_with_Bug_Tossing_Graphs","221389601_Automatic_bug_triage_using_text_categorization","221200547_Source_Code_Retrieval_for_Bug_Localization_Using_Latent_Dirichlet_Allocation","220883529_Modeling_bug_report_quality","220773291_DREX_Developer_Recommendation_with_K-Nearest-Neighbor_Search_and_Expertise_Ranking","214640678_What_Is_Twitter_a_Social_Network_or_a_News_Media","3297652_An_Adaptation_of_the_Vector-Space_Model_for_Ontology-Based_Information_Retrieval","1761888_A_correlated_topic_model_of_Science"]}