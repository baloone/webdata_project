{"id":"319390214_Efficient_Low-Redundancy_Codes_for_Correcting_Multiple_Deletions","abstract":"We consider the problem of constructing binary codes to recover from k-bit deletions with efficient encoding/decoding, for a fixed k. The single deletion case is well understood, with the Varshamov-Tenengolts-Levenshtein code from 1965 giving an asymptotically optimal construction with ≈ 2\n<sup xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">n</sup>\n/n codewords of length n, i.e., at most log n bits of redundancy. However, even for the case of two deletions, there was no known explicit construction with redundancy less than n\n<sup xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">Ω(1)</sup>\n. For any fixed k, we construct a binary code with c\n<sub xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">k</sub>\nlog n redundancy that can be decoded from k deletions in O\n<sub xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">k</sub>\n(n log\n<sup xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">4</sup>\nn) time. The coefficient c\n<sub xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">k</sub>\ncan be taken to be O(k\n<sup xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">2</sup>\nlog k), which is only quadratically worse than the optimal, non-constructive bound of O(k). We also indicate how to modify this code to allow for a combination of up to k insertions and deletions. We also note that among linear codes capable of correcting k deletions, the (k + 1)-fold repetition code is essentially the best possible.","authors":["Joshua Brakensiek","Venkatesan Guruswami","Samuel Zbarsky"],"meta":["August 2017IEEE Transactions on Information Theory PP(99):1-1","DOI:10.1109/TIT.2017.2746566"],"references":["265787917_On_Single-Deletion-Correcting_Codes","260541993_A_Multiple_InsertionDeletion_Correcting_Code_for_Run-Length_Limited_Sequences","260541992_On_Helberg's_Generalization_of_the_Levenshtein_Code_for_Multiple_DeletionInsertion_Error_Correction","220779779_Communication_complexity_of_document_exchange","4332290_On_Linear_and_Cyclic_Codes_for_Correcting_Deletions","305322251_Edit_Distance_Sketching_Streaming_and_Document_Exchange","303907180_Streaming_algorithms_for_embedding_and_computing_edit_distance_in_the_low_distance_regime","285458743_Efficient_Deterministic_Single_Round_Document_Exchange_for_Edit_Distance","280329908_Efficient_Low-Redundancy_Codes_for_Correcting_Multiple_Deletions","268820318_Deletion_Codes_in_the_High-Noise_and_High-Rate_Regimes","262408262_Efficient_Communication_Protocols_for_Deciding_Edit_Distance","245681762_Codes_which_correct_single_asymet-ric_errors","221590792_Deterministic_Sampling-A_New_Technique_for_Fast_Pattern_Matching","51986583_Binary_Codes_Capable_of_Correcting_Deletions_Insertions_and_Reversals","4165594_Improved_single-round_protocols_for_remote_file_synchronization","3079942_Asymptotically_Good_Codes_Correcting_Insertions_Deletions_and_Transpositions","2664071_Interactive_Communication_of_Balanced_Distributions_and_of_Correlated_Files"]}