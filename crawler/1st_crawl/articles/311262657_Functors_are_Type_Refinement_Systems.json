{"id":"311262657_Functors_are_Type_Refinement_Systems","abstract":"The standard reading of type theory through the lens of category theory is based on the idea of viewing a type system as a category of well-typed terms. We propose a basic revision of this reading: rather than interpreting type systems as categories, we describe them as functors from a category of typing derivations to a category of underlying terms. Then, turning this around, we explain how in fact any functor gives rise to a generalized type system, with an abstract notion of typing judgment, typing derivations and typing rules. This leads to a purely categorical reformulation of various natural classes of type systems as natural classes of functors.\nThe main purpose of this paper is to describe the general framework (which can also be seen as providing a categorical analysis of refinement types), and to present a few applications. As a larger case study, we revisit Reynolds' paper on ``The Meaning of Types'' (2000), showing how the paper's main results may be reconstructed along these lines.","authors":["Paul-André Melliès","Noam Zeilberger"],"meta":["January 2015ACM SIGPLAN Notices","DOI:10.1145/2676726.2676970","Conference: the 42nd Annual ACM SIGPLAN-SIGACT Symposium"],"references":["220676560_Finally_tagless_partially_evaluated_Tagless_staged_interpreters_for_simpler_typed_languages","220404207_BI-hyperdoctrines_higher-order_separation_logic_and_abstraction","36274568_Fibrations_Logical_Predicates_and_Indeterminates","323707969_The_Mathematics_of_Sentence_Structure","319394879_Refinement_Types_for_Logical_Frameworks","319394252_Introduction_to_Higher-Order_Categorical_Logic","313550915_An_Axiomatic_Basis_of_Computer_Programming","266534427_Theories_of_programming_languages_Reprint_of_the_1998_hardback_ed","265424019_An_Introduction_to_Higher_Order_Categorical_Logic","265354140_Categories_for_the_working_mathematician_2nd_ed","244294150_The_Meaning_of_Types_-_From_Intrinsic_to_Extrinsic_Semantics","243696859_Categorical_Logic_and_Type_Theory","242373711_The_Basic_Concepts_of_Enriched_Category_Theory","241133812_Church_and_Curry_Combining_Intrin-_sic_and_Extrinsic_Typing","238320729_Renement_Types_for_Logical_Frameworks","234817755_The_Essence_of_Algol","233922998_A_Categorical_Treatment_of_Ornaments","230876238_The_Mathematics_of_Sentence_Structure","229750289_Adjointness_in_Foundations","228610005_Ornamental_algebras_algebraic_ornaments","224943738_Refining_Inductive_Types","221570274_A_Semantic_Basis_for_Local_Reasoning","220898529_Relating_Computational_Effects_by_-Lifting","220873239_Towards_Abstract_Categorial_Grammars","220832284_The_Coherence_of_Languages_with_Intersection_Types","220693177_Theories_of_programming_languages","213886767_Hoare_CAR_An_axiomatic_basis_for_computer_programming_Commun_ACM_12_576-580","38373144_The_Logic_of_Bunched_Implications","34628492_A_Category-theoretic_approach_to_the_semantics_of_programming_languages_microform","7189270_Functorial_semantics_of_algebraic_theories","3965916_Separation_logic_A_logic_for_shared_mutable_data_structures","2826882_Refinement_Types_for_ML_Tim_Freeman","2378147_A_Framework_for_Defining_Logics","1960079_Semantics_of_Separation-Logic_Typing_and_Higher-order_Frame_Rules_forAlgol-like_Languages"]}