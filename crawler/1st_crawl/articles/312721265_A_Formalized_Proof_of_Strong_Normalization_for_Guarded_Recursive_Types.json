{"id":"312721265_A_Formalized_Proof_of_Strong_Normalization_for_Guarded_Recursive_Types","abstract":"We consider a simplified version of Nakano’s guarded fixed-point types in a representation by infinite type expressions, defined coinductively. Smallstep reduction is parametrized by a natural number “depth” that expresses under how many guards we may step during evaluation. We prove that reduction is strongly normalizing for any depth. The proof involves a typed inductive notion of strong normalization and a Kripke model of types in two dimensions: depth and typing context. Our results have been formalized in Agda and serve as a case study of reasoning about a language with coinductive type expressions.","authors":["Andreas Abel","Andrea Vezzosi"],"meta":["November 2014","DOI:10.1007/978-3-319-12736-1_8","Conference: Asian Symposium on Programming Languages and Systems"],"references":["262366004_Copatterns_Programming_Infinite_Structures_by_Observations","227263348_Strongly_Typed_Term_Representations_in_Coq","226562842_Short_proofs_of_normalization_for_the_simply-_typed_l-calculus_permutative_conversions_and_Godel's_T","226035566_Inductive_families","222553091_Normalization_for_the_Simply-Typed_Lambda-Calculus_in_Twelf","221443231_Ultrametric_Semantics_of_Reactive_Programs","221241402_A_Semantic_Model_for_Graphical_User_Interfaces","2641208_Monadic_Presentations_of_Lambda_Terms_Using_Generalized_Inductive_Types","262318793_Productive_Coprogramming_with_Guarded_Recursion","261165434_Intensional_Type_Theory_with_Guarded_Recursive_Types_qua_Fixed_Points_on_Universes","242427516_FUNCTIONAL_PEARL_Type-Preserving_Renaming_and_Substitution","238801711_Perpetual_Reductions_in_-Calculus","221550830_Let's_See_How_Things_Unfold_Reconciling_the_Infinite_with_the_Intensional_Extended_Abstract","221241162_Outrageous_but_meaningful_coincidences_Dependent_type-safe_syntax_and_evaluation","220315927_Intentional_Interpretations_of_Functionals_of_Finite_Type_I","3854911_A_Modality_for_Recursion","2853420_Guarded_recursive_datatype_constructors"]}