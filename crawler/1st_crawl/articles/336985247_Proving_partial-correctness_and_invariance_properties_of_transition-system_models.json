{"id":"336985247_Proving_partial-correctness_and_invariance_properties_of_transition-system_models","abstract":"We propose an approach for proving partial-correctness and invariance properties of transition systems, and illustrate it on a model of a security hypervisor.\nRegarding partial correctness, we generalise the recently introduced formalism of Reachability Logic, currently used as a language-parametric logic for programs, to transition systems. We propose a coinductive proof system for the resulting logic, which can be seen as performing an “infinite symbolic execution” of the transition-system model under verification. We embed the proof system in the Coq proof assistant and formally prove its soundness and completeness.\nThe soundness result provides us with a Coq-certified Reachability-Logic prover for transition-system models. The completeness result, although more theoretical in nature, also has a practical value, as it suggests a proof strategy that is able to deal with all valid formulas on a given transition system.\nThe complete proof strategy reduces partial correctness to invariance. For the latter we propose an incremental verification technique for dealing with the case-explosion problem that is known to affect it. All these combined techniques were instrumental in enabling us to prove, within reasonable time and effort limits, that the nontrivial algorithm implemented in a simple hypervisor that we designed in earlier work meets its expected functional requirements.","authors":["Vlad Rusu","Gilles Grimaud","Michaël Hauspie"],"meta":["October 2019Science of Computer Programming 186(10):102342","DOI:10.1016/j.scico.2019.102342"],"references":["324519920_Program_Verification_by_Coinduction","305483785_A_Generic_Framework_for_Symbolic_Execution_A_Coinductive_Approach","336035116_Building_certified_concurrent_OS_kernels","328903265_A_Certified_Procedure_for_RL_Verification","326073192_A_Coinductive_Approach_to_Proving_Reachability_Properties_in_Logically_Constrained_Term_Rewriting_Systems","321178832_Formal_models_and_verification_of_memory_management_in_a_hypervisor","313550915_An_Axiomatic_Basis_of_Computer_Programming","311894016_Achieving_Virtualization_Trustworthiness_Using_Software_Mechanisms","310823795_Semantics-based_program_verifiers_for_all_languages","289691041_Checking_reachability_using_matching_logic"]}