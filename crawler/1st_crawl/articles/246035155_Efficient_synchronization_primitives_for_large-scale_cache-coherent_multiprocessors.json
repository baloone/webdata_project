{"id":"246035155_Efficient_synchronization_primitives_for_large-scale_cache-coherent_multiprocessors","abstract":"This paper proposes a set of efficient primitives for process synchronization in multiprocessors. The only assumptions made in developing the set of primitives are that hardware combining is not implemented in the inter-connect, and (in one case) that the interconnect supports broadcast.\nThe primitives make use of synchronization bits (syncbits) to provide a simple mechanism for mutual exclusion. The proposed implementation of the primitives includes efficient ( i.e. local) busy-waiting for syncbits. In addition, a hardware-supported mechanism for maintaining a first-come first-serve queue of requests for a syncbit is proposed. This queueing mechanism allows for a very efficient implementation of, as well as fair access to, binary semaphores. We also propose to implement Fetch and Add with combining in software rather than hardware. This allows an architecture to scale to a large number of processors while avoiding the cost of hardware combining.\nScenarios for common synchronization events such as work queues and barriers are presented to demonstrate the generality and ease of use of the proposed primitives. The efficient implementation of the primitives is simpler if the multiprocessor has a hardware cache-consistency protocol. To illustrate this point, we outline how the primitives would be implemented in the Multicube multiprocessor [GoWo88].","authors":["James R. Goodman","Mary K. Vernon","Philip J. Woest"],"meta":["April 1989ACM SIGARCH Computer Architecture News 17(2):64-75","DOI:10.1145/68182.68188"],"references":["220771097_Dynamic_Decentralized_Cache_Schemes_for_MIMD_Parallel_Processors","220404746_Basic_Techniques_for_the_Efficient_Coordination_of_Very_Large_Numbers_of_Cooperating_Sequential_Processors","6093297_Multis_A_New_Class_of_Multiprocessor_Computers","3048187_The_NYU_Ultracomputer_Designing_an_MIMD_Shared_Memory_Parallel_Computer","238673671_Scalability_and_its_application_to_multicube","234815767_Guide_to_Parallel_Programming_on_Sequent_Computer_Systems","226879018_The_butterfly_barrier","224483395_Applications_Considerations_in_the_System_Design_of_Highly_Concurrent_Multiprocessors","221084152_RP3_Processor-Memory_Element","221083287_Architectural_Choices_for_Multi-level_Cache_Hierarchies","220439288_Cache_Coherence_Protocols_Evaluation_Using_a_Multiprocessor_Simulation_Model","220332483_Hot_Spot_Contention_and_Combining_in_Multistage_Interconnection_Networks","220330451_Distributing_Hot-Spot_Addressing_in_Large-Scale_Multiprocessors","3188926_A_Scheme_to_Enforce_Data_Dependence_on_Large_Multiprocessor_Systems"]}