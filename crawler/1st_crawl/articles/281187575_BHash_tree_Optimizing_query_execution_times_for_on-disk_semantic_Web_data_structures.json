{"id":"281187575_BHash_tree_Optimizing_query_execution_times_for_on-disk_semantic_Web_data_structures","abstract":"The increasing growth of the Semantic Web has substantially enlarged the amount of data available in RDF format. One proposed solution is to map RDF data to relational databases (RDBs). The lack of a common schema, however, makes this mapping inefficient. Some RDF-native solutions use B+Trees, which are potentially becoming a bottleneck, as the single key-space approach of the Semantic Web may even make their O(log(n)) worst case performance too costly. Alternatives, such as hash-based approaches, suffer from insufficient update and scan performance. In this paper we propose a novel type of index structure called a B+Hash Tree, which combines the strengths of traditional B-Trees with the speedy constant-time lookup of a hash-based structure. Our main research idea is to enhance the B+Tree with a Hash Map to enable constant retrieval time instead of the common logarithmic one of the B+Tree. The result is a scalable, updatable, and lookup-optimized, on-disk index-structure that is especially suitable for the large key-spaces of RDF datasets. We evaluate the approach against existing RDF indexing schemes using two commonly used datasets and show that a B+Hash Tree is at least twice as fast as its competitors - an advantage that we show should grow as dataset sizes increase.","authors":["M K Nguyen","C Basca","A Bernstein"],"meta":["November 2010","DOI:10.5167/uzh-44858"],"references":["221023975_Matrix_Bit_loaded_a_scalable_lightweight_join_query_processor_for_RDF_data","221022288_SPARQL_Basic_Graph_Pattern_Optimization_Using_Selectivity_Estimation","220538804_Database_Architecture_Evolution_Mammals_Flourished_long_before_Dinosaurs_became_Extinct","220123872_The_Berlin_SPARQL_benchmark","47862102_RDF-3X_a_RISC-style_Engine_for_RDF","7692944_Kryder's_Law","2942368_Efficient_RDF_Storage_and_Retrieval_in_Jena2","234807482_Ubiquitous_B-Tree","232637501_Hybrid-TH_A_Hybrid_Access_Mechanism_for_Real-Time_Main-Memory_Resident_Database_Systems","228922512_On-disk_storage_techniques_for_Semantic_Web_data-Are_B-Trees_always_the_optimal_solution","228901750_Jena_property_table_implementation","221466259_YARS2_A_Federated_Repository_for_Querying_Graph_Structured_Data_from_the_Web","221310699_A_Study_of_Index_Structures_for_Main_Memory_Database_Management_Systems","220566578_Hash_Table_Methods","220565839_The_Ubiquitous_B-Tree","220538835_Hexastore_Sextuple_Indexing_for_Semantic_Web_Data_Management","220473513_SW-Store_a_vertically_partitioned_DBMS_for_Semantic_Web_data_management","3778402_Hybrid-TH_a_hybrid_access_mechanism_for_real-time_memory-resident_database_systems","2370163_Hashing_and_Rehashing_in_Emulated_Shared_Memory"]}