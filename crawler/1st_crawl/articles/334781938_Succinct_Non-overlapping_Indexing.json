{"id":"334781938_Succinct_Non-overlapping_Indexing","abstract":"Text indexing is a fundamental problem in computer science. The objective is to preprocess a text T, so that, given a pattern P, we can find all starting positions (or simply, occurrences) of P in T efficiently. In some cases, additional restrictions are imposed. We consider two variants, namely the non-overlapping indexing problem, and the range non-overlapping indexing problem. Given a text T having n characters, the non-overlapping indexing problem is defined as follows: pre-process T into a data structure, such that for any pattern P, containing |P| characters, we can report a set containing the maximum number of non-overlapping occurrences of P in T. Cohen and Porat (in: Algorithms and computation, 20th international symposium, ISAAC 2009, Honolulu, Hawaii. Proceedings, 2009) showed that by maintaining a linear space index in which the suffix tree of T is augmented with an O(n) word data structure, a query P can be answered in optimal time O(|P|+nocc), where nocc is the number of occurrences reported. We present the following new result. Let CSA (not necessarily a compressed suffix array) be an index of T that can compute (i) the suffix range of P in search(P) time, and (ii) a suffix array or an inverse suffix array value in tSA time. By using CSA alone, we can answer a query P in search(P)+sort(nocc)+O(nocc·tSA) time. The function sort(k) denotes the time for sorting k numbers in {1,2,⋯,n}. In the range non-overlapping indexing problem, along with the pattern P, two integers a and b, b≥a, are provided as input. The task is to report a set containing the maximum number of non-overlapping occurrences of P that lie within the range [a, b]. For any arbitrarily small positive constant ϵ, we present an O(nlogϵn) word index with O(|P|+nocca,b) query time, where nocca,b is the number of occurrences reported. Our index improves upon the result of Cohen and Porat [6].","authors":["Arnab Ganguly","Rahul Shah","Sharma V. Thankachan"],"meta":["January 2020Algorithmica 82(1)","DOI:10.1007/s00453-019-00605-5"],"references":["229067733_Linear_Pattern_Matching_Algorithm","224775631_Sorted_Range_Reporting","312077310_pBWT_Achieving_Succinct_Data_Structures_for_Parameterized_Pattern_Matching_and_Related_Problems","300789111_Succinct_Non-overlapping_Indexing","284471379_Range_non-overlapping_indexing_and_successive_list_indexing","257640653_On_position_restricted_substring_searching_in_succinct_space","229067720_On-Line_Construction_of_Suffix_Trees","224960000_A_Fast_String_Searching_Algorithm","224103840_Efficient_randomized_pattern-matching_algorithms","222516401_Replacing_Suffix_Trees_with_Enhanced_Suffix_Arrays","221591874_Dictionary_matching_and_indexing_with_errors_and_don't_cares","221591044_Theory_of_parameterized_pattern_matching_Algorithms_and_applications","221543588_Online_Sorted_Range_Reporting","220994452_Improved_Algorithms_for_the_Range_Next_Value_Problem_and_Applications","220779327_Suffix_Arrays_a_New_Method_for_On-Line_String_Searches"]}