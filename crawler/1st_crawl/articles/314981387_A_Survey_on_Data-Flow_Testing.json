{"id":"314981387_A_Survey_on_Data-Flow_Testing","abstract":"Data-flow testing (DFT) is a family of testing strategies designed to verify the interactions between each program variable's definition and its uses. Such a test objective of interest is referred to as a def-use pair. DFT selects test data with respect to various test adequacy criteria (i.e., data-flow coverage criteria) to exercise each pair. The original conception of DFT was introduced by Herman in 1976. Since then, a number of studies have been conducted, both theoretically and empirically, to analyze DFT's complexity and effectiveness. In the past four decades, DFT has been continuously concerned, and various approaches from different aspects are proposed to pursue automatic and efficient data-flow testing. This survey presents a detailed overview of data-flow testing, including challenges and approaches in enforcing and automating it: (1) it introduces the data-flow analysis techniques that are used to identify def-use pairs; (2) it classifies and discusses techniques for data-flow-based test data generation, such as search-based testing, random testing, collateral-coverage-based testing, symbolic-execution-based testing, and model-checking-based testing; (3) it discusses techniques for tracking data-flow coverage; (4) it presents several DFT applications, including software fault localization, web security testing, and specification consistency checking; and (5) it summarizes recent advances and discusses future research directions toward more practical data-flow testing.","authors":["Ting Su","Ke Wu","Weikai Miao","Geguang Pu"],"meta":["March 2017ACM Computing Surveys 50(1):1-35","DOI:10.1145/3020266"],"references":["308846592_Dynamic_Data_Flow_Testing_of_Object_Oriented_Systems","279907392_Automatic_Test_Data_Generation_for_Data_Flow_Testing_Using_a_Genetic_Algorithm","325497625_Graph_Coverage","319395113_DO-178B_Software_Considerations_in_Airborne_Systems_and_Equipment_Certification","317328220_Achievements_open_problems_and_challenges_for_search_based_software_testing","311471839_Steering_symbolic_execution_to_less_traveled_paths","308862503_Combining_Symbolic_Execution_and_Model_Checking_for_Data_Flow_Testing","286746557_Automated_Coverage-Driven_Test_Data_Generation_Using_Dynamic_Symbolic_Execution","282616972_Test_sequence_selection_method_for_statecharts","282069055_Achievements_Open_Problems_and_Challenges_for_Search_Based_Software_Testing"]}