{"id":"316174387_Applying_Mutation_Analysis_on_Kernel_Test_Suites_An_Experience_Report","authors":["Iftekhar Ahmed","Carlos Jensen","Alex Groce","Paul Mckenney"],"meta":["March 2017","DOI:10.1109/ICSTW.2017.26","Conference: 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"],"references":["318409749_Stateless_model_checking_of_the_Linux_kernel's_hierarchical_read-copy-update_tree_RCU","308980969_Verification_of_the_Tree-Based_Hierarchical_Read-Copy_Update_in_the_Linux_Kernel","286930330_On_the_limits_of_mutation_reduction_strategies","281584658_Trivial_Compiler_Equivalence_A_Large_Scale_Empirical_Study_of_a_Simple_Fast_and_Effective_Equivalent_Mutant_Detection_Technique","277664637_Are_Mutants_a_Valid_Substitute_for_Real_Faults_in_Software_Testing","266659273_Efficient_mutation_analysis_by_propagating_and_partitioning_infected_execution_states","261079309_Using_Non-redundant_Mutation_Operators_and_Test_Suite_Prioritization_to_Achieve_Efficient_and_Scalable_Mutation_Analysis","242391888_Read-copy_update_Using_execution_history_to_solve_concurrency_problems","239761017_Better_predicate_testing","224332299_Constructing_Subtle_Faults_Using_Higher_Order_Mutation_Testing","221554374_Is_operator-based_mutant_selection_superior_to_random_mutant_selection","221542064_Automatic_Mutation_Test_Case_Generation_via_Dynamic_Symbolic_Execution","220773040_Evaluating_Mutation_Testing_Alternatives_A_Collateral_Experiment","220719886_An_Empirical_Evaluation_of_the_First_and_Second_Order_Mutation_Testing_Strategies","220069671_An_Analysis_and_Survey_of_the_Development_of_Mutation_Testing","4200521_Is_mutation_an_appropriate_tool_for_testing_experiments","2349005_An_Experimental_Determination_of_Sufficient_Mutant_Operators","324709949_Verification_of_tree-based_hierarchical_read-copy_update_in_the_Linux_kernel","316985429_Angels_and_monsters_An_empirical_investigation_of_potential_test_effectiveness_and_efficiency_improvement_from_strongly_subsuming_higher_order_mutation","316985252_A_Study_of_Equivalent_and_Stubborn_Mutation_Operators_using_Human_Analysis_of_Equivalence","314920975_Faults_in_linux_ten_years_later","304286565_How_Verified_is_My_Code_Falsification-Driven_Verification_T","279264267_Verifications_around_the_Linux_Kernel","271455697_Establishing_Theoretical_Minimal_Sets_of_Mutants","262244378_Improving_logic-based_testing","262168126_Faster_mutation_testing_inspired_by_test_prioritization_and_reduction","261192385_Why_don't_software_developers_use_static_analysis_tools_to_find_bugs","260667876_Herding_Cats_Modelling_Simulation_Testing_and_Data_Mining_for_Weak_Memory","260649024_An_Empirical_Evaluation_of_Mutation_Testing_for_Improving_the_Test_Quality_of_Safety-Critical_Software","251513505_Perpetual_Development_A_Model_of_the_Linux_Kernel_Life_Cycle","243449939_Heuristics_for_Determining_Equivalence_of_Program_Mutations","236982641_Structured_Deferral_Synchronization_via_Procrastination","223091511_Reducing_the_Cost_of_Mutation_Testing_An_Empirical_Study","221321488_Randoop_Feedback-directed_random_testing_for_Java","220375578_Multi_Objective_Higher_Order_Mutation_Testing_with_Genetic_Programming","220353806_The_read-copy-update_mechanism_for_supporting_real-time_applications_on_shared-memory_multiprocessor_systems_with_Linux","220281668_An_Experimental_Evaluation_of_Data_Flow_and_Mutation_Testing","220277863_On_guiding_the_augmentation_of_an_automated_test_suite_via_mutation_analysis","220198298_Two_Notions_of_Correctness_and_Their_Relation_to_Testing","3188345_General_test_result_checking_with_log_file_analysis","2394289_All-Uses_versus_Mutation_Testing_An_Experimental_Comparison_of_Effectiveness","2383896_Using_Compiler_Optimization_Techniques_to_Detect_Equivalent_Mutants"]}