{"id":"297764937_Synchronous_counting_and_computational_algorithm_design","abstract":"Consider a complete communication network on n nodes. In synchronous 2-counting, the nodes receive a common clock pulse and they have to agree on which pulses are \"odd\" and which are \"even\". Furthermore, the solution needs to be self-stabilising (reaching correct operation from any initial state) and tolerate f Byzantine failures (nodes that send arbitrary misinformation). Prior algorithms either require a source of random bits or a large number of states per node. In this work, we give fast state-optimal deterministic algorithms for the first non-trivial case f=1. To obtain these algorithms, we develop and evaluate two different techniques for algorithm synthesis. Both are based on casting the synthesis problem as a propositional satisfiability (SAT) problem; a direct encoding is efficient for synthesising time-optimal algorithms, while an approach based on counter-example guided abstraction refinement discovers non-optimal algorithms quickly.","authors":["Danny Dolev","Keijo Heljanko","M. JÃ¤rvisalo","J.H. Korhonen"],"meta":["March 2016","DOI:10.1016/j.jcss.2015.09.002"],"references":["259742966_Parameterized_Synthesis","258499499_SAT-Based_Synthesis_Methods_for_Safety_Specs","236248234_Synchronous_Counting_and_Computational_Algorithm_Design","228986898_Synthesis_of_Parallel_Sorting_Networks_using_SAT_Solvers","222573813_Temporal_Induction_by_Incremental_SAT_Solving","221403223_Theorem_Proving_Using_Lazy_Proof_Explication","221403128_Checking_Satisfiability_of_First-Order_Formulas_by_Incremental_Translation_to_SAT","221343677_Fast_Self-Stabilizing_Byzantine_Tolerant_Digital_Clock_Synchronization","221233814_On_Self-stabilizing_Synchronous_Actions_Despite_Byzantine_Attacks","221176645_Counterexample_Guided_Abstraction_Refinement_Algorithm_for_Propositional_Circumscription","220944628_Synthesizing_Shortest_Linear_Straight-Line_Programs_over_GF2_Using_SAT","220944617_Finding_Efficient_Circuits_Using_SAT-Solvers","220944424_Abstraction-Based_Algorithm_for_2QBF","220938958_Combinatorial_sketching_for_finite_programs","220884459_Efficiently_solving_quantified_bit-vector_formulas","220431290_Counterexample-guided_abstraction_refinement_for_symbolic_model_checking","3505515_Distributed_reactive_systems_are_hard_to_synthesize","2854225_Self-Stabilizing_Pulse_Synchronization_Inspired_by_Biological_Pacemaker_Networks","301833696_Yet_another_local_search_solver_and_lingeling_and_friends_entering_the_SAT_competition_2014","284411763_An_extensible_SAT-solver","281739013_Bounded_model_checking","274012289_Towards_Optimal_Synchronous_Counting","262398457_Finding_Efficient_Circuits_for_Ensemble_Computation","262211940_Solving_QBF_with_Counterexample_Guided_Refinement","259084966_Complexity-sensitive_decision_procedures_for_abstract_argumentation","258083313_Optimal_Sorting_Networks","246296812_Generalization_of_a_Probability_Limit_Theorem_of_Cramer","244468449_Logic_arithmetic_and_automata","234831006_Reaching_Agreement_in_the_Presence_of_Faults","230636173_Bounded_Model_Checking","225158842_Bounded_Synthesis","224407477_Exact_Multiple-Control_Toffoli_Network_Synthesis_With_SAT_Techniques","222460125_The_Byzantine_General_Strike_Again","221550948_Lazy_Synthesis","221344076_Resilience_of_mutual_exclusion_algorithms_to_transient_memory_faults","221105790_Design_and_Synthesis_of_Synchronization_Skeletons_Using_Branching_Time_Temporal_Logic","220944464_Lecture_Notes_in_Computer_Science","220827120_Synthesis_of_Communicating_Processes_from_Temporal_Logic_Specifications","220805828_Lazy_Theorem_Proving_for_Bounded_Model_Checking_over_Infinite_Domains","220404837_Synthesis_of_Communicating_Processes_from_Temporal_Logic_Specifications","220114448_A_Lower_Bound_for_the_Time_to_Assure_Interactive_Consistency","4175501_Uniform_distributed_synthesis","3501892_Towards_optimal_distributed_consensus","3225530_SAT-Based_Counterexample-Guided_Abstraction_Refinement","2365759_What_Can_be_Computed_Locally","2246664_Self-Stabilizing_Clock_Synchronization_in_the_Presence_of_Byzantine_Faults"]}