{"id":"287506983_From_Aristotle_to_Ringelmann_a_large-scale_analysis_of_team_productivity_and_coordination_in_Open_Source_Software_projects","abstract":"Complex software development projects rely on the contribution of teams of developers, who are required to collaborate and coordinate their efforts. The productivity of such development teams, i.e., how their size is related to the produced output, is an important consideration for project and schedule management as well as for cost estimation. The majority of studies in empirical software engineering suggest that - due to coordination overhead - teams of collaborating developers become less productive as they grow in size. This phenomenon is commonly paraphrased as Brooks’ law of software project management, which states that “adding manpower to a software project makes it later”. Outside software engineering, the non-additive scaling of productivity in teams is often referred to as the Ringelmann effect, which is studied extensively in social psychology and organizational theory. Conversely, a recent study suggested that in Open Source Software (OSS) projects, the productivity of developers increases as the team grows in size. Attributing it to collective synergetic effects, this surprising finding was linked to the Aristotelian quote that “the whole is more than the sum of its parts”. Using a data set of 58 OSS projects with more than 580,000 commits contributed by more than 30,000 developers, in this article we provide a large-scale analysis of the relation between size and productivity of software development teams. Our findings confirm the negative relation between team size and productivity previously suggested by empirical software engineering research, thus providing quantitative evidence for the presence of a strong Ringelmann effect. Using fine-grained data on the association between developers and source code files, we investigate possible explanations for the observed relations between team size and productivity. In particular, we take a network perspective on developer-code associations in software development teams and show that the magnitude of the decrease in productivity is likely to be related to the growth dynamics of co-editing networks which can be interpreted as a first-order approximation of coordination requirements.","authors":["Ingo Scholtes","Pavlin Mavrodiev","Frank Schweitzer"],"meta":["April 2016Empirical Software Engineering 21(2)","DOI:10.1007/s10664-015-9406-4"],"references":["271475062_Remote_analysis_and_measurement_of_libre_software_systems_by_means_of_the_CVSAnalY_tool","270504262_Too_Big_to_Fail_Large_Samples_and_the_p-Value_Problem","264799490_Lean_GHTorrent_GitHub_data_on_demand","285244201_Productivity_loss_in_performance_groups_A_motivation_analysis","285196100_Research_on_animate_sources_of_power_The_work_of_man","284543783_Software_Engineering_Economics","283781235_Productivity_loss_in_performance_groups_A_motivation_analysis","277510977_Social_Loafing_and_Collectivism_A_Comparison_of_the_United","275698318_Studies_of_Individualism-Collectivism_Effects_on_Cooperation_in_Groups","270784507_The_Economies_of_Scale","263847948_The_Promises_and_Perils_of_Mining_GitHub","262452336_How_Much_Is_the_Whole_Really_More_than_the_Sum_of_Its_Parts_1_1_25_Superlinear_Productivity_in_Collective_Group_Actions","256670134_Do_all_task_dependencies_require_coordination_the_role_of_task_properties_in_identifying_critical_coordination_needs_in_software_projects","260648757_Coordination_Breakdowns_and_Their_Impact_on_Development_Productivity_and_Software_Failures","256557390_A_Note_on_Studentising_a_Test_for_Heteroskedasticity"]}