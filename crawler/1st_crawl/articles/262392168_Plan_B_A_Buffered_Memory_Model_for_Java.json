{"id":"262392168_Plan_B_A_Buffered_Memory_Model_for_Java","abstract":"Recent advances in verification have made it possible to envision trusted implementations of real-world languages. Java with its type-safety and fully specified semantics would appear to be an ideal candidate; yet, the complexity of the translation steps used in production virtual machines have made it a challenging target for verifying compiler technology. One of Java's key innovations, its memory model, poses significant obstacles to such an endeavor. The Java Memory Model is an ambitious attempt at specifying the behavior of multithreaded programs in a portable, hardware agnostic, way. While experts have an intuitive grasp of the properties that the model should enjoy, the specification is complex and not well-suited for integration within a verifying compiler infrastructure. Moreover, the specification is given in an axiomatic style that is distant from the intuitive reordering-based reasonings traditionally used to justify or rule out behaviors, and ill suited to the kind of operational reasoning one would expect to employ in a compiler. This paper takes a step back, and introduces a Buffered Memory Model (BMM) for Java. We choose a pragmatic point in the design space sacrificing generality in favor of a model that is fully characterized in terms of the reorderings it allows, amenable to formal reasoning, and which can be efficiently applied to a specific hardware family, namely x86 multiprocessors. Although the BMM restricts the reorderings compilers are allowed to perform, it serves as the key enabling device to achieving a verification pathway from bytecode to machine instructions. Despite its restrictions, we show that it is backwards compatible with the Java Memory Model and that it does not cripple performance on TSO architectures.","authors":["Delphine Demange","Vincent Laporte","Lei Zhao","Suresh Jagannathan"],"meta":["January 2013ACM SIGPLAN Notices 48(1):329-342","DOI:10.1145/2429069.2429110","Conference: Proceedings of the 40th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languagesVolume: 48"],"references":["278916705_Mathematizing_C_Concurrency_The_Post-Rapperswil_Model","251758429_The_Java_Memory_Model_a_Formal_Explanation","234819412_Relaxed-Memory_Concurrency_and_Verified_Compilation","228806774_Java_for_safety-critical_applications","329640733_The_Java_Memory_Model_Operationally_Denotationally_Axiomatically","314879997_Safe_optimisations_for_shared-memory_concurrent_programs","292448806_Program_Transformations_in_Weak_Memory_Models","268239604_Relaxed_memory_models","265740365_Java_Memory_Model_Examples_Good_Bad_and_Ugly","234783346_Formalising_Java's_Data_Race_Free_Guarantee"]}