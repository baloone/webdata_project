{"id":"345478394_Wormhole_A_Fast_Ordered_Index_for_In-memory_Data_Management","abstract":"In-memory data management systems, such as key-value stores, have become an essential infrastructure in today's big-data processing and cloud computing. They rely on efficient index structures to access data. While unordered indexes, such as hash tables, can perform point search with O(1) time, they cannot be used in many scenarios where range queries must be supported. Many ordered indexes, such as B+ tree and skip list, have a O(log N) lookup cost, where N is number of keys in an index. For an ordered index hosting billions of keys, it may take more than 30 key-comparisons in a lookup, which is an order of magnitude more expensive than that on a hash table. With availability of large memory and fast network in today's data centers, this O(log N) time is taking a heavy toll on applications that rely on ordered indexes.","authors":["Xingbo Wu","Fan ni","Song Jiang"],"meta":["March 2019","DOI:10.1145/3302424.3303955","Conference: the Fourteenth EuroSys Conference 2019 CD-ROM"],"references":["304462342_Horton_Tables_Fast_Hash_Tables_for_In-Memory_Data-Intensive_Computing","259694507_Hardware-Oblivious_Parallelism_for_In-Memory_Column-Stores","255564197_The_Bw-Tree_A_B-tree_for_New_Hardware_Platforms","254463463_A_lock-free_Btree","254461663_Workload_analysis_of_a_large-scale_key-value_store","242391888_Read-copy_update_Using_execution_history_to_solve_concurrency_problems","221257599_Flat_combining_and_the_synchronization-parallelism_tradeoff","221213860_FAST_fast_architecture_sensitive_tree_search_on_modern_CPUs_and_GPUs","221164461_Scalable_High_Speed_IP_Routing_Lookups","3557037_Transactional_Memory_Architectural_Support_For_Lock-free_Data_Structures","2597243_Software_Transactional_Memory","320362751_ffwd_delegation_is_much_faster_than_you_think","320071167_Search_lookaside_buffer_efficient_caching_for_index_data_structures","316176345_FloDB_Unlocking_Memory_in_Persistent_Key-Value_Stores","312634754_Addressing_Complex_and_Subjective_Product-Related_Queries_with_Customer_Reviews","304021514_A_Hybrid_B-tree_as_Solution_for_In-Memory_Indexing_on_CPU-GPU_Heterogeneous_Computing_Platforms","303369718_Full-stack_architecting_to_achieve_a_billion-requests-per-second_throughput_on_a_single_key-value_store_server_platform","290653939_Mega-KV_A_case_for_GPUs_to_maximize_the_throughput_of_in-memory_key-value_stores","288060719_Addressing_Complex_and_Subjective_Product-Related_Queries_with_Customer_Reviews","282462609_Mega-KV","269034177_Transactional_memory","266657190_Algorithmic_improvements_for_fast_concurrent_Cuckoo_hashing","262367196_Fast_Concurrent_Lock-Free_Binary_Search_Trees","262317728_Scaling_Memcache_at_Facebook","262295742_Meet_the_walkers_Accelerating_index_traversals_for_in-memory_databases","262204705_MemC3_compact_and_concurrent_MemCache_with_dumber_caching_and_smarter_hashing","261087784_The_adaptive_radix_tree_ARTful_indexing_for_main-memory_databases","247442902_Introduction_To_Algorithms","241624080_Cache_craftiness_for_fast_multicore_key-value_storage","234807482_Ubiquitous_B-Tree","221344213_Lock-free_linked_lists_and_skip_lists","221257479_Concurrent_cache-oblivious_B-trees","221220052_Skip_Lists_A_Probabilistic_Alternative_to_Balanced_Trees","220779821_Lower_bounds_for_external_memory_dictionaries","50385113_High-Throughput_Transaction_Executions_on_Graphics_Processors","3474160_Cyclic_Codes_for_Error_Detection","2861873_Lower_Bounds_for_External_Memory_Dictionaries"]}