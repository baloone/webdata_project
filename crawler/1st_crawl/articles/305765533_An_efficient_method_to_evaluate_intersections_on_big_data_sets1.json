{"id":"305765533_An_efficient_method_to_evaluate_intersections_on_big_data_sets1","abstract":"Set intersections are important in computer science. Especially, intersection of inverted lists is a fundamental operation in information retrieval for text databases and Web search engines. In this paper, we discuss an efficient and effective way to implement this operation in the context of very big data sets. The main idea behind it is to do binary search over sorted interval sequences, each of which corresponds to an inverted list and is constructed by establishing a trie over the sequences of set identifiers as well as a kind of tree encoding, by which each node in the trie is assigned an interval. In many cases, an interval sequence is much shorter than its corresponding inverted list. In particular, the lowest common ancestors of intervals in a trie can be utilized to control a binary search to skip over useless interval containment checks, which enables us to reach an optimal off-line algorithm to do the task, and is theoretically better than any traditional on-line methods (at cost of more space). Experiments have been conducted, showing that the trade-off of space for time is worthwhile.","authors":["Yangjun Chen","Weixin Shen"],"meta":["July 2016Theoretical Computer Science 647","DOI:10.1016/j.tcs.2016.07.018"],"references":["265816442_Fast_Sorted-Set_Intersection_using_SIMD_Instructions","259893466_SIMD_Compression_and_the_Intersection_of_Sorted_Integers","224237519_Decomposing_DAGs_into_spanning_trees_A_new_way_to_compress_transitive_closures","221614239_Inverted_indexes_vs_bitmap_indexes_in_decision_support_systems","221613435_A_combination_of_trie-trees_and_inverted_files_for_the_indexing_of_set-valued_attributes","221613425_Efficient_query_evaluation_using_a_two-level_retrieval_process","221580021_Experimental_Analysis_of_a_Fast_Intersection_Algorithm_for_Sorted_Sequences","221310470_Approximate_Encoding_for_Direct_Access_and_Query_Processing_over_Compressed_Bitmaps","221301210_Static_Index_Pruning_for_Information_Retrieval_Systems","221301093_Compression_of_Inverted_Indexes_For_Fast_Query_Evaluation","221299354_On_Efficient_Posting_List_Intersection_with_Multicore_Processors","221299225_Rank-Preserving_Two-Level_Caching_for_Scalable_Search_Engines","221023128_Inverted_index_compression_and_query_processing_with_optimized_document_ordering","220639778_An_Experimental_Investigation_of_Set_Intersection_Algorithms_for_Text_Searching","220587203_Building_signature_trees_into_OODBs","220538625_Efficient_Parallel_Lists_Intersection_and_Index_Compression_Algorithms_using_Graphics_Processing_Units","220459352_Improved_Methods_for_Signature-Tree_Construction","50367568_Fast_Set_Intersection_in_Memory","40884308_Alternation_and_Redundancy_Analysis_of_the_Intersection_Problem","33038304_The_Porter_stemming_algorithm_Then_and_now","4330938_An_Efficient_Algorithm_for_Answering_Graph_Reachability_Queries","278689710_The_Algorithm_Design_Manual","276465264_Faster_set_intersection_with_SIMD_instructions_by_reducing_branch_mispredictions","262275584_Document_identifier_reassignment_and_run-length-compressed_inverted_indexes_for_improved_search_performance","262155109_Satisfiability_and_The_Art_of_Computer_Programming","240431641_Super-Scalar_Database_Compression_between_RAM_and_CPU_Cache","239506919_Development_of_a_Stemming_Algorithm_Mechanical_Translation_and_Computational_Linguistics","234830142_The_Art_of_Computer_Programming_Volume_1_Fascicle_1_MMIX_--_A_RISC_Computer_for_the_New_Millennium_Art_of_Computer_Programming","223873234_Prototyping_a_distributed_information_retrieval_system_that_uses_statistical_ranking","222546823_Signature-based_structures_for_objects_with_set-valued_attributes","221314130_A_Fast_Set_Intersection_Algorithm_for_Sorted_Sequences","221301300_Parameterised_Compression_for_Sparse_Bitmaps","221300244_S-Tree_A_Dynamic_Balanced_Signature_Index_for_Office_Retrieval","221194387_What_Does_It_Mean_to_Measure_Performance","221131625_Faster_Adaptive_Set_Intersections_for_Text_Searching","221022697_Predictive_caching_and_prefetching_of_query_results_in_search_engines","221022348_Performance_of_compressed_inverted_list_caching_in_search_engines","220982102_Compressed_Inverted_Indexes_for_In-Memory_Search_Engines","220982099_Intersection_in_Integer_Inverted_Indices","220780448_Adaptive_set_intersections_unions_and_differences","220779282_Interpolation_Search_for_Non-Independent_Data","220692220_The_Algorithm_Design_Manual","220690158_Search_engines_Information_retrieval_in_practice","220618277_A_Simple_Algorithm_for_Merging_Two_Disjoint_Linearly_Ordered_Sets","220566625_Access_Methods_For_Text","220566595_Inverted_files_for_text_search_engines","220538622_Improving_the_Performance_of_List_Intersection","220479917_Inverted_Index_Compression_Using_Word-Aligned_Binary_Codes","220225657_Inverted_Files_Versus_Signature_Files_for_Text_Indexing","45875095_Fast_Set_Intersection_and_Two_Patterns_Matching","3297597_On_the_Signature_Tree_Construction_and_Analysis","3081103_Run-Length_Encodings","3078835_Managing_Gigabytes_Compressing_and_Indexing_Documents_and_Images","2776293_False_Drop_Analysis_of_Set_Retrieval_with_Signature_Files","2707959_Fast_Set_Operations_Using_Treaps"]}