{"id":"310440966_Designing_Energy-Efficient_Convolutional_Neural_Networks_using_Energy-Aware_Pruning","abstract":"Deep convolutional neural networks (CNNs) are indispensable to state-of-the-art computer vision algorithms. However, they are still rarely deployed on battery-powered mobile devices, such as smartphones and wearable gadgets, where vision algorithms can enable many revolutionary real-world applications. The key limiting factor is the high energy consumption of CNN processing due to its high computational complexity. While there are many previous efforts that try to reduce the CNN model size or amount of computation, we find that they do not necessarily result in lower energy consumption, and therefore do not serve as a good metric for energy cost estimation. To close the gap between CNN design and energy consumption optimization, we propose an energy-aware pruning algorithm for CNNs that directly uses energy consumption estimation of a CNN to guide the pruning process. The energy estimation methodology uses parameters extrapolated from actual hardware measurements that target realistic battery-powered system setups. The proposed layer-by-layer pruning algorithm also prunes more aggressively than previously proposed pruning methods by minimizing the error in output feature maps instead of filter weights. For each layer, the weights are first pruned and then locally fine-tuned with a closed-form least-square solution to quickly restore the accuracy. After all layers are pruned, the entire network is further globally fine-tuned using back-propagation. With the proposed pruning method, the energy consumption of AlexNet and GoogLeNet are reduced by 3.7x and 1.6x, respectively, with less than 1% top-5 accuracy loss. Finally, we show that pruning the AlexNet with a reduced number of target classes can greatly decrease the number of weights but the energy reduction is limited.","authors":["Tien-Ju Yang","Yu-Hsin Chen","Vivienne Sze"],"meta":["November 2016"],"references":["319770256_SqueezeNet_AlexNet-level_accuracy_with_50x_fewer_parameters_and_textless1MB_model_size","319770411_Torch7_A_Matlab-like_Environment_for_Machine_Learning","319770334_Deep_Compression_Compressing_Deep_Neural_Networks_with_Pruning_Trained_Quantization_and_Huffman_Coding","319770230_XNOR-Net_ImageNet_Classification_Using_Binary_Convolutional_Neural_Networks","319770183_Imagenet_classification_with_deep_convolutional_neural_networks","319770146_Second_Order_Derivatives_for_Network_Pruning_Optimal_Brain_Surgeon","319770132_Dynamic_Network_Surgery_for_Efficient_DNNs","317631934_Eyeriss_A_Spatial_Architecture_for_Energy-Efficient_Dataflow_for_Convolutional_Neural_Networks","313601183_Optimal_brain_damage_in","311609205_Quantized_Convolutional_Neural_Networks_for_Mobile_Devices"]}