{"id":"339364197_Deriving_a_usage-independent_software_quality_metric","abstract":"ContextThe extent of post-release use of software affects the number of faults, thus biasing quality metrics and adversely affecting associated decisions. The proprietary nature of usage data limited deeper exploration of this subject in the past.Objective\nTo determine how software faults and software use are related and how, based on that, an accurate quality measure can be designed.Method\nVia Google Analytics we measure new users, usage intensity, usage frequency, exceptions, and release date and duration for complex proprietary mobile applications for Android and iOS. We utilize Bayesian Network and Random Forest models to explain the interrelationships and to derive the usage independent release quality measure. To increase external validity, we also investigate the interrelationship among various code complexity measures, usage (downloads), and number of issues for 520 NPM packages. We derived a usage-independent quality measure from these analyses, and applied it on 4430 popular NPM packages to construct timelines for comparing the perceived quality (number of issues) and our derived measure of quality during the lifetime of these packages.ResultsWe found the number of new users to be the primary factor determining the number of exceptions, and found no direct link between the intensity and frequency of software usage and software faults. Crashes increased with the power of 1.02-1.04 of new user for the Android app and power of 1.6 for the iOS app. Release quality expressed as crashes per user was independent of other usage-related predictors, thus serving as a usage independent measure of software quality. Usage also affected quality in NPM, where downloads were strongly associated with numbers of issues, even after taking the other code complexity measures into consideration. Unlike in mobile case where exceptions per user decrease over time, for 45.8% of the NPM packages the number of issues per download increase.Conclusions\nWe expect our result and our proposed quality measure will help gauge release quality of a software more accurately and inspire further research in this area.","authors":["Tapajit Dey","Audris Mockus"],"meta":["March 2020Empirical Software Engineering 25(3)","DOI:10.1007/s10664-019-09791-w","Project: Study of Users and Dependencies for NPM ecosystem"],"references":["335590798_Patterns_of_Effort_Contribution_and_Demand_and_User_Classification_based_on_Participation_Patterns_in_NPM_Ecosystem","324149427_An_Empirical_Analysis_of_Technical_Lag_in_npm_Package_Dependencies","324107421_npm-miner_An_Infrastructure_for_Measuring_the_Quality_of_the_npm_Registry","318868791_Why_do_developers_use_trivial_packages_an_empirical_case_study_on_npm","312484925_Understanding_the_Factors_That_Impact_the_Popularity_of_GitHub_Repositories","334255495_A_Methodology_for_Measuring_FLOSS_Ecosystems","328206232_Modeling_Relationship_between_Post-Release_Faults_and_Usage_in_Mobile_Software","328203981_Are_Software_Dependency_Supply_Chain_Metrics_Useful_in_Predicting_Change_of_Popularity_of_NPM_Packages","318393858_R_A_Language_and_Environment_for_Statistical_Computing","318393770_R_A_Language_and_Environment_for_Statistical_Computing","304017700_Understanding_the_Factors_that_Impact_the_Popularity_of_GitHub_Repositories","308730155_Investigating_code_review_quality_Do_people_and_participation_matter","303413505_A_look_at_the_dynamics_of_the_JavaScript_package_ecosystem","303099370_The_challenges_of_staying_together_while_moving_fast_an_exploratory_study","299868983_A_method_to_identify_and_correct_problematic_software_activity_data_exploiting_capacity_constraints_and_data_redundancies"]}