{"id":"221303508_Programming_with_Arrows","abstract":"Consider this simple Haskell definition, of a function which counts the number of occurrences of a given word w in a string:\ncount w = length . filter (==w) . words\nThis is an example of “point-free” programming style, where we build a function by composing others, and make heavy use of higher-order functions such as filter. Point-free programming is rightly popular: used appropriately, it makes for concise and readable definitions, which are well suited to equational reasoning in the style of Bird and Meertens [2]. It’s also a natural way to assemble programs from components, and closely related to connecting programs via pipes in the UNIX shell.","authors":["John Hughes"],"meta":["August 2004Lecture Notes in Computer Science","DOI:10.1007/11546382_2","SourceDBLP","Conference: Advanced Functional Programming, 5th International School, AFP 2004, Tartu, Estonia, August 14-21, 2004, Revised Lectures"],"references":["277298859_Arrows_and_computation","277291666_Arrows_for_Generic_Graphical_Editor_Components","244273034_Wobbly_types_type_inference_for_generalised_algebraic_data_types","243765534_A_calculus_of_functions_for_program_derivation","314828229_A_new_notation_for_arrows","314084003_Arrows_and_computation","269199773_QuickCheck","240445788_error_correcting_com_-_binator_parsers","222865821_Polytypic_Data_Conversion_Programs","222520426_Generalising_monads_to_arrows"]}