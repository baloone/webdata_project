{"id":"289999694_The_Expressiveness_of_CSP_With_Priority","abstract":"The author previously [A.W. Roscoe, On the expressiveness of CSP, https://www.cs.ox.ac.uk/files/1383/expressive.pdf, 2011; A.W. Roscoe, Understanding concurrent systems, Springer 2010] defined CSP-like operational semantics whose main restrictions were the automatic promotion of most Ï„ actions, no cloning of running processes, and no negative premises in operational semantic rules. He showed that every operator with such an operational semantics can be translated into CSP and therefore has a semantics in every model of CSP. In this paper we demonstrate that a similar result holds for CSP extended by the priority operator described in Chapter 20 of [A.W. Roscoe, Understanding concurrent systems, Springer 2010], with the restriction on negative premises removed.","authors":["A. W. Roscoe"],"meta":["December 2015Electronic Notes in Theoretical Computer Science 319:387-401","DOI:10.1016/j.entcs.2015.12.023"],"references":["238601242_On_the_expressiveness_of_CSP","286299203_FDR3_-_A_Modern_Refinement_Checker_for_CSP","266465042_TYGER_A_TOOL_FOR_AUTOMATICALLY_SIMULATING_CSP-LIKE_LANGUAGES_IN_CSP","262289896_Slow_Abstraction_via_Priority","258561035_Understanding_Concurrent_Systems","245805381_Communicating_Sequential_Processes","239038703_Roscoe_A_Theory_of_Communicating_Sequential_Process","234810724_Formal_definition_of_priority_in_CSP","226486917_The_meaning_of_negative_premises_in_transition_system_specifications","225666961_On_Cool_Congruence_Formats_for_Weak_Bisimulations"]}