{"id":"313112165_Parallel_programming_with_pictures_is_a_Snap","abstract":"For decades, computing speeds seemingly doubled every 24 months by increasing the processor clock speed, thus giving software a “free ride” to better performance. This free ride, however, effectively ended by the mid-2000s. With clock speeds having plateaued and computational horsepower instead increasing due to increasing the number of cores per processor, the vision for parallel computing, which started more than 40 years ago, is a revolution that has now (ubiquitously) arrived. In addition to traditional supercomputing clusters, parallel computing with multiple cores can be found in desktops, laptops, and even mobile smartphones.\nThis ubiquitous parallelism in hardware presents a major challenge: the difficulty in easily extracting parallel performance via current software abstractions. Consequently, this paper presents an approach that reduces the learning curve to parallel programming by introducing such concepts into a visual (but currently sequential) programming language called Snap!, which was inspired by MIT’s Scratch project. Furthermore, our proposed visual abstractions can automatically generate parallel code for the end user to run in parallel on a variety of platforms from personal computing devices to supercomputers. Ultimately, this work seeks to increase parallel programming literacy so that users, whether novice or experienced, may leverage a world of ubiquitous parallelism to enhance productivity in all walks of life, including the sciences, engineering, commerce, and liberal arts.","authors":["Annette Feng","Mark Gardner","Wu Feng"],"meta":["January 2017Journal of Parallel and Distributed Computing 105","DOI:10.1016/j.jpdc.2017.01.018","Project: Parallel Programming with Pictures"],"references":["253649794_The_analysis_of_visual_parallel_programming_languages","220426817_Scratch_Programming_for_All","313114348_Snapbuild_your_own_blocks"]}