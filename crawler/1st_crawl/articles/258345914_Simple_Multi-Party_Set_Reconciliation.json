{"id":"258345914_Simple_Multi-Party_Set_Reconciliation","abstract":"As users migrate information to cloud storage, many distributed cloud-based\nservices use multiple loosely consistent replicas of user information to avoid\nthe high overhead of more tightly coupled synchronization. Periodically, the\ninformation must be synchronized, or reconciled. One can place this problem in\nthe theoretical framework of {\\em set reconciliation}: two parties $A_1$ and\n$A_2$ each hold a set of keys, named $S_1$ and $S_2$ respectively, and the goal\nis for both parties to obtain $S_1 \\cup S_2$. Typically, set reconciliation is\ninteresting algorithmically when sets are large but the set difference\n$|S_1-S_2|+|S_2-S_1|$ is small. In this setting the focus is on accomplishing\nreconciliation efficiently in terms of communication; ideally, the\ncommunication should depend on the size of the set difference, and not on the\nsize of the sets.\nIn this paper, we extend recent approaches using Invertible Bloom Lookup\nTables (IBLTs) for set reconciliation to the multi-party setting. In this\nsetting there are three or more parties $A_1,A_2,\\ldots,A_n$ holding sets of\nkeys $S_1,S_2,\\ldots,S_n$ respectively, and the goal is for all parties to\nobtain $\\cup_i S_i$. This could of course be done by pairwise reconciliations,\nbut we seek more effective methods.\nOur methodology uses network coding techniques in conjunction with IBLTs,\nallowing efficiency in network utilization along with efficiency obtained by\npassing messages of size $O(|\\cup_i S_i - \\cap_i S_i|)$. Further, our approach\ncan function even if the number of parties is not exactly known in advance, and\nin many cases can be used to determine which parties contain keys not in the\njoint union. By connecting reconciliation with network coding, we can allow for\nsubstantially more efficient reconciliation methods that apply to a number of\nnatural distributed computing problems.","authors":["Michael Mitzenmacher","Rasmus Pagh"],"meta":["November 2018Distributed Computing 31(7)","DOI:10.1007/s00446-017-0316-0","SourcearXiv"],"references":["266656637_Robust_set_reconciliation","261170589_Invertible_Bloom_Lookup_Tables","346298312_The_Network_is_Reliable_An_informal_survey_of_real-world_communications_failures","308817330_Reconciling_similar_sets_of_data","300318324_Mixed_Hypergraphs_for_Linear-Time_Construction_of_Denser_Hashing-Based_Data_Structures","286323129_An_informal_survey_of_real-world_communications_failures","278639526_Dynamo","269269608_Subspace_synchronization_A_network-coding_approach_to_object_reconciliation","266798714_Multi-Party_Set_Reconciliation_Using_Characteristic_Polynomials","260740100_The_complexity_of_object_reconciliation_and_open_problems_related_to_set_difference_and_coding","256720527_Cores_of_random_r-partite_hypergraphs","242789493_New_gossips_and_telephones_Note","234812500_Fast_Probabilistic_Algorithms_for_Verification_of_Polynomial_Identities","229455470_A_Survey_of_Broadcasting_and_Gossiping_in_Communication_Networks","226532243_A_Fuzzy_Vault_scheme"]}