{"id":"309887017_Leveraging_Adaptive_IO_to_Optimize_Collective_Data_Shuffling_Patterns_for_Big_Data_Analytics","abstract":"Big data analytics is an indispensable tool in transforming science, engineering, medicine, health-care, finance and ultimately business itself. With the explosion of data sizes and need for shorter time-to-solution, in-memory platforms such as Apache Spark gain increasing popularity. In this context, data shuffling, a particularly difficult transformation pattern, introduces important challenges. Specifically, data shuffling is a key component of complex computations that has a major impact on the overall performance and scalability. Thus, speeding up data shuffling is a critical goal. To this end, state-of-the-art solutions often rely on overlapping the data transfers with the shuffling phase. However, they employ simple mechanisms to decide how much data and where to fetch it from, which leads to sub-optimal performance and excessive auxiliary memory utilization for the purpose of prefetching. The latter aspect is a growing concern, given evidence that memory per computation unit is continuously decreasing while interconnect bandwidth is increasing. This paper contributes a novel shuffle data transfer strategy that addresses the two aforementioned dimensions by dynamically adapting the prefetching to the computation. We implemented this novel strategy in Spark, a popular in-memory data analytics framework. To demonstrate the benefits of our proposal, we run extensive experiments on an HPC cluster with large core count per node. Compared with the default Spark shuffle strategy, our proposal shows: up to 40% better performance with 50% less memory utilization for buffering and excellent weak scalability.","authors":["Bogdan Nicolae","Carlos H. A. Costa","Claudia Misale","Kostas Katrinis"],"meta":["November 2016IEEE Transactions on Parallel and Distributed Systems PP(99):1-1","DOI:10.1109/TPDS.2016.2627558"],"references":["305524998_Towards_Memory-Optimized_Data_Shuffling_Patterns_for_Big_Data_Analytics","281782555_Towards_Transparent_Throughput_Elasticity_for_IaaS_Cloud_Storage_Exploring_the_Benefits_of_Adaptive_Block-Level_Caching","274387363_Leveraging_Naturally_Distributed_Data_Redundancy_to_Reduce_Collective_IO_Replication_Overhead","256620142_Understanding_Vertical_Scalability_of_IO_Virtualization_for_MapReduce_Workloads_Challenges_and_Opportunities","220360563_On_the_Benefits_of_Transparent_Compression_for_Cost-Effective_Cloud_Data_Storage","51965712_The_Efficiency_of_MapReduce_in_Parallel_External_Memory","45843632_BlobSeer_Next_Generation_Data_Management_for_Large_Scale_Infrastructures","345717151_Enabling_Big_Data_Analytics_in_the_Hybrid_Cloud_Using_Iterative_MapReduce","312775005_MapReduce_Simplified_data_processing_on_large_clusters","301426095_Improving_MapReduce_performance_in_heterogeneous_environments_with_adaptive_task_tuning","286584719_Accelerating_Spark_with_RDMA_for_Big_Data_Processing_Early_Experiences","280530103_SOR-HDFS_A_SEDA-based_Approach_to_Maximize_Overlapping_in_RDMA-Enhanced_HDFS","280136354_HOMR_A_Hybrid_Approach_to_Exploit_Maximum_Overlapping_in_MapReduce_over_High_Performance_Interconnects","278712204_The_Fourth_Paradigm_-_Data-Intensive_Scientific_Discovery","261446910_Workload_characterization_on_a_production_Hadoop_cluster_A_case_study_on_Taobao","234809508_An_Overview_of_DB2_Parallel_Edition","224605045_HPMR_Prefetching_and_pre-shuffling_in_shared_MapReduce_computation_environment","221212780_Encapsulation_of_Parallelism_in_the_Volcano_Query_Processing_System"]}