{"id":"280975109_CUDA-quicksort_An_improved_GPU-based_implementation_of_quicksort","abstract":"Sorting is a very important task in computer science and becomes a critical operation for programs making heavy use of sorting algorithms. General-purpose computing has been successfully used on Graphics Processing Units (GPUs) to parallelize some sorting algorithms. Two GPU-based implementations of the quicksort were presented in literature: the GPU-quicksort, a compute-unified device architecture (CUDA) iterative implementation, and the CUDA dynamic parallel (CDP) quicksort, a recursive implementation provided by NVIDIA Corporation. We propose CUDA-quicksort an iterative GPU-based implementation of the sorting algorithm. CUDA-quicksort has been designed starting from GPU-quicksort. Unlike GPU-quicksort, it uses atomic primitives to perform inter-block communications while ensuring an optimized access to the GPU memory. Experiments performed on six sorting benchmark distributions show that CUDA-quicksort is up to four times faster than GPU-quicksort and up to three times faster than CDP-quicksort. An in-depth analysis of the performance between CUDA-quicksort and GPU-quicksort shows that the main improvement is related to the optimized GPU memory access rather than to the use of atomic primitives. Moreover, in order to assess the advantages of using the CUDA dynamic parallelism, we implemented a recursive version of the CUDA-quicksort. Experimental results show that CUDA-quicksort is faster than the CDP-quicksort provided by NVIDIA, with better performance achieved using the iterative implementation. Copyright Â© 2015 John Wiley & Sons, Ltd.","authors":["Emanuele Manca","Andrea Manconi","Alessandro Orro","Giuliano Armano"],"meta":["August 2015Concurrency and Computation Practice and Experience 28(1)","DOI:10.1002/cpe.3611"],"references":["273383346_G-CNV_A_GPU-based_tool_for_preparing_data_to_detect_CNVs_with_read-depth_methods","262536613_GPU-BSM_a_GPU-based_tool_to_map_bisulfite-treated_reads","262370281_GPU-Abisort_Optimal_Parallel_Sorting_on_Stream_Architectures","228359315_A_cache-efficient_sorting_algorithm_for_database_and_data_mining_computations_using_graphics_processors","222505589_A_Randomized_Parallel_Sorting_Algorithm_With_an_Experimental_Study","221395578_Sorting_networks_and_their_applications","221215021_Fast_and_Approximate_Stream_Mining_of_Quantiles_and_Frequencies_Using_Graphics_Processors","220951290_Designing_efficient_sorting_algorithms_for_manycore_GPUs","220431482_Periodic_balanced_sorting_network","4245470_GPU-ABiSort_optimal_parallel_sorting_on_stream_architectures","2435538_Efficient_Conditional_Operations_for_Data-parallel_Architectures","291631791_UberFlow","228057768_Quicksort","225806341_A_Practical_Quicksort_Algorithm_for_Graphics_Processors","222516632_Fast_Parallel_GPU-sorting_using_a_Hybrid_Algorithm","221248971_UberFlow_a_GPU-based_particle_engine","220770642_A_Practical_Quicksort_Algorithm_for_Graphics_Processors","220639794_GPU-Quicksort_A_practical_Quicksort_algorithm_for_graphics_processors","202260509_Scan_Primitives_for_GPU_Computing","202260457_Parallel_prefix_sum_scan_with_CUDA","200018929_Photon_Mapping_on_Programmable_Graphics_Hardware","4005912_A_Simple_Fast_Parallel_Implementation_of_Quicksort_And_Its_Performance_Evaluation_on_SUN_Enterprise_10000","3885108_Efficient_conditional_operations_for_data-parallel_architectures","3042565_Parallel_Quicksort_Using_Fetch-And-Add"]}