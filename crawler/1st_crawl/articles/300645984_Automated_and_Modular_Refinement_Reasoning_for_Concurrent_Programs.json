{"id":"300645984_Automated_and_Modular_Refinement_Reasoning_for_Concurrent_Programs","abstract":"We present civl, a language and verifier for concurrent programs based on automated and modular refinement reasoning. civl supports reasoning about a concurrent program at many levels of abstraction. Atomic actions in a high-level description are refined to fine-grain and optimized lower-level implementations. A novel combination of automata theoretic and logic-based checks is used to verify refinement. Modular specifications and proof annotations, such as location invariants and procedure pre- and post-conditions, are specified separately, independently at each level in terms of the variables visible at that level. We have implemented civl as an extension to the boogie language and verifier. We have used civl to refine a realistic concurrent garbage collection algorithm from a simple high-level specification down to a highly-concurrent implementation described in terms of individual memory accesses.","authors":["Chris Hawblitzel","Erez Petrank","Shaz Qadeer","Serdar Tasiran"],"meta":["July 2015","DOI:10.1007/978-3-319-21668-3_26","Conference: International Conference on Computer Aided Verification"],"references":["262350163_Comprehensive_Formal_Verification_of_an_OS_Microkernel","262285691_Aspect-Oriented_Linearizability_Proofs","234800126_Tentative_Steps_Toward_a_Development_Method_for_Interfering_Programs","225727410_Boogie_A_Modular_Reusable_Verifier_for_Object-Oriented_Programs","225142568_Z3_an_efficient_SMT_solver","221602509_A_Basis_for_Verifying_Multi-threaded_Programs","221477308_Checking_Interference_with_Fractional_Permissions","221302273_VCC_A_Practical_System_for_Verifying_Concurrent_C","221105692_Thread-Modular_Model_Checking","220997401_A_Calculus_of_Atomic_Actions","220852239_Simplifying_Linearizability_Proofs_with_Reduction_and_Abstraction","220751785_VYRD_VerifYing_concurrent_programs_by_runtime_refinement-violation_detection","220404372_Types_for_atomicity_Static_checking_and_inference_for_Java","220298915_Checking_Concise_Specifications_for_Multithreaded_Software","213876653_The_Art_of_Multiprocessor_Programming","43652213_Rodin_An_Open_Toolset_for_Modelling_and_Reasoning_in_Event-B","2875861_Formal_Specification_and_Verification_of_a_Dataflow_Processor_Array","262241915_Rely-Guarantee-Based_Simulation_for_Compositional_Verification_of_Concurrent_Program_Transformations","242467469_Assigning_meaning_to_programs","239650062_Program_Development_by_Stepwise_Refinement","234786581_On-the-fly_Garbage_Collection_An_Exercise_in_Cooperation","222664509_Modular_verification_of_multithreaded_programs","222516942_Methodology_for_hardware_verification_using_compositional_model_checking","221602562_On_the_Relationship_Between_Concurrent_Separation_Logic_and_Assume-Guarantee_Reasoning","221292811_Weakest-precondition_of_unstructured_programs","220997556_A_Separation_Logic_for_Refining_Concurrent_Objects","220700351_A_Marriage_of_RelyGuarantee_and_Separation_Logic","220688513_Specifying_Systems_The_TLA_Language_and_Tools_for_Hardware_and_Software_Engineers","220673779_The_formal_design_of_1M-gate_ASICs","220426206_Reduction_A_Method_of_Proving_Properties_of_Parallel_Programs","220404758_Composing_Specifications","220197726_An_Axiomatic_Proof_Technique_for_Parallel_Programs_I","213886767_Hoare_CAR_An_axiomatic_basis_for_computer_programming_Commun_ACM_12_576-580","3965916_Separation_logic_A_logic_for_shared_mutable_data_structures","3635312_Computing_simulations_on_finite_and_infinite_graphs","2888551_Resources_Concurrency_and_Local_Reasoning","2819735_Scheduling_Multithreaded_Computations_by_Work_Stealing","2429119_Linear_Types_Can_Change_the_World"]}