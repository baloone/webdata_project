{"id":"315371728_Disjoint_interval_partitioning","abstract":"In databases with time interval attributes, query processing techniques that are based on sort-merge or sort-aggregate deteriorate. This happens because for intervals no total order exists and either the start or end point is used for the sorting. Doing so leads to inefficient solutions with lots of unproductive comparisons that do not produce an output tuple. Even if just one tuple with a long interval is present in the data, the number of unproductive comparisons of sort-merge and sort-aggregate gets quadratic. In this paper we propose disjoint interval partitioning (\\(\\mathcal {DIP}\\)), a technique to efficiently perform sort-based operators on interval data. \\(\\mathcal {DIP}\\) divides an input relation into the minimum number of partitions, such that all tuples in a partition are non-overlapping. The absence of overlapping tuples guarantees efficient sort-merge computations without backtracking. With \\(\\mathcal {DIP}\\) the number of unproductive comparisons is linear in the number of partitions. In contrast to current solutions with inefficient random accesses to the active tuples, \\(\\mathcal {DIP}\\) fetches the tuples in a partition sequentially. We illustrate the generality and efficiency of \\(\\mathcal {DIP}\\) by describing and evaluating three basic database operators over interval data: join, anti-join and aggregation.","authors":["Francesco Cafagna","Michael H. BÃ¶hlen"],"meta":["June 2017The VLDB Journal 26(2)","DOI:10.1007/s00778-017-0456-7"],"references":["281725966_A_GIS-based_data_analysis_platform_for_analyzing_the_time-varying_quality_of_animal_feed_and_its_impact_on_the_environment","262302322_GREEND_An_energy_consumption_dataset_of_households_in_Italy_and_Austria","256748478_Timeline_Index_A_Unified_Data_Structure_for_Processing_Queries_on_Temporal_Data_in_SAP_HANA","243961981_Timeline_Index_A_Unified_Data_Structure_for_Processing_Queries_on_Temporal_Data_in_SAP_HANA","345041381_Chapter_5_Intervals","313269519_Category-_and_Selection-Enabled_Nearest_Neighbor_Joins","304456674_An_interval_join_optimized_for_modern_hardware","266656596_Overlap_interval_partition_join","266342933_The_TSQL2_temporal_query_language","254006789_Temporal_alignment","221309807_Managing_Intervals_Efficiently_in_Object-Relational_Databases","238653345_Data-Cube_a_relational_aggregation_operator_generalizing_group-by","222542830_What's_in_a_crowd_Analysis_of_face-to-face_behavioral_networks","221311274_Temporal_Query_Processing_and_Optimization_in_Multiprocessor_Database_Machines","221310326_Event-Join_Optimization_in_Temporal_Relational_Databases"]}