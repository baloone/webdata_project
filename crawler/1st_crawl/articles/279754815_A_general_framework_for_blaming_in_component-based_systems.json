{"id":"279754815_A_general_framework_for_blaming_in_component-based_systems","abstract":"In component-based safety-critical embedded systems it is crucial to determine the cause(s) of the violation of a safety property, be it to issue a precise alert, to steer the system into a safe state, or to determine liability of component providers. In this paper we present an approach to blame components based on a single execution trace violating a safety property . The diagnosis relies on counterfactual reasoning (“what would have been the outcome if component C had behaved correctly?”) to distinguish component failures that actually contributed to the outcome from failures that had little or no impact on the violation of .","authors":["Gregor Gössler","Daniel Le Métayer"],"meta":["July 2015Science of Computer Programming 113","DOI:10.1016/j.scico.2015.06.010"],"references":["278797975_A_Causality_Analysis_Framework_for_Component-Based_Real-Time_Systems","262249156_Runtime_Verification_of_Traces_Under_Recording_Uncertainty","258330637_Counterfactual_dependency_and_actual_causation_in_CP-logic_and_structural_models_A_comparison","228338636_Distributed_Monitoring_of_Concurrent_and_Asynchronous_Systems","225368017_Explaining_Counterexamples_Using_Causality","221147505_From_Probabilistic_Counterexamples_via_Causality_to_Fault_Trees","220885208_Transforming_Privacy_Policies_to_Auditing_Specifications","220673835_Explaining_counterexamples_using_causality","220643513_Error_explanation_with_distance_metrics","47702349_Cause_Clue_Clauses_Error_Localization_using_Maximum_Satisfiability","3224353_A_Framework_for_Comparing_Models_of_Computation","3022357_Diagnosability_of_Discrete_Event_Systems","2984467_The_synchronous_data_flow_programming_language_LUSTRE","2632196_The_synchronous_dataflow_programming_language_LUSTRE","316637776_Why_Programs_Fail","314879591_Cause_clue_clauses_error_localization_using_maximum_satisfiability","286488694_Why_Programs_Fail","286227274_Blaming_in_component-based_real-time_systems","280751835_A_General_Trace-Based_Framework_of_Logical_Causality","279436400_How_Failures_Come_to_Be","277668452_An_Enquiry_Concerning_Human_Understanding","277512677_Cause_clue_clauses","270954015_Correct_blame_for_contracts","254051232_Automated_error_localization_and_correction_for_imperative_programs","235246955_Timestamps_in_message-passing_systems_that_preserve_partial_ordering","225643263_Composition_for_Component-Based_Modeling","225135009_Causality_Checking_for_Complex_System_Models","222443254_A_Theory_of_Diagnosis_from_First_Principles","221609440_Accountability_Definition_and_relationship_to_verifiability","221471827_Automatic_Fault_Localization_for_Property_Checking","220997185_Correct_Blame_for_Contracts_No_More_Scapegoating","220762733_Causality_Analysis_in_Contract_Violation","220573270_Finding_and_fixing_faults","220487167_Causes_and_Explanations_A_Structural-Model_Approach_Part_I_Causes","220130958_Composition_for_component-based_modeling","3226347_Automatic_Fault_Localization_for_Property_Checking","2949837_Virtual_Time_and_Global_States_of_Distributed_Systems"]}