{"id":"324075037_CLS-Miner_efficient_and_effective_closed_high-utility_itemset_mining","abstract":"High-utility itemset mining (HUIM) is a popular data mining task with applications in numerous domains. However, traditional HUIM algorithms often produce a very large set of high-utility itemsets (HUIs). As a result, analyzing HUIs can be very time consuming for users. Moreover, a large set of HUIs also makes HUIM algorithms less efficient in terms of execution time and memory consumption. To address this problem, closed high-utility itemsets (CHUIs), concise and lossless representations of all HUIs, were proposed recently. Although mining CHUIs is useful and desirable, it remains a computationally expensive task. This is because current algorithms often generate a huge number of candidate itemsets and are unable to prune the search space effectively. In this paper, we address these issues by proposing a novel algorithm called CLS-Miner. The proposed algorithm utilizes the utility-list structure to directly compute the utilities of itemsets without producing candidates. It also introduces three novel strategies to reduce the search space, namely chain-estimated utility co-occurrence pruning, lower branch pruning, and pruning by coverage. Moreover, an effective method for checking whether an itemset is a subset of another itemset is introduced to further reduce the time required for discovering CHUIs. To evaluate the performance of the proposed algorithm and its novel strategies, extensive experiments have been conducted on six benchmark datasets having various characteristics. Results show that the proposed strategies are highly efficient and effective, that the proposed CLS-Miner algorithmoutperforms the current state-ofthe- art CHUD and CHUI-Miner algorithms, and that CLSMiner scales linearly.","authors":["Thu-Lan Dam","Kenli Li","Philippe Fournier Viger","Quang-Huy Duong"],"meta":["March 2018Frontiers of Computer Science (electronic) 13(1)","DOI:10.1007/s11704-016-6245-4"],"references":["309055895_A_Parallel_Random_Forest_Algorithm_for_Big_Data_in_a_Spark_Cloud_Computing_Environment","301551772_An_efficient_algorithm_for_mining_the_top-k_high_utility_itemsets_using_novel_threshold_raising_and_pruning_strategies","292208266_An_efficient_algorithm_for_mining_top-rank-k_frequent_patterns","290759751_FHN_Efficient_Mining_of_High-Utility_Itemsets_with_Negative_Unit_Profits","286509910_A_high_utility_itemset_mining_algorithm_based_on_subsume_index","286345164_BAHUI_Fast_and_Memory_Efficient_Mining_of_High_Utility_Itemsets_Based_on_Bitmap","285766238_Mining_Closed_High_Utility_Itemsets_without_Candidate_Generation","282545681_Efficient_Algorithms_for_Mining_Top-K_High_Utility_Itemsets","307621847_FHN_An_Efficient_Algorithm_for_Mining_High-Utility_Itemsets_with_Negative_Unit_Profits","304367502_Top_Favorite_Probabilistic_Products_Queries"]}