{"id":"322375999_A_Survey_on_the_Usage_of_Eye-Tracking_in_Computer_Programming","abstract":"Traditional quantitative research methods of data collection in programming, such as questionnaires and interviews, are the most common approaches for researchers in this field. However, in recent years, eye-tracking has been on the rise as a new method of collecting evidence of visual attention and the cognitive process of programmers. Eye-tracking has been used by researchers in the field of programming to analyze and understand a variety of tasks such as comprehension and debugging. In this article, we will focus on reporting how experiments that used eye-trackers in programming research are conducted, and the information that can be collected from these experiments. In this mapping study, we identify and report on 63 studies, published between 1990 and June 2017, collected and gathered via manual search on digital libraries and databases related to computer science and computer engineering. Among the five main areas of research interest are program comprehension and debugging, which received an increased interest in recent years, non-code comprehension, collaborative programming, and requirements traceability research, which had the fewest number of publications due to possible limitations of the eye-tracking technology in this type of experiments. We find that most of the participants in these studies were students and faculty members from institutions of higher learning, and while they performed programming tasks on a range of programming languages and programming representations, we find Java language and Unified Modeling Language (UML) representation to be the most used materials. We also report on a range of eye-trackers and attention tracking tools that have been utilized, and find Tobii eye-trackers to be the most used devices by researchers.","authors":["Unaizah Obaidellah","Mohammed Al Haek","Peter Cheng"],"meta":["January 2018ACM Computing Surveys 51(1):1-58","DOI:10.1145/3145904","Project: A Quantitative Cognitive Assessment Approach on Students Perception of Programming Problems"],"references":["310772184_How_programmers_read_regular_code_a_controlled_experiment_using_eye_tracking","308733995_On_the_Comprehension_of_Code_Clone_Visualizations_A_Controlled_Study_using_Eye_Tracking","318494256_Analysing_and_Interpreting_Quantitative_Eye-Tracking_Data_in_Studies_of_Programming_Phases_of_Debugging_with_Multiple_Representations","318494158_Comparison_of_Three_Eye_Tracking_Devices_in_Psychology_of_Programming_Research","317802634_Investigating_Eye_Movements_in_Natural_Language_and_C_Source_Code_-_A_Replication_Experiment","317006578_Measuring_Cognitive_Load_using_Eye_Tracking_Technology_in_Visual_Computing","316708885_Improving_Communication_Between_Pair_Programmers_Using_Shared_Gaze_Awareness","313326136_Eye_Fixation_Metrics_for_Large_Scale_Evaluation_and_Comparison_of_Information_Visualizations","311492050_Towards_automating_fixation_correction_for_source_code","308732415_An_Empirical_Study_on_the_Patterns_of_Eye_Movement_during_Summarization_Tasks"]}