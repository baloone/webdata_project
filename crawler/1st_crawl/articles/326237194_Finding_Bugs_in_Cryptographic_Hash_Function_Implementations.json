{"id":"326237194_Finding_Bugs_in_Cryptographic_Hash_Function_Implementations","abstract":"Cryptographic hash functions are security-critical algorithms with many practical applications, notably in digital signatures. Developing an approach to test them can be particularly difficult, and bugs can remain unnoticed for many years. We revisit the National Institute of Standards and Technology hash function competition, which was used to develop the SHA-3 standard, and apply a new testing strategy to all available reference implementations. Motivated by the cryptographic properties that a hash function should satisfy, we develop four tests. The Bit-Contribution Test checks if changes in the message affect the hash value, and the Bit-Exclusion Test checks that changes beyond the last message bit leave the hash value unchanged. We develop the Update Test to verify that messages are processed correctly in chunks, and then use combinatorial testing methods to reduce the test set size by several orders of magnitude while retaining the same fault-detection capability. Our tests detect bugs in 41 of the 86 reference implementations submitted to the SHA-3 competition, including the rediscovery of a bug in all submitted implementations of the SHA-3 finalist BLAKE. This bug remained undiscovered for seven years, and is particularly serious because it provides a simple strategy to modify the message without changing the hash value returned by the implementation. We detect these bugs using a fully automated testing approach.","authors":["Nicky Mouha","M S Raunak","D. Richard Kuhn","Raghu Kacker"],"meta":["July 2018IEEE Transactions on Reliability PP(99):1-15","DOI:10.1109/TR.2018.2847247"],"references":["322261865_Metamorphic_Testing_A_Review_of_Challenges_and_Opportunities","296477118_A_Survey_on_Metamorphic_Testing","283730120_A_Survey_on_Tools_and_Techniques_for_the_Programming_and_Verification_of_Secure_Cryptographic_Software","283725438_Exciting_FPGA_Cryptographic_Trojans_using_Combinatorial_Testing","282715563_Evaluation_of_fault_detection_effectiveness_for_combinatorial_and_exhaustive_selection_of_discretized_test_inputs","281781697_Fault-Based_Testing_Without_the_Need_of_Oracles","276255185_The_Oracle_Problem_in_Software_Testing_A_Survey","273775170_A_Revisit_of_Three_Studies_Related_to_Random_Testing","267666405_Introduction_to_combinatorial_testing","244233777_Metamorphic_Testing_and_Its_Applications","225230142_How_to_Break_MD5_and_Other_Hash_Functions","221355615_Finding_Collisions_in_the_Full_SHA-1","31504539_On_Testing_Non-Testable_Programs","30816382_The_Lane_hash_function","3188430_Software_Fault_Interactions_and_Implications_for_Software_Testing","329322984_Handbook_of_Applied_Cryptography","312444190_Finding_Collisions_in_the_Full_SHA-1","309301354_Combinatorial_Methods_in_Security_Testing","303948512_Metamorphic_Testing_for_Cybersecurity","297247441_WHY_CRYPTOSYSTEMS_FAIL","272016286_A_property-based_testing_framework_for_encryption_programs","267224831_The_Hash_Function_Fugue","266661467_Why_does_cryptographic_software_fail_A_case_study_and_open_problems","261163819_Model-Based_Testing_of_Cryptographic_Components_--_Lessons_Learned_from_Experience","242424341_The_Hash_Function_Hamsi","240486276_Software_unit_test_coverage_and_adequacy","240446293_Handbook_of_Applied_Cryptography_Boca_Raton","234801059_Chapter_I_Notes_on_structured_programming","228362550_Sha-3_proposal_blake","220516264_IPOG-IPOG-D_Efficient_test_generation_for_multi-way_combinatorial_testing"]}