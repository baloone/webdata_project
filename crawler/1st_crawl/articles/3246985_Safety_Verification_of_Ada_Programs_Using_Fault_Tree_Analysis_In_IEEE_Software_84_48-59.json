{"id":"3246985_Safety_Verification_of_Ada_Programs_Using_Fault_Tree_Analysis_In_IEEE_Software_84_48-59","abstract":"The software fault-tree analysis technique is explained. It is then extended to allow its use on a more complex language involving such features as concurrency and exception handling. Ada is used as the example language because many safety-critical projects are using or planning to use Ada. It also contains complex, real-time programming facilities found in other languages used in these types of projects. Software fault-tree analysis uses failure-mode templates to generate the fault tree. The templates provided can be used to define the procedures for applying the technique to programs written in most other declarative languages. To explain the use of the templates an example Ada program, for a traffic-light-control system, is analyzed. The cost and practicality of the method and its implications for software reuse are assessed. The application of the safety analysis procedures to requirements modeling and specification languages is considered.< >","authors":["Nancy G. Leveson","Stephen Cha","Timothy Shimeall"],"meta":["August 1991IEEE Software 8(4):48 - 59","DOI:10.1109/52.300036","SourceIEEE Xplore","Project: Dissertation work"],"references":["245292433_An_application_of_fault_tree_analysis_to_safety_critical_software_at_Ontario_Hydro","235103923_Fault_Tree_Handbook","220566226_Software_Safety_Why_What_and_How","3189659_Analyzing_Software_Safety","3188887_Safety_Analysis_Using_Petri_Nets"]}