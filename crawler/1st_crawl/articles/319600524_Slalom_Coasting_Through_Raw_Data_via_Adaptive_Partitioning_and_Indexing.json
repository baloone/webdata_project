{"id":"319600524_Slalom_Coasting_Through_Raw_Data_via_Adaptive_Partitioning_and_Indexing","abstract":"The constant flux of data and queries alike has been pushing the boundaries of data analysis systems. The increasing size of raw data files has made data loading an expensive operation that delays the data-to-insight time. Hence, recent in-situ query processing systems operate directly over raw data, alleviating the loading cost. At the same time, analytical workloads have increasing number of queries. Typically, each query focuses on a constantly shifting -- yet small -- range. Minimizing the workload latency, now, requires the benefits of indexing in in-situ query processing.\nIn this paper, we present Slalom, an in-situ query engine that accommodates workload shifts by monitoring user access patterns. Slalom makes on-the-fly partitioning and indexing decisions, based on information collected by lightweight monitoring. Slalom has two key components: (i) an online partitioning and indexing scheme, and (ii) a partitioning and indexing tuner tailored for in-situ query engines. When compared to the state of the art, Slalom offers performance benefits by taking into account user query patterns to (a) logically partition raw data files and (b) build for each partition lightweight partition-specific indexes. Due to its lightweight and adaptive nature, Slalom achieves efficient accesses to raw data with minimal memory consumption. Our experimentation with both micro-benchmarks and real-life workloads shows that Slalom outperforms state-of-the-art in-situ engines (3 -- 10×), and achieves comparable query response times with fully indexed DBMS, offering much lower (∼ 3×) cumulative query execution times for query workloads with increasing size and unpredictable access patterns.","authors":["Matthaios Olma","Manos Karpathiotakis","Ioannis Alagiannis","Manos Athanassoulis"],"meta":["June 2017Proceedings of the VLDB Endowment 10(10):1106-1117","DOI:10.14778/3115404.3115415","Project: Efficient In-Situ Data Exploration"],"references":["316857849_NoDB_efficient_query_execution_on_raw_data_files","291102539_HYRISE","316848951_Alpine_Efficient_In-Situ_Data_Exploration_in_the_Presence_of_Updates","307897350_Fast_queries_over_heterogeneous_data_through_engine_customization","304021206_Design_Tradeoffs_of_Data_Access_Methods","304021176_UpBit_Scalable_In-Memory_Updatable_Bitmap_Indexing","301417673_External_Data_Access_And_Indexing_In_AsterixDB","300581098_Holistic_Indexing_in_Main-memory_Column-stores","291180338_DB2_Design_Advisor","287004750_Indexing_HDFS_data_in_PDW_Splitting_the_data_from_the_index"]}