{"id":"308841413_A_prototype-based_approach_for_managing_clones_in_clone-and-own_product_lines","abstract":"Feature models are commonly used in industrial contexts to guide and automate the derivation of product variants. However, in real-world product lines the derivation process goes beyond selecting and composing product features. Specifically, developers often perform clone-and-own reuse, i.e., they copy, modify, and extend existing code to provide the functionality required by customers. Clones are created at different levels of granularity, ranging from individual features to entire systems. Refactoring and reverse engineering approaches have been proposed for dealing with cloned product variants. However, managing clones has not been addressed in the context of feature models. For instance, if clones are created to address customer requirements in specific product variants, the connection to the original feature models is frequently lost. We thus present a modeling approach based on prototypes, i.e., prefabricated objects from which clones are created. Our approach allows to manage prototypes and their clones at the levels of products, components, and features. We use compliance levels to define the required level of consistency between prototypes and clones. We further adapt an existing consistency checking framework for detecting inconsistent clones when the product line evolves. Our approach uses feature-to-code mappings to determine the impact of changes on code elements. We present a case study illustrating prototypes, clones, and compliance levels in selected development scenarios of our industry partner's product line. We also discuss the use of static code analysis techniques to support engineers in determining the impact of changed prototypes on affected clones, an area we plan to address in our future work.","authors":["Daniela Rabiser","Paul Grünbacher","Herbert Prähofer","Florian Angerer"],"meta":["September 2016","DOI:10.1145/2934466.2934487","Conference: the 20th International Systems and Software Product Line Conference"],"references":["284505257_Identifying_inactive_code_in_product_lines_with_configuration-aware_system_dependence_graphs","276501519_Coevolution_of_variability_models_and_related_software_artifacts_A_fresh_look_at_evolution_patterns_in_the_Linux_kernel","271551399_The_vision_of_software_clone_management_Past_present_and_future_Keynote_paper","266656682_Flexible_product_line_engineering_with_a_virtual_platform","235778971_Default_values_for_improved_product_line_management","228876240_Composition_and_Cloning_in_Modeling_and_Meta-Modeling","225266655_Staged_Configuration_Using_Feature_Models","224344059_Frontiers_of_Software_Clone_Management","221554683_Taming_Dynamically_Adaptive_Systems_using_models_and_aspects","221321279_Prototype-Based_Languages_From_a_New_Taxonomy_to_Constructive_Proposals_and_Their_Validation","221108601_Tailoring_Dynamic_Software_Product_Lines","221034658_A_Catalog_of_Patterns_for_Program_Generation","220789558_Default_values_for_improved_product_line_management","30815550_Generic_modelling_of_code_clones","4349664_Scenario-Based_Comparison_of_Clone_Detection_Techniques","345765046_Tailoring_dynamic_software_product_lines","319393380_Pro_Git","308917848_Aligning_Coevolving_Artifacts_Between_Software_Product_Lines_and_Products","308567817_Feature_modeling_of_two_large-scale_industrial_software_systems_Experiences_and_lessons_learned","305260621_Dimensions_of_Object-Based_Language_Design","304286914_Configuration-Aware_Change_Impact_Analysis_T","301978049_BVR_-_Better_Variability_Results","301465685_Using_Feature_Feeds_to_Improve_Developer_Awareness_in_Software_Ecosystem_Evolution","289070038_Enhancing_Clone-and-Own_with_Systematic_Reuse_for_Developing_Software_Variants","287543651_Software_Evolution_in_an_Industrial_Automation_Ecosystem_An_Exploratory_Study","283008830_Model-Based_Co-Evolution_of_Production_Systems_and_their_Libraries_with_AutomationML","281577994_Cloned_product_variants_from_ad-hoc_to_managed_software_product_lines","266658827_A_case_study_on_software_ecosystem_characteristics_in_industrial_automation_software","261487867_Applying_clone_change_notification_system_into_an_industrial_development_process","261120984_An_Exploratory_Study_of_Cloning_in_Industrial_Software_Product_Lines","260648882_Determining_the_Cause_of_a_Design_Model_Inconsistency","258969396_Custom-Developed_vs_Model-based_Configuration_Tools_Experiences_from_an_Industrial_Automation_Ecosystem","257468372_Facilitating_the_evolution_of_products_in_product_line_engineering_by_capturing_and_replaying_configuration_decisions","251513487_Model-driven_support_for_product_line_evolution_on_feature_level","235630942_Applying_a_Consistency_Checking_Framework_for_Heterogeneous_Models_and_Artifacts_in_Industrial_Product_Lines","233344499_FeatureIDE_An_Extensible_Framework_for_Feature-Oriented_Software_Development","224256708_Clone_Management_for_Evolving_Software","223064423_Key_activities_for_product_derivation_in_software_product_lines","221320954_Dimensions_of_Object-Based_Language_Design","220695668_Software_Product_Lines_in_Action_The_Best_Industrial_Practice_in_Product_Line_Engineering","220693462_Software_Product_Line_Engineering_Foundations_Principles_and_Techniques","220542223_Formalizing_cardinality-based_feature_models_and_their_specialization","213882667_Generative_Programming_Methods_Tools_and_Applications","36826385_Object-Oriented_Programming_with_Prototypes","3506141_Tolerating_Inconsistency","2866111_Prototype-Based_Languages"]}