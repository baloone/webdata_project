{"id":"220919153_Avoiding_Infinite_Recursion_with_Stratified_Aspects","abstract":"Infinite recursion is a known problem of aspect-oriented programming with AspectJ: if no special precautions are taken, aspects advising aspects can eas- ily and unintentionally advise themselves. We present a compiler for an extension of the AspectJ programming language that avoids self reference by associating as- pects with levels, and by automatically restricting the scope of pointcuts used by an aspect to join points of lower levels. We report on a case study using our language extension, and provide numbers of the changes necessary for migrating existing applications to it. Our results suggest that we can make programming with AspectJ simpler and safer, without restricting its expressive power unduly.","authors":["Eric Bodden","Florian Forster","Friedrich Steimann"],"meta":["January 2006","SourceDBLP","Conference: Conference Proceedings NODe 2006, GSEM 2006, Erfurt, Germany, September 18-20, 2006"],"references":["24162319_Program_monitoring_with_LTL_in_EAGLE","4200501_Classpects_Unifying_aspect-_and_object-oriented_language_design","2436142_Avoiding_Confusion_in_Metacircularity_The_Meta-Helix","228935998_Programming_with_join_point_types_and_polymorphic_pointcuts","228935839_AOP_and_the_antinomy_of_the_liar","221014729_A_Case_for_Statically_Executable_Advice_Checking_the_Law_of_Demeter_with_AspectJ","220868262_Domain_Models_Are_Aspect_Free"]}