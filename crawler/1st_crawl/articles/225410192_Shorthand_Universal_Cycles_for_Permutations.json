{"id":"225410192_Shorthand_Universal_Cycles_for_Permutations","abstract":"The set of permutations of 〈n〉={1,…,n} in one-line notation is Π(n). The shorthand encoding of a\n1⋯a\n\nn\n∈Π(n) is a\n1⋯a\n\nn−1. A shorthand universal cycle for permutations (SP-cycle) is a circular string of length n! whose substrings of length n−1 are the shorthand encodings of Π(n). When an SP-cycle is decoded, the order of Π(n) is a Gray code in which successive permutations differ by the prefix-rotation σ\n\ni\n=(1 2 ⋯ i) for i∈{n−1,n}. Thus, SP-cycles can be represented by n! bits. We investigate SP-cycles with maximum and minimum ‘weight’ (number of σ\n\nn−1s in the Gray code). An SP-cycle n\na\nn\nb⋯n\nz is ‘periodic’ if its ‘sub-permutations’ a,b,…,z equal Π(n−1). We prove that periodic min-weight SP-cycles correspond to spanning trees of the (n−1)-permutohedron. We provide two constructions: B(n) and C(n). In B(n) the spanning trees use ‘half-hunts’ from bell-ringing, and in C(n) the sub-permutations use cool-lex order by Williams (SODA, 987–996, 2009). Algorithmic results are: (1)memoryless decoding of B(n) and C(n), (2)O((n−1)!)-time generation of B(n) and C(n) using sub-permutations, (3)loopless generation of B(n)’s binary representation n bits at a time, and (4)O(n+ν(n))-time ranking of B(n)’s permutations where ν(n) is the cost of computing a permutation’s inversion vector. Results (1)–(4) improve on those for the previous SP-cycle construction\nD(n) by Ruskey and Williams (ACM Trans. Algorithms 6(3):Art.45, 2010), which we characterize here using ‘recycling’.\n\nKeywordsUcycles–Gray codes–Cayley graphs–Permutohedron–Algorithms","authors":["Alexander E. Holroyd","Frank Ruskey","Aaron Williams"],"meta":["October 2012Algorithmica 64(2):1-31","DOI:10.1007/s00453-011-9544-z"],"references":["267307305_Shift_Gray_Codes","225726708_Optimal_sequences_of_trials_for_balancing_practice_and_repetition_effects","265362895_Generation_of_Permutations_by_Adjacent_Transposition","262155109_Satisfiability_and_The_Art_of_Computer_Programming","256158111_Universal_cycles_of_k-subsets_and_k-permutations","247442902_Introduction_To_Algorithms","243119652_Generation_of_permutations_by_adjacent_transposition","235127121_The_Art_of_Computer_Programming","234783968_The_Art_of_Computer_Programming_Volume_4_Fascicle_2_Generating_All_Tuples_and_Permutations_Art_of_Computer_Programming","232843917_Doubly_Adjacent_Gray_Codes_for_the_Symmetric_Group","221427288_Faster_Generation_of_Shorthand_Universal_Cycles_for_Permutations","220779544_Loopless_Generation_of_Multiset_Permutations_using_a_Constant_Number_of_Variables_by_Prefix_Shifts","225035603_Introduction_to_Algorithms_Second_Edition","222561080_Optimised_De_Bruijn_patterns_for_one-shot_shape_acquisition","220565949_Permutation_Generation_Methods"]}