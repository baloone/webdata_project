{"id":"315536050_Parallelizing_maximal_clique_and_k-plex_enumeration_over_graph_data","abstract":"In a wide variety of emerging data-intensive applications, such as social network analysis, Web document clustering, entity resolution, and detection of consistently co-expressed genes in systems biology, the detection of dense subgraphs cliques and k-plex is an essential component. Unfortunately, these problems are NP-Complete and thus computationally intensive at scale — hence there is a need to come up with techniques for distributing the computation across multiple machines such that the computation, which is too time-consuming on a single machine, can be efficiently performed on a machine cluster given that it is large enough.\nIn this paper, we first propose a new approach for maximal clique and k-plex enumeration, which identifies dense subgraphs by binary graph partitioning. Given a connected graph G=(V,E), it has a space complexity of O(|E|) and a time complexity of O(|E|μ(G)), where μ(G) represents the number of different cliques (k-plexes) existing in G. It recursively divides a graph until each task is sufficiently small to be processed in parallel. We then develop parallel solutions and demonstrate how graph partitioning can enable effective load balancing. Finally, we evaluate the performance of the proposed approach on real and synthetic graph data and show that it performs considerably better than existing approaches in both centralized and parallel settings. In the parallel setting, it can achieve the speedups of up to 10x over existing approaches on large graphs. Our parallel algorithms are primarily implemented and evaluated on MapReduce, a popular shared-nothing parallel framework, but can easily generalize to other shared-nothing or shared-memory parallel frameworks. The work presented in this paper is an extension of our preliminary work on the approach of binary graph partitioning for maximal clique enumeration. In this work, we extend the proposed approach to handle maximal k-plex detection as well.","authors":["Zhuo Wang","Qun Chen","Boyi Hou","Bo Suo"],"meta":["March 2017Journal of Parallel and Distributed Computing 106","DOI:10.1016/j.jpdc.2017.03.003"],"references":["233251812_A_graph-theoretic_generalization_of_the_clique_concept","221214912_Finding_Maximal_Cliques_in_Massive_Networks_by_H-graph","220243844_Clique_Relaxations_in_Social_Network_Analysis_The_Maximum_k-Plex_Problem","220088972_Combinatorial_algorithms_for_the_maximum_k-plex_problem","51083566_Using_graph_theory_to_analyze_biological_networks","312600697_Algorithm_457_Finding_all_cliques_of_an_undirected_graph","226427482_Finding_All_Maximal_Cliques_in_Dynamic_Graphs","222515112_A_note_on_the_problem_of_reporting_maximal_cliques","222436546_The_Worst-Case_Time_Complexity_for_Generating_All_Maximal_Cliques_and_Computational_Experiments","222249817_A_scalable_parallel_algorithm_for_maximal_clique_enumeration","221209557_New_Algorithms_for_Enumerating_All_Maximal_Cliques","221024561_A_Method_for_Pinpoint_Clustering_of_Web_Pages_with_Pseudo-Clique_Search","220617565_A_New_Algorithm_for_Generating_All_the_Maximal_Independent_Sets","220617027_Arboricity_and_Subgraph_Listing_Algorithms","220616822_The_Enumeration_of_Maximal_Cliques_of_Large_Graphs","220094028_Graph_Twiddling_in_a_MapReduce_World"]}