{"id":"221555634_Program_Slicing","abstract":"Program slicing is a method for automatically decomposing programs by analyzing their data flow and control flow. Starting from a subset of a program's behavior, slicing reduces that program to a minimal form which still produces that behavior. The reduced program, called a ``slice,'' is an independent program guaranteed to represent faithfully the original program within the domain of the specified subset of behavior. Some properties of slices are presented. In particular, finding statement-minimal slices is in general unsolvable, but using data flow analysis is sufficient to find approximate slices. Potential applications include automatic slicing tools for debuggng and parallel processing of slices.","authors":["Mark Weiser"],"meta":["January 1981IEEE Transactions on Software Engineering SE-10(4):439-449","DOI:10.1109/TSE.1984.5010248","SourceDBLP","Conference: Proceedings of the 5th international conference on Software engineering"],"references":["275406603_Dynamic_Analysis_of_Execution_-_Possibilities_Techniques_and_Problems","313580789_Program_slicing","311476395_Abstraction_mechanisms_in_CLU","247477595_Selecting_data_flow_integration_testing","243480370_Practical_Strategies_for_Developing_Large_Software_Systems","239723318_Syntactic_Source_to_Source_Program_Transformations_and_Program_Manipulation","238758018_The_translation_of_'goto'_programs_to_'while'_programs","234820112_Program_reduction_using_symbolic_execution","234805324_Preliminary_ADA_reference_manual","229963504_Implementing_data_abstraction_features_in_a_stack-based_language","221556059_FAST_A_Second_Generation_Program_Analysis_System","220997417_Program_Improvement_by_Source_to_Source_Transformation","220997398_Correctness-Preserving_Program_Transformations","220688555_The_Design_and_Analysis_Computer_Algorithms","220566162_Data_Flow_Analysis_In_Software_Reliability","220431594_A_Fast_and_Usually_Linear_Algorithm_for_Global_Flow_Analysis","220430999_Program_Improvement_by_Source-to-Source_Transformation","220430590_An_Algorithm_for_Structuring_Flowgraphs","220424394_A_Practical_Interprocedural_Data_Flow_Analysis_Algorithm","220404824_A_Fast_Algorithm_for_Finding_Dominators_in_a_Flowgraph","220197851_Ordered_Attributed_Grammars","220071054_An_Introduction_to_the_Construction_and_Verification_of_Alphard_Programs","213888035_Certification_of_programs_for_secure_information_flow","213883347_An_efficient_way_to_find_side_effects_of_procedure_calls_and_aliases_of_variables","33741878_Program_slices_Formal_psychological_and_practical_investigations_of_an_automatic_program_abstraction_method","3189019_An_introduction_to_the_construction_and_verification_of_ALPHARD_programs","3188982_Goal-Directed_Program_Transformation","2959509_An_Investigation_of_Human_Factors_in_Software_Development"]}