{"id":"262165850_Evaluation_of_Android_Dalvik_virtual_machine","abstract":"More than half of the smart phones world-wide are currently employing the Android platform, which employs Java for programming its applications. The Android Java is to be executed by the Dalvik virtual machine (VM), which is quite different from the traditional Java VM such as Oracle's HotSpot VM. That is, Dalvik employs register-based bytecode while HotSpot employs stack-based bytecode, requiring a different way of interpretation. Also, Dalvik uses trace-based just-in-time compilation (JITC), while HotSpot uses method-based JITC. Therefore, it is questioned how the Dalvik VM performs compared the HotSpot VM. Unfortunately, there has been little comparative evaluation of both VMs, so the performance of the Dalvik VM is not well understood. More importantly, it is also not well understood how the performance of the Dalvik VM affects the overall performance of the Android applications (apps). In this paper, we make an attempt to evaluate the Dalvik VM. We install both VMs on the same board and compare the performance using EEMBC benchmark. Our results show that Dalvik slightly outperforms HotSpot in the interpreter mode due to its register-based bytecode. In the JITC mode, however, Dakvik is slower than HotSpot by more than 2.9 times and its generated code size is not smaller than HotSpot's due to its worse code quality and trace-chaining code. We also investigated how real Android apps are different from Java benchmarks, to understand why the slow Dalvik VM does not affect the performance of the Android apps seriously.","authors":["Hyeong-Seok Oh","Beom-Jun Kim","Hyung-Kyu Choi","Soo-Mook Moon"],"meta":["October 2012","DOI:10.1145/2388936.2388956","Conference: Proceedings of the 10th International Workshop on Java Technologies for Real-time and Embedded Systems"],"references":["224001215_The_Java_Language_Specification","220751959_Trace-based_Just-in-Time_Type_Specialization_for_Dynamic_Languages","220169951_Design_of_the_Java_HotSpot_client_compiler_for_Java_6","200040271_A_Survey_of_Adaptive_Optimization_in_Virtual_Machines","2560481_Dynamo_A_Transparent_Dynamic_Optimization_System","277465085_Virtual_machine_showdown","221320672_Reducing_Trace_Selection_Footprint_for_Large-scale_Java_Applications_without_Performance_Loss","220566312_A_Brief_History_of_Just-In-Time","200040508_Virtual_Machine_Showdown_Stack_Versus_Registers","200040347_HotpathVM_An_Effective_JIT_Compiler_for_Resource-constrained_Devices"]}