{"id":"220118508_A_Structural_Approach_to_Operational_Semantics","abstract":"A simple and direct method for specifying the semantics of programing languages was discussed. The method was intended to produce concise comprehensible semantic definitions. The 'symbol pushing' nature of the operational method specified semantics based on semantic transformations of programs and simple operation on discrete data. The method was found to be highly efficient in automatic handling of run-time errors and debugging. It was found that a finite memory and compile-time type-checking was necessary to make the system efficient.","authors":["Gordon D. Plotkin"],"meta":["July 2004Journal of Logic and Algebraic Programming 60-61:17-139","DOI:10.1016/j.jlap.2004.05.001","SourceDBLP"],"references":["267010969_Program_semantics_and_mechanized_proof","266062848_Report_on_the_algorithmic_language_ALGOL_68","234805922_A_correspondence_between_ALGOL_60_and_Church's_Lambda-notations_Part_II","220687925_Theory_of_Program_Structures_Schemes_Semantics_Verification","220687158_Methods_for_Specifying_Static_Semantics","220566668_A_Sampler_of_Formal_Definitions","220197561_Locations_Considered_Unnecessary"]}