{"id":"300489758_Fault_Tolerant_BFS_Structures","abstract":"This paper initiates the study of fault resilient network structures that mix two orthogonal protection mechanisms:(a) backup, namely, augmenting the structure with many (redundant) low-cost but fault-prone components, and (b) reinforcement, namely, acquiring high-cost but fault-resistant components. To study the trade-off between these two mechanisms in a concrete setting, we address the problem of designing a (b,r) fault-tolerant BFS (or (b,r) FT-BFS for short) structure,namely, a subgraph H of the network G consisting of two types of edges: a set E' ⊆ E of r(n) fault-resistant reinforcement edges, which are assumed to never fail, and a (larger) set E(H) \\ E' of b(n) fault-prone backup edges, such that subsequent to the failure of a single fault-prone backup edge e ∈ E \\ E', the surviving part of H still contains a BFS spanning tree for (the surviving part of) G, satisfying dist(s,v,H\\{e}) ≤ dist(s,v,G \\{e}) for every v ∈ V and e ∈ E \\ E'.We establish the following tradeoff: For every real ε ∈ (0,1], if r(n) = Θ(n1-ε),then b(n) = Θ(n{1+ε) is necessary and sufficient.More specifically, as shown in ESA'13, for ε=1, FT-BFS structures (with no reinforced edges) require Θ(n3/2) edges, and this is sufficient. At the other extreme, if ε=0, then n-1 reinforced edges suffice (with no need for backup). Here, we present a polynomial time algorithm that given an undirected graph G=(V,E), a source vertex s and a real ε ∈ (0,1], constructs a (b(n),r(n)) FT-BFS with r(n) = O(n1-ε) and b(n) = O(min{1/ε • n1+ε • log n, n3/2). We complement this result by providing a nearly matching lower bound, showing that there are n-vertex graphs for which any (b(n),r(n)) FT-BFS structure requires Ω(min{n{1+ε, n3/2}) backup edges when r(n)=Ω(n1-ε) edges are reinforced.","authors":["Merav Parter","David Peleg"],"meta":["June 2015","DOI:10.1145/2755573.2755590","Conference: the 27th ACM"],"references":["275054743_Fault_Tolerant_BFS_Structures_A_Reinforcement-Backup_Tradeoff","264497911_Vertex_Fault_Tolerant_Additive_Spanners","235666546_Sparse_Fault-Tolerant_BFS_Trees","221590599_A_Data_Structure_for_Dynamic_Trees","221543746_Improved_Approximation_for_Single-Sink_Buy-at-Bulk","220994413_Approximate_Shortest_Paths_Avoiding_a_Failed_Vertex_Optimal_Size_Data_Structures_for_Unweighted_Graph","220779190_Buy-at-Bulk_Network_Design_Approximating_the_Single-Sink_Edge_Installation_Problem","220616857_Fault_Tolerant_Spanners_for_General_Graphs","220431113_Approximation_via_cost_sharing_Simpler_and_better_approximation_algorithms_for_network_design","41547048_A_Nearly_Optimal_Oracle_for_Avoiding_Failed_Vertices_and_Edges","2584715_New_Results_on_Fault_Tolerant_Geometric_Spanners","266961815_Fault_Tolerant_Additive_Spanners","261211957_Improved_Distance_Sensitivity_Oracles_via_Fast_Single-Source_Replacement_Paths","228652143_Approximation_Algorithms_for_Non-Uniform_Buy-at-Bulk_Network_Design","225644726_Fault-Tolerant_Geometric_Spanners","221498848_Replacement_Paths_via_Fast_Matrix_Multiplication","220617891_Approximation_Algorithms_for_Nonuniform_Buy-at-Bulk_Network_Design","48198667_Fault-Tolerant_Spanners_Better_and_Simpler","3728304_Buy-at-Bulk_Network_Design","2935062_Approximate_Distance_Oracles","2428617_Efficient_Algorithms_for_Constructing_Fault-Tolerant_Geometric_Spanners"]}