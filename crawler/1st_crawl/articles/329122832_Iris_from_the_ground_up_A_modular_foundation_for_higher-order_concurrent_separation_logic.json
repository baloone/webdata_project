{"id":"329122832_Iris_from_the_ground_up_A_modular_foundation_for_higher-order_concurrent_separation_logic","abstract":"Iris is a framework for higher-order concurrent separation logic, which has been implemented in the Coq proof assistant and deployed very effectively in a wide variety of verification projects. Iris was designed with the express goal of simplifying and consolidating the foundations of modern separation logics, but it has evolved over time, and the design and semantic foundations of Iris itself have yet to be fully written down and explained together properly in one place. Here, we attempt to fill this gap, presenting a reasonably complete picture of the latest version of Iris (version 3.1), from first principles and in one coherent narrative.","authors":["RALF JUNG","ROBBERT KREBBERS","JACQUES-HENRI JOURDAN","ALEÅ  BIZJAK"],"meta":["January 2018Journal of Functional Programming 28","DOI:10.1017/S0956796818000151"],"references":["334751645_Mechanized_relational_verification_of_concurrent_programs_with_continuations","330149481_Iron_managing_obligations_in_higher-order_concurrent_separation_logic","326729618_MoSeL_a_general_extensible_modal_framework_for_interactive_proofs_in_separation_logic","324582857_On_Models_of_Higher-Order_Separation_Logic","326026925_ReLoC_A_Mechanised_Relational_Logic_for_Fine-Grained_Concurrency","325142264_Mechanized_Verification_of_Fine-Grained_Concurrent_Programs","323027193_A_Separation_Logic_for_Concurrent_Randomized_Programs","322133414_A_logical_relation_for_monadic_encapsulation_of_state_proving_contextual_equivalences_in_the_presence_of_runST","322133305_RustBelt_Securing_the_Foundations_of_the_Rust_Programming_Language","321146582_Bringing_Order_to_the_Separation_Logic_Jungle"]}