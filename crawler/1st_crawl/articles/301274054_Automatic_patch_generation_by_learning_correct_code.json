{"id":"301274054_Automatic_patch_generation_by_learning_correct_code","abstract":"We present Prophet, a novel patch generation system that works with a set of successful human patches obtained from open- source software repositories to learn a probabilistic, application-independent model of correct code. It generates a space of candidate patches, uses the model to rank the candidate patches in order of likely correctness, and validates the ranked patches against a suite of test cases to find correct patches. Experimental results show that, on a benchmark set of 69 real-world defects drawn from eight open-source projects, Prophet significantly outperforms the previous state-of-the-art patch generation system.","authors":["Fan Long","Martin Rinard"],"meta":["January 2016ACM SIGPLAN Notices 51(1):298-312","DOI:10.1145/2914770.2837617"],"references":["277334296_Automatic_Repair_of_Real_Bugs_An_Experience_Report_on_the_Defects4J_Dataset","264673563_A_Critical_Review_of_Automatic_Patch_Generation_Learned_from_Human-Written_Patches_Essay_on_the_Problem_Statement_and_the_Evaluation_of_Automatic_Software_Repair","261598130_Automatic_Repair_of_Buggy_If_Conditions_and_Missing_Preconditions_with_SMT","260424732_The_Strength_of_Random_Search_on_Automated_Program_Repair","258499614_Mining_Software_Repair_Models_for_Reasoning_on_the_Search_Space_of_Automated_Program_Fixing","253239334_Cost-Aware_Automatic_Program_Repair","241632971_Automated_repair_of_HTML_generation_errors_in_PHP_applications_using_string_constraint_solving","220910210_Automatically_Patching_Errors_in_Deployed_Software","47702349_Cause_Clue_Clauses_Error_Localization_using_Maximum_Satisfiability","314879591_Cause_clue_clauses_error_localization_using_maximum_satisfiability","311488076_Predicting_Program_Properties_from_Big_Code","308858592_Safe_Memory-Leak_Fixing_for_C_Programs","304286697_Fixing_Recurring_Crash_Bugs_via_Analyzing_QA_Sites_T","300645911_Deductive_Program_Repair","299909645_Staged_program_repair_with_condition_synthesis","297621196_RIFL_a_language_with_filtered_iterators","279843860_Staged_Program_Repair_in_SPR_Supplementary_Material","279835627_Automatic_Error_Elimination_by_Multi-Application_Code_Transfer","279835496_An_Analysis_of_Patch_Plausibility_and_Correctness_for_Generate-And-Validate_Patch_Generation_Systems","278646452_DieHard","277512677_Cause_clue_clauses","266657664_Automatic_Runtime_Error_Repair_and_Containment_via_Recovery_Shepherding","262284670_Bolt_on-demand_infinite_loop_escape_in_unmodified_binaries","261960325_Sound_Input_Filter_Generation_for_Integer_Overflow_Errors","261276659_Leveraging_program_equivalence_for_adaptive_program_repair_Models_and_first_results","261230128_Automatic_patch_generation_learned_from_human-written_patches","261166224_SemFix_Program_repair_via_semantic_analysis","254041670_A_systematic_study_of_automated_program_repair_Fixing_55_out_of_105_bugs_for_8_each","234801914_Enhancing_server_availability_and_security_through_failure-oblivious_computing","229069637_Automatic_Input_Rectification","228863627_Inference_and_enforcement_of_data_structure_consistency_specifications","221553687_Angelic_debugging","221553516_Automatically_finding_patches_using_genetic_programming","221542024_Changing_Java's_Semantics_for_Handling_Null_Pointer_Exceptions","220854671_Inference_and_enforcement_of_data_structure_consistency_specifications","220752345_DieHard_Probabilistic_memory_safety_for_unsafe_languages","3189704_Goal-Directed_Reasoning_for_Specification-Based_Data_Structure_Repair","3188209_Simplifying_and_Isolating_Failure-Inducing_Input"]}