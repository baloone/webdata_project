{"id":"319374324_Gradual_typing_with_union_and_intersection_types","abstract":"We propose a type system for functional languages with gradual types and set-theoretic type connectives and prove its soundness. In particular, we show how to lift the definition of the domain and result type of an application from non-gradual types to gradual ones and likewise for the subtyping relation. We also show that deciding subtyping for gradual types can be reduced in linear time to deciding subtyping on non-gradual types and that the same holds true for all subtyping-related decision problems that must be solved for type inference. More generally, this work not only enriches gradual type systems with unions and intersections and with the type precision that arise from their use, but also proposes and advocates a new style of gradual types programming where union and intersection types are used by programmers to instruct the system to perform fewer dynamic checks.","authors":["Giuseppe Castagna","Victor Lanvin"],"meta":["August 2017Proceedings of the ACM on Programming Languages 1(ICFP):1-28","DOI:10.1145/3110285"],"references":["303011511_Abstracting_Gradual_Typing","316898748_Sums_of_Uncertainty_Refinements_Go_Gradual","316898652_Gradual_refinement_types","312278140_Gradual_refinement_types","312013201_Sums_of_uncertainty_refinements_go_gradual","311487964_Principal_Type_Schemes_for_Gradual_Programs","311483837_The_Recursive_Union_of_Some_Gradual_Types","311478579_Set-theoretic_types_for_polymorphic_variants","307435614_Set-Theoretic_Types_for_Polymorphic_Variants","303011763_Is_sound_gradual_typing_dead"]}