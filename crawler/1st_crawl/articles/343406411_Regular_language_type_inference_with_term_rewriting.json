{"id":"343406411_Regular_language_type_inference_with_term_rewriting","abstract":"This paper defines a new type system applied to the fully automatic verification of safety properties of tree-processing higher-order functional programs. We use term rewriting systems to model the program and its semantics and tree automata to model algebraic data types. We define the regular abstract interpretation of the input term rewriting system where the abstract domain is a set of regular languages. From the regular abstract interpretation we derive a type system where each type is a regular language. We define an inference procedure for this type system which allows us check the validity of safety properties. The inference mechanism is built on an invariant learning procedure based on the tree automata completion algorithm. This invariant learning procedure is regularly-complete and complete in refutation, meaning that if it is possible to give a regular type to a term then we will eventually find it, and if there is no possible type (regular or not) then we will eventually find a counter-example.","authors":["Timoth√©e Haudebourg","Thomas Genet","Thomas P. Jensen"],"meta":["August 2020Proceedings of the ACM on Programming Languages 4(ICFP):1-29","DOI:10.1145/3408994"],"references":["324519295_Verifying_Higher-Order_Functions_with_Tree_Automata","324457127_ICE-Based_Refinement_Type_Discovery_for_Higher-Order_Functional_Programs","281086472_TIP_Tons_of_Inductive_Problems","278160573_Termination_criteria_for_tree_automata_completion","266661105_LiquidHaskell_Experience_with_Refinement_Types_in_the_Real_World","262399356_A_Completion_Algorithm_for_Lattice_Tree_Automata","315341493_Modular_Verification_of_Higher-Order_Functional_Programs","307435614_Set-Theoretic_Types_for_Polymorphic_Variants","307174777_Tree_Automata_Techniques_and_Applications","300131575_Automata-Based_Abstraction_for_Automated_Verification_of_Higher-Order_Tree-Processing_Programs"]}