{"id":"319500458_The_Case_for_Writing_a_Kernel_in_Rust","abstract":"An operating system kernel written in the Rust language would have extremely fine-grained isolation boundaries, have no memory leaks, and be safe from a wide range of security threats and memory bugs. Previous efforts towards this end concluded that writing a kernel requires changing Rust. This paper reaches a different conclusion, that no changes to Rust are needed and a kernel can be implemented with a very small amount of unsafe code. It describes how three sample kernel mechanisms---DMA, USB, and buffer caches---can be built using these abstractions.","authors":["Amit Levy","Bradford Campbell","Branden Ghena","Pat Pannuto"],"meta":["September 2017","DOI:10.1145/3124680.3124717","Conference: the 8th Asia-Pacific Workshop"],"references":["315476354_Light-weight_Contexts_An_OS_Abstraction_for_Safety_and_Performance","301376625_Ownership_is_Theft_Experiences_Building_an_Embedded_OS_in_Rust","220910193_SeL4_Formal_verification_of_an_OS_kernel","318576146_System_Programming_in_Rust_Beyond_Safety","311463406_A_library_for_light-weight_information-flow_security_in_haskell","287964748_HLIO_Mixing_Static_and_Dynamic_Typing_for_Information-Flow_Control_in_Haskell","286915344_Extensibility_Safety_and_Performance_in_the_SPIN_Operating_System","239917355_Singularity_Design_Motivation","221562939_Flexible_Dynamic_Information_Flow_Control_in_Haskell","220881119_The_Slab_Allocator_An_Object-Caching_Kernel_Memory_Allocator"]}