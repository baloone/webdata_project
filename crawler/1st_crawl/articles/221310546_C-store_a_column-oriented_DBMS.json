{"id":"221310546_C-store_a_column-oriented_DBMS","abstract":"This paper presents the design of a read-optimized relational DBMS that contrasts sharply with most current systems, which are write-optimized. Among the many differences in its design are: storage of data by column rather than by row, careful coding and packing of objects into storage including main memory during query processing, storing an overlapping collection of column-oriented projections, rather than the current fare of tables and indexes, a non-traditional implementation of transactions which includes high availability and snapshot isolation for read-only transactions, and the extensive use of bitmap indexes to complement B-tree structures. We present preliminary performance data on a subset of TPC-H and show that the system we are building, C-Store, is substantially faster than popular commercial products. Hence, the architecture looks very encouraging.","authors":["Michael Stonebraker","Daniel J. Abadi","Adam Batkin","Xuedong Chen"],"meta":["January 2005","SourceDBLP","Conference: Proceedings of the 31st International Conference on Very Large Data Bases, Trondheim, Norway, August 30 - September 2, 2005"],"references":["226763355_The_log-structured_merge-tree_LSM-tree","221215046_Improved_Query_Performance_with_Variant_Indexes","45338800_MonetDBX100_Hyper-Pipelining_Query_Execution","302383359_NonStop_SQL_A_distributed_high-performance_high-availability_implementation_of_SQL","255663694_Data_Warehousing_Using_the_Wal-Mart_Model","245157386_Access_Path_Selection_in_a_Relational_Database","220415619_Database_Compression","200031673_Parallel_Databases_Systems_The_Future_of_High_Performance_Database_Systems","37467151_AutoPart_Automating_Schema_Design_for_Large_Scientific_Databases_Using_Data_Partitioning","2936076_The_Case_for_Shared_Nothing"]}