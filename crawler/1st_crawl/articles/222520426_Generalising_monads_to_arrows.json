{"id":"222520426_Generalising_monads_to_arrows","abstract":"Monads have become very popular for structuring functional programs since Wadler introduced their use in 1990. In particular, libraries of combinators are often based on a monadic type. Such libraries share (in part) a common interface, from which numerous benefits flow, such as the possibility to write generic code which works together with any library. But, several interesting and useful libraries are fundamentally incompatible with the monadic interface. In this paper I propose a generalisation of monads, which I call arrows, with significantly wider applicability. The paper shows how many of the techniques of monadic programming generalise to the new setting, and gives examples to show that the greater generality is useful. In particular, three non-monadic libraries for efficient parsing, building graphical user interfaces, and programming active web pages fit naturally into the new framework.","authors":["John Hughes"],"meta":["May 2000Science of Computer Programming 37(1-3):67-111","DOI:10.1016/S0167-6423(99)00023-4","SourceCiteSeer"],"references":["2413661_Lava_Hardware_Design_in_Haskell","2367815_Deterministic_Error-Correcting_Combinator_Parsers","2247556_FUDGETS_a_graphical_user_interface_in_a_lazy_functional_language","305255776_Comprehending_monads","239573360_Report_on_the_programming_language_haskell_a_non-strict","239537965_Report_on_the_functional_programming_language_Haskell_A_non-strict","238715528_How_to_replace_failure_with_a_list_of_successes","221305616_How_to_Replace_Failure_by_a_List_of_Successes_A_method_for_exception_handling_backtracking_and_pattern_matching_in_lazy_functional_languages","221303515_Monads_for_Functional_Programming","220691514_Basic_Category_Theory_for_Computer_Scientists","202056863_The_essence_of_functional_programming","2661383_Monad_Transformers_and_Modular_Interpreters","2516464_Functional_Reactive_Animation","2460300_Comprehending_Monads"]}