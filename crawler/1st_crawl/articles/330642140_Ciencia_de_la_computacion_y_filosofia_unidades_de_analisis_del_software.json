{"id":"330642140_Ciencia_de_la_computacion_y_filosofia_unidades_de_analisis_del_software","abstract":"There is a widely extended image of computer software as some sort of ‘black box,’ where it does not matter how it internally works, but rather what sort of results are obtained given certain input values. By approaching computer software this way, many philosophical issues are hidden, neglected, or simply misunderstood. This article discusses three units of analysis of computer software, namely, specifications, algorithms, and computer processes. The aim is to understand the scientific and engineering practices supporting each unit of analysis, as well as to analyze their methodology, ontology, and epistemology.","authors":["Juan M Durán"],"meta":["January 2019Principia an International Journal of Epistemology 22(2):203-227","DOI:10.5007/1808-1711.2018v22n2p203"],"references":["328576835_Grounds_for_Trust_Essential_Epistemic_Opacity_and_Computational_Reliabilism","312626867_The_Philosophy_of_Computer_Science","311668900_Varying_the_Explanatory_Span_Scientific_Explanation_for_Computer_Simulations","304988835_Information_in_the_Philosophy_of_Computer_Science","299344207_Epistemic_Opacity_Confirmation_Holism_and_Technical_Debt_Computer_Simulation_in_the_Light_of_Empirical_Software_Engineering","324459540_Programming_as_a_Discipline_of_Mathematical_Nature","321621645_A_History_of_Algorithms_From_the_Pebble_to_the_Microchip","286181221_Eight_open_problems_in_distributed_computing_Bulletin_of_the_European_Association_for_Theoretical_Computer_Science","266237775_Logics_of_Specification_Languages","257802545_Programming_Languages_as_Technical_Artifacts"]}