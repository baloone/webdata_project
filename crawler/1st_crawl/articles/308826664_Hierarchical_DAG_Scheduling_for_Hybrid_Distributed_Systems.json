{"id":"308826664_Hierarchical_DAG_Scheduling_for_Hybrid_Distributed_Systems","abstract":"Accelerator-enhanced computing platforms have drawn a lot of attention due to their massive peak computational capacity. Despite significant advances in the programming interfaces to such hybrid architectures, traditional programming paradigms struggle mapping the resulting multi-dimensional heterogeneity and the expression of algorithm parallelism, resulting in sub-optimal effective performance. Task-based programming paradigms have the capability to alleviate some of the programming challenges on distributed hybrid many-core architectures. In this paper we take this concept a step further by showing that the potential of task-based programming paradigms can be greatly increased with minimal modification of the underlying runtime combined with the right algorithmic changes. We propose two novel recursive algorithmic variants for one-sided factorizations and describe the changes to the PaRSEC task-scheduling runtime to build a framework where the task granularity is dynamically adjusted to adapt the degree of available parallelism and kernel efficiency according to runtime conditions. Based on an extensive set of results we show that, with one-sided factorizations, i.e. Cholesky and QR, a carefully written algorithm, supported by an adaptive tasks-based runtime, is capable of reaching a degree of performance and scalability never achieved before in distributed hybrid environments.","authors":["Wei Wu","Aurelien Bouteiller","George Bosilca","Mathieu Faverge"],"meta":["May 2015","DOI:10.1109/IPDPS.2015.56","Conference: 2015 IEEE International Parallel and Distributed Processing Symposium (IPDPS)"],"references":["267801133_Auto_Tuning_Method_for_Deciding_Block_Size_Parameters_in_Dynamically_Load-balanced_BLAS","261469006_Preliminary_Experiments_with_XKaapi_on_Intel_Xeon_Phi_Coprocessor","252069639_Enabling_and_Scaling_Matrix_Computations_on_Heterogeneous_Multi-Core_and_Multi-GPU_Systems","234787466_Solving_dense_linear_systems_on_platforms_with_multiple_hardware_accelerators","231582678_Dense_Matrix_Computation_on_a_Heterogenous_Architecture_A_Block_Synchronous_Approach","231051092_Numerical_linear_algebra_on_emerging_architectures_The_PLASMA_and_MAGMA_projects","224264426_Performance_Portability_of_a_GPU_Enabled_Factorization_with_the_DAGuE_Framework","222429664_A_Class_of_Parallel_Tiled_Linear_Algebra_Algorithms_for_Multicore_Architectures","269268623_Reconstructing_Householder_Vectors_from_Tall-Skinny_QR","221643440_Solving_Dense_Linear_Systems_on_Platforms_with_Multiple_Hardware_Accelerators","220951771_Dense_linear_algebra_solvers_for_multicore_with_GPU_accelerators","220949453_QR_Factorization_on_a_Multicore_Node_Enhanced_with_Multiple_GPU_Accelerators","220761285_Retargeting_PLAPACK_to_clusters_with_hardware_accelerators","220952935_DAGuE_A_generic_distributed_DAG_engine_for_High_Performance_Computing","4373988_Satisfying_Your_Dependencies_with_SuperMatrix"]}