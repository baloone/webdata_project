{"id":"320427644_LEARNING_COMPUTER_PROGRAMMING_IN_CDIO'S_TEAM_SETTINGS","abstract":"Programming or \"coding\" skill, for short, is an essential aspect in the training of every Software Engineering or Computer Science program. While certain individuals can quickly digest various programming structures and become proficient in \"coding\", most others usually go through difficult periods of time trying to understand different programming concepts, grasping certain programming syntax, and applying specific programming algorithms. Eventually, some still manage to \"get it\" but some others seem to \"get to nowhere\". So, the question become whether we may teach programming more efficiently, using the CDIO's collective and cooperative learning approaches? As opposed to what many think that programming can only be learned in an individual manner, many universities are increasingly teaching programming through small team projects in the junior's and senior's level. Assessment of the efficiency and effectiveness of such collective approach, however, are rarely made because of the general assumption that students must have learned programming individually in some introductory programming courses during their freshman's and/or sophomore's year. The whole point of learning programming in teams is sometimes only regarded as a team building activity at a number of universities. At Duy Tan University, during the last two years, we have also attempted to teach programming in teams for freshman and sophomore students. By setting up standard programming projects for teams of 3 to 5 students and by using automated testing tools like PC^2 and Themis, we have created certain flexibility and synergy in the development of programming skills of our students. For teams which did not realize the expected benefits, it mostly had to do with problems in their use of programming language(s) and syntax. At the end of these courses, we carried out an individual comprehensive exam, and to our surprise, the results were significantly better than the introductory programming course, in which programming was taught in an individual manner. Generally speaking, learning programming in teams allow for additional communication and mutual correction on the part of the students and more focused guidance and assessment on the part of our faculty members. (338 words) KEYWORDS Algorithm design, CDIO Standard 4 and 5, learning outcomes, PC^2, programming skills, program testing, Themis we have created certain flexibility and synergy in the development of\nprogramming skills of our students. For teams which did not realize the expected benefits, it\nmostly had to do with problems in their use of programming language(s) and syntax. At the\nend of these courses, we carried out an individual comprehensive exam, and to our\nsurprise, the results were significantly better than the introductory programming course, in\nwhich programming was taught in an individual manner. Generally speaking, learning\nprogramming in teams allow for additional communication and mutual correction on the part\nof the students and more focused guidance and assessment on the part of our faculty\nmembers.","authors":["Phuong A Pham","Man Nguyen Duc","Long Q Nguyen","Thang M Nguyen"],"meta":["June 2014","Conference: the 10th Annual International CDIO ConferenceAt: Universitat Polit√®cnica de Catalunya, Barcelona, Spain; June 16 - 19, 2014","Project: Applying  CDIO Approach at Duy Tan University"],"references":["239646464_The_problem_of_teaching_object-oriented_programming","234118102_Rethinking_Engineering_Education_The_CDIO_Approach"]}