{"id":"301880912_Randomness_Extraction_in_AC0_and_with_Small_Locality","abstract":"We study two variants of seeded randomness extractors. The first one, as studied by Goldreich et al. \\cite{goldreich2015randomness}, is seeded extractors that can be computed by AC0 circuits. The second one, as introduced by Bogdanov and Guo \\cite{bogdanov2013sparse}, is (strong) extractor families that consist of sparse transformations, i.e., functions that have a small number of overall input-output dependencies (called \\emph{sparse extractor families}). In the AC0 extractor case, our main results substantially improve the positive results in \\cite{goldreich2015randomness}. We give constructions of strong seeded extractors for $k=\\delta n \\geq n/poly(\\log n)$, with seed length $d=O(\\log n)$, output length $m=k^{\\Omega(1)}$, and error any $1/poly(n)$. We can then boost the output length to $\\Omega(\\delta k)$ with seed length $d=O(\\log n)$, or to $(1-\\gamma)k$ for any constant $0<\\gamma<1$ with $d=O(\\frac{1}{\\delta}\\log n)$. We give two applications of such extractors to the constructions of pseudorandom generators in AC0 that are cryptographically secure, and that fool small space computation. In the case of sparse extractor families,for min-entropy $k=\\Omega(\\log^2 n)$ and error $\\epsilon \\geq 2^{-k^{\\Omega(1)}}$, we give a strong seeded extractor with seed length $d = O(k)$, $m = (1-\\gamma)k$ and locality $\\frac{n}{k}\\log^2 (1/\\epsilon) (\\log n)poly(\\log k)$.","authors":["Kuan Cheng","Xin Li"],"meta":["February 2016"],"references":["234832461_P_BPP_if_E_requires_exponential_circuits","227142996_BPP_has_subexponential_time_simulations_unlessEXPTIME_has_publishable_proofs","221591794_A_Hard-Core_Predicate_for_all_One-Way_Functions","3635321_Hard-core_distributions_for_somewhat_hard_problems","2590077_Construction_of_a_Pseudo-Random_Generator_From_Any_One-Way_Function","2517326_Efficient_Cryptographic_Schemes_Provably_as_Secure_as_Subset_Sum","2440059_Candidate_One-Way_Functions_Based_on_Expander_Graphs","2314052_Pseudorandomness_for_Network_Algorithms","300133871_Shannon_Entropy_Versus_Renyi_Entropy_from_a_Cryptographic_Viewpoint","289617466_On_constructing_locally_computable_extractors_and_cryptosystems_in_the_bounded_storage_model","235008639_Hardness_vs_randomness","235008637_mathsfPmathsfBPP_unless_mathsfE_has_sub-exponential_circuits_derandomizing_the_XOR_lemma","234807273_Pseudorandom_generators_for_space_bounded_computation","230568885_Sparse_extractor_families_for_all_the_entropy","227760853_On_e-biased_generators_in_NC0","226102492_The_complexity_of_constructing_pseudorandom_generators_from_hard_functions","225110938_Randomness-Efficient_Sampling_within_NC1","222835231_Extracting_all_the_Randomness_and_Reducing_the_Error_in_Trevisan's_Extractors","222457947_Universal_classes_of_hash_functions","221499126_Cryptography_in_NC","221462519_Extractors_Using_Hardness_Amplification","220693968_Computational_Complexity_A_Modern_Approach","220689472_Extremal_combinatorics_With_applications_in_computer_science","220688436_The_Complexity_of_Boolean_Functions","220467743_On_Pseudorandom_Generators_with_Linear_Stretch_in_NC","220138462_Pseudorandom_Generators_with_Long_Stretch_and_Low_Locality_from_Random_Local_One-Way_Functions","4257925_Unbalanced_Expanders_and_Randomness_Extractors_from_Parvaresh-Vardy_Codes","4150605_On_constructing_parallel_pseudorandom_generators_from_one-way_functions","3832174_Error_reduction_for_extractors","3501865_How_to_recycle_random_bits","2554604_On_Constructing_Locally_Computable_Extractors_and_Cryptosystems_In_The_Bounded_Storage_Model","2518888_Extractors_and_Pseudorandom_Generators","2454421_Randomness-Optimal_Oblivious_Sampling","2410797_Tiny_Families_of_Functions_with_Random_Properties_A_Quality--Size_Trade--off_for_Hashing","2368934_Randomness_is_Linear_in_Space"]}