{"id":"321304258_Overfitting_in_Semantics-based_Automated_Program_Repair","abstract":"The primary goal of Automated Program Repair (APR) is to automatically fix buggy software, to reduce the manual bug-fix burden that presently rests on human developers. Existing APR techniques can be generally divided into two families: semantics-vs. heuristics-based. Semantics-based APR uses symbolic execution and test suites to extract semantic constraints, and uses program synthesis to synthesize repairs that satisfy the extracted constraints. Heuristic-based APR generates large populations of repair candidates via source manipulation, and searches for the best among them. Both families largely rely on a primary assumption that a program is correctly patched if the generated patch leads the program to pass all provided test cases. Patch correctness is thus an especially pressing concern. A repair technique may generate overfitting patches, which lead a program to pass all existing test cases, but fails to generalize beyond them. In this work, we revisit the overfit-ting problem with a focus on semantics-based APR techniques, complementing previous studies of the overfitting problem in heuristics-based APR. We perform our study using IntroClass and Codeflaws benchmarks, two datasets well-suited for assessing repair quality, to systematically characterize and understand the nature of overfitting in semantics-based APR. We find that sim-2 Xuan Bach D. Le et al. ilar to heuristics-based APR, overfitting also occurs in semantics-based APR in various different ways.","authors":["Xuan Bach D Le","Ferdian Thung","David Lo","Claire Le Goues"],"meta":["November 2017","DOI:10.1145/3180155.3182536","Conference: Empirical Software Engineering Journal","Project: program repair and program synthesis"],"references":["318196972_Codeflaws_A_Programming_Competition_Benchmark_for_Evaluating_Automated_Program_Repair_Tools","306119957_Empirical_Study_on_Synthesis_Engines_for_Semantics-Based_Program_Repair","356283739_Syntax-Guided_Synthesis","317546348_JFIX_Semantics-Based_Repair_of_Java_Programs_via_Symbolic_PathFinder","307090961_Towards_efficient_and_effective_automatic_program_repair","306167327_Programming_by_examples_and_its_applications_in_data_wrangling","304552841_DirectFix_Looking_for_Simple_Program_Repairs","304286816_Repairing_Programs_with_Semantic_Code_Search_T","303284530_Automatic_patch_generation_by_learning_correct_code","303099518_An_Analysis_of_the_Search_Spaces_for_Generate_and_Validate_Patch_Generation_Systems"]}