{"id":"290105010_SugarJ","abstract":"Existing approaches to extend a programming language with syntactic sugar often leave a bitter taste, because they cannot be used with the same ease as the main extension mechanism of the programming language - libraries. Sugar libraries are a novel approach for syntactically extending a programming language within the language. A sugar library is like an ordinary library, but can, in addition, export syntactic sugar for using the library. Sugar libraries maintain the composability and scoping properties of ordinary libraries and are hence particularly well-suited for embedding a multitude of domain-specific languages into a host language. They also inherit self-applicability from libraries, which means that sugar libraries can provide syntactic extensions for the definition of other sugar libraries. To demonstrate the expressiveness and applicability of sugar libraries, we have developed SugarJ, a language on top of Java, SDF and Stratego, which supports syntactic extensibility. SugarJ employs a novel incremental parsing technique, which allows changing the syntax within a source file. We demonstrate SugarJ by five language extensions, including embeddings of XML and closures in Java, all available as sugar libraries. We illustrate the utility of self-applicability by embedding XML Schema, a metalanguage to define XML languages.","authors":["Sebastian Erdweg","Tillmann Rendel","Christian KÃ¤stner","Klaus Ostermann"],"meta":["October 2011ACM SIGPLAN Notices","DOI:10.1145/2048066.2048099","Conference: the 2011 ACM international conference"],"references":["281455032_A_Programming_Language_Where_the_Syntax_and_Semantics_Are_Mutable_at_Runtime","222709839_Detecting_Structural_Refactoring_Conflicts_Using_Critical_Pair_Analysis","221496571_Embedding_Languages_without_Breaking_Tools","221496340_Attribute_Grammar-Based_Language_Extensions_for_Java","221321535_The_Spoofax_Language_Workbench_Rules_for_Declarative_Specification_of_Languages_and_IDEs","221241381_Scribble_Closing_the_Book_on_Ad_Hoc_Documentation_Tools","221220818_Stratego_A_Language_for_Program_Transformation_Based_on_Rewriting_Strategies","221108633_Macros_That_Compose_Systematic_Macro_Programming","220997237_Macros_That_Work","220896813_Analyzing_Context-Free_Grammars_Using_an_Incremental_SAT_Solver","220404210_Domain_Specific_Language_Implementation_via_Compile-Time_Meta-Programming","220178482_The_syntax_definition_formalism_SDF","216168443_Growing_a_Language_Environment_with_Editor_Libraries","213885984_Pluggable_Type_Systems","200040446_When_and_How_to_Develop_Domain-Specific_Languages","47648937_Language_Boxes","2530487_Meta-Programming_with_Concrete_Object_Syntax","2387561_Programmable_Syntax_Macros","271455145_Composable_and_compilable_macros","271436881_Concrete_syntax_for_objects","237466820_The_Java_syntactic_extender_JSE","234820818_Syntax_macros_and_extended_translation","223713052_Silver_An_extensible_attribute_grammar_system","222827508_Feature_interaction_A_critical_review_and_considered_forecast","221496156_Modular_Visitor_Components","221220784_Lecture_Notes_in_Computer_Science","221108640_Polymorphic_embedding_of_DSLS","220897476_Conservative_Ambiguity_Detection_in_Context-Free_Grammars","220752181_Languages_as_Libraries","220692964_An_Introduction_to_XML_and_Web_Technologies","220676668_Educational_Pearl_Automata_via_macros","220131077_Preventing_injection_attacks_with_syntax_embeddings","213877586_Hygienic_macro_expansion","213876745_Language_Oriented_Programming_The_Next_Programming_Paradigm","200040343_Language_Workbenches_The_Killer-App_for_Domain_Specific_Languages","3756090_JTS_tools_for_implementing_domain-specific_languages","2833352_Polyglot_An_Extensible_Compiler_Framework_for_Java","2678148_The_Death_Of_Computer_Languages_The_Birth_Of_Intentional_Programming","2646832_Growing_Languages_with_Metamorphic_Syntax_Macros","2633809_Program_Fragments_Linking_and_Modularization","2577830_Modular_Domain_Specific_Languages_and_Tools","2293569_Recursive_Adaptable_Grammars"]}