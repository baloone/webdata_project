{"id":"259224048_A_Model-Theoretic_Approach_to_Belief_Change_in_Answer_Set_Programming","abstract":"We address the problem of belief change in (nonmonotonic) logic programming under answer set semantics. Our formal techniques are analogous to those of distance-based belief revision in propositional logic. In particular, we build upon the model theory of logic programs furnished by SE interpretations, where an SE interpretation is a model of a logic program in the same way that a classical interpretation is a model of a propositional formula. Hence we extend techniques from the area of belief revision based on distance between models to belief change in logic programs.\nWe first consider belief revision: for logic programs P and Q, the goal is to determine a program R that corresponds to the revision of P by Q, denoted P * Q. We investigate several operators, including (logic program) expansion and two revision operators based on the distance between the SE models of logic programs. It proves to be the case that expansion is an interesting operator in its own right, unlike in classical belief revision where it is relatively uninteresting. Expansion and revision are shown to satisfy a suite of interesting properties; in particular, our revision operators satisfy all or nearly all of the AGM postulates for revision.\nWe next consider approaches for merging a set of logic programs, P1, ..., Pn. Again, our formal techniques are based on notions of relative distance between the SE models of the logic programs. Two approaches are examined. The first informally selects for each program Pi those models of Pi that vary the least from models of the other programs. The second approach informally selects those models of a program P0 that are closest to the models of programs P1, ..., Pn. In this case, P0 can be thought of as a set of database integrity constraints. We examine these operators with regards to how they satisfy relevant postulate sets.\nLast, we present encodings for computing the revision as well as the merging of logic programs within the same logic programming framework. This gives rise to a direct implementation of our approach in terms of off-the-shelf answer set solvers. These encodings also reflect the fact that our change operators do not increase the complexity of the base formalism.","authors":["James P. Delgrande","Torsten Schaub","Hans Tompits","Stefan Woltran"],"meta":["June 2013ACM Transactions on Computational Logic 14(2):1-46","DOI:10.1145/2480759.2480766"],"references":["255668799_A_User's_Guide_to_gringo_clasp_clingo_and_iclingo","346674884_On_the_difference_between_updating_a_knowledge_base_and_revising_it","318899851_Strongly_Equivalent_Logic_Programs","316128365_A_preference-based_framework_for_updating_logic_programs","290017196_Towards_the_use_of_Semantic_Contents_in_ASP_for_planning_and_diagnostic_in_GIS","268722626_Reasoning_and_Declarative_Problem_Solving","257145422_Revision_programming","247408414_Revision_of_non-monotonic_theories_Some_postulates_and_an_application_to_logic_programming","243774683_Combining_multiple_knowledge_bases_consisting_of_first_order_theories","243677126_A_Textbook_of_Belief_Dynamics"]}