{"id":"320389381_Reliable_and_automatic_composition_of_language_extensions_to_C_the_ableC_extensible_language_framework","abstract":"This paper describes an extensible language framework, ableC, that allows programmers to import new, domain-specific, independently-developed language features into their programming language, in this case C. Most importantly, this framework ensures that the language extensions will automatically compose to form a working translator that does not terminate abnormally. This is possible due to two modular analyses that extension developers can apply to their language extension to check its composability. Specifically, these ensure that the composed concrete syntax specification is non-ambiguous and the composed attribute grammar specifying the semantics is well-defined. This assurance and the expressiveness of the supported extensions is a distinguishing characteristic of the approach.\nThe paper describes a number of techniques for specifying a host language, in this case C at the C11 standard, to make it more amenable to language extension. These include techniques that make additional extensions pass these modular analyses, refactorings of the host language to support a wider range of extensions, and the addition of semantic extension points to support, for example, operator overloading and non-local code transformations.","authors":["Ted Kaminski","Lucas Kramer","Travis Carlson","Eric Van Wyk"],"meta":["October 2017Proceedings of the ACM on Programming Languages 1(OOPSLA):1-29","DOI:10.1145/3138224"],"references":["262290910_Type-directed_whitespace-delimited_parsing_for_embedded_DSLs","262289794_Tom_Piggybacking_Rewriting_on_Java","262275944_Mbeddr_An_extensible_c-based_programming_language_and_IDE_for_embedded_systems","261836412_Capture-Avoiding_and_Hygienic_Program_Transformations","251285306_Tom_Piggybacking_Rewriting_on_Java_-_System_Description_-","234803748_Higher_order_attribute_grammars","228988592_Language_and_IDE_Modularization_Extension_and_Composition_with_MPS","222668003_Silver_an_Extensible_Attribute_Grammar_System","221496340_Attribute_Grammar-Based_Language_Extensions_for_Java","221321535_The_Spoofax_Language_Workbench_Rules_for_Declarative_Specification_of_Languages_and_IDEs","221320578_Concrete_syntax_for_objects_Domain-specific_language_embedding_and_assimilation_without_restrictions","221220818_Stratego_A_Language_for_Program_Transformation_Based_on_Rewriting_Strategies","221108662_Context-aware_scanning_for_parsing_extensible_languages","221105639_Building_Extensible_Specifications_and_Implementations_of_Promela_with_AbleP","221055362_Verifiable_Parse_Table_Composition_for_Deterministic_Parsing","220997740_Parsing_Expression_Grammars_A_Recognition-Based_Syntactic_Foundation","220752330_A_Theory_of_Type_Qualifiers","220752076_Verifiable_Composition_of_Deterministic_Grammars","220703689_RASCAL_A_Domain_Specific_Language_for_Source_Code_Analysis_and_Manipulation","347982588_Modular_capture_avoidance_for_program_transformations","321450770_Type_qualifiers_as_composable_language_extensions","320436678_Ensuring_non-interference_of_composable_language_extensions","320359501_Type_qualifiers_as_composable_language_extensions","319770368_Decoupling_algorithms_from_schedules_for_easy_optimization_of_image_processing_pipelines","314807964_Flow-sensitive_type_qualifiers","311474330_Xoc_an_extension-oriented_compiler_for_systems_programming","305265016_Programmable_Syntax_Macros","304147943_The_expression_problem_trivially","303011775_Sound_type-dependent_syntactic_language_extension","301274042_Sound_type-dependent_syntactic_language_extension","300852823_JavaRAG_a_Java_library_for_reference_attribute_grammars","300430800_Safely_Composable_Type-Specific_Languages","294373779_Proceedings_of_the_ACM_SIGPLAN_Conference_on_Programming_Language_Design_and_Implementation_PLDI_Message_from_the_program_chair","292340793_Eco_A_Language_Composition_Editor","290105010_SugarJ","284339759_Modular_Well-Definedness_Analysis_for_Attribute_Grammars","273188322_From_Object_Algebras_to_Attribute_Grammars","271436881_Concrete_syntax_for_objects","254461831_Decoupling_Algorithms_from_Schedules_for_Easy_Optimization_of_Image_Processing_Pipelines","240044733_Intermediate_Language_and_Tools_for_C_Program_Analysis_and_Transformation","225204149_Semantics_of_context-free_languages_Math_Syst_Theory_2_95","223713052_Silver_An_extensible_attribute_grammar_system","221555564_Building_and_Using_Pluggable_Type-Checkers","221321303_The_JastAdd_Extensible_Java_Compiler","221202327_Lightweight_Language_Processing_in_Kiama","220997518_Composable_Attribute_Grammars_Support_for_Modularity_in_Translator_Design_and_Implementation","220939070_E_Xoc_an_extensionoriented_compiler_for_systems_programming","220751816_Flow-Sensitive_Type_Qualifiers","220751787_Better_extensibility_through_modular_syntax","220543592_Semantics_of_Context-Free_Languages","220431365_Remote_attribute_grammars","220197490_Modularity_and_Reusability_in_Attribute_Grammars","220439800_ROSE_Compiler_Support_for_Object-Oriented_Frameworks","220166109_Reference_Attributed_Grammars","220131274_Increasing_Modularity_and_Language-Independency_in_Automatically_Generated_Compilers"]}