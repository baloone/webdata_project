{"id":"312416419_Towards_a_tracing_framework_for_Model-Driven_software_systems","abstract":"Understanding software behavior by analyzing its execution traces is an important enabler for many software engineering tasks. In Model-Driven Development (MDD), dynamic analysis methods are often used to analyze executable models to enable the understanding of software behavior in early stages of the development process. An execution trace of a model can provide information to help reason about executable models. However, understanding an execution trace is not an easy task due to the size and complexity of typical traces. In this work, we aim at tackling this problem by proposing a model tracing framework, comprising compaction techniques to simplify the analysis of large traces at a higher level of abstraction, and a model tracing language, to capture run-time behavior of the executed model adequately.","authors":["Fazilat Hojaji","Bahman Zamani","Abdelwahab Hamou-Lhadj"],"meta":["October 2016","DOI:10.1109/ICCKE.2016.7802156","Conference: 2016 6th International Conference on Computer and Knowledge Engineering (ICCKE)"],"references":["284503626_A_design_science_research_methodology_for_information_systems_research","280736521_A_Generative_Approach_to_Define_Rich_Domain-Specific_Trace_Metamodels","266653807_Executing_and_debugging_UML_models_An_fUML_extension","266319244_Specifying_Trace_Directives_for_UML_Attributes_and_State_Machines","262366190_Grouping_Objects_for_Execution_Trace_Analysis_Based_on_Design_Patterns","262346644_A_runtime_model_for_fUML","261120613_Towards_Tracing_at_the_Model_Level","267247736_Summarizing_Embedded_Execution_Traces_through_a_Compact_View","249314331_Execution_Trace_Abstraction_Based_on_Meta_Patterns_Usage","232624721_Interactive_Exploration_of_UML_Sequence_Diagrams"]}