{"id":"220404293_An_indexed_model_of_recursive_types_for_foundational_proof-carrying_code","abstract":"The proofs of \"traditional\" proof carrying code (PCC) are type-specialized in the sense that they require axioms about a specific type system. In contrast, the proofs of foundational PCC explicitly define all required types and explicitly prove all the required properties of those types assuming only a fixed foundation of mathematics such as higher-order logic. Foundational PCC is both more flexible and more secure than type-specialized PCC. For foundational PCC we need semantic models of type systems on von Neumann machines. Previous models have been either too weak (lacking general recursive types and first-class function-pointers), too complex (requiring machine-checkable proofs of large bodies of computability theory), or not obviously applicable to von Neumann machines. Our new model is strong, simple, and works either in Î»-calculus or on Pentiums. Categories and Subject Descriptors: F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs - Mechanical verification; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages.","authors":["Andrew W. Appel","David Allen Mcallester"],"meta":["September 2001ACM Transactions on Programming Languages and Systems 23(5):657-683","DOI:10.1145/504709.504712","SourceDBLP"],"references":["213877138_Data_Types_as_Lattices","2626077_A_Certifying_Compiler_for_Java","2448490_Typed_Closure_Conversion","2337811_Implementing_Mathematics_with_The_Nuprl_Proof_Development_System","242614418_Models_for_security_policies_in_proof-carrying_code","222506092_Relational_Interpretations_of_Recursive_Types_in_an_Operational_Setting","221947364_Fully_abstract_models_of_typed_l-calculi","220997567_An_Ideal_Model_for_Recursive_Polymorphic_Types","220997480_A_Semantic_Model_of_Types_and_Machine_Instuctions_for_Proof-Carrying_Code","220898126_Effective_Models_of_Polymorphism_Subtyping_and_Recursion_Extended_Abstract","220805784_Elf_A_Meta-Language_for_Deductive_Systems_System_Descrition","220805536_Machine_Instruction_Syntax_and_Semantics_in_Higher_Order_Logic","220690555_The_Formal_Semantics_of_Programming_Languages_An_Introduction","220248676_Relational_Properties_of_Domains","220247643_An_Ideal_Model_for_Recursive_Polymorphic_Types","2676366_Proof-Carrying_Code","2408539_From_System_F_to_Typed_Assembly_Language","2378147_A_Framework_for_Defining_Logics","2368726_Effective_Models_of_Polymorphism_Subtyping_and_Recursion_extended"]}