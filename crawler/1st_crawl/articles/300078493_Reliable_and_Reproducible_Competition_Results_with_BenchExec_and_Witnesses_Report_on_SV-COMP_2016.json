{"id":"300078493_Reliable_and_Reproducible_Competition_Results_with_BenchExec_and_Witnesses_Report_on_SV-COMP_2016","abstract":"The 5\\(^{\\text {th}}\\) Competition on Software Verification (SV-COMP 2016) continues the tradition of a thorough comparative evaluation of fully-automatic software verifiers. This report presents the results of the competition and includes a special section that describes how SV-COMP ensures that the experiments are reliably executed, precisely measured, and organized such that the results can be reproduced later. SV-COMP uses BenchExec for controlling and measuring the verification runs, and requires violation witnesses in an exchangeable format, whenever a verifier reports that a property is violated. Each witness was validated by two independent and publicly-available witness validators. The tables report the state of the art in software verification in terms of effectiveness and efficiency. The competition used 6 661 verification tasks that each consisted of a C program and a property (reachability, memory safety, termination). SV-COMP 2016 had 35 participating verification systems (22 in 2015) from 16 countries.","authors":["Dirk Beyer"],"meta":["April 2016","DOI:10.1007/978-3-662-49674-9_55","Conference: International Conference on Tools and Algorithms for the Construction and Analysis of Systems"],"references":["299448793_Unbounded_Lazy-CSeq_a_lazy_sequentialization_tool_for_C_programs_with_unbounded_context_switches_competition_contribution","299426870_MU-CSeq_04_individual_memory_location_unwindings_competition_contribution","283532290_PAC_Learning-Based_Verification_and_Model_Synthesis","281670879_Model_Checking_Embedded_C_Software_using_k-Induction_and_Invariants_extended_version","263437110_Bounded_Model_Checking_of_Multi-Threaded_C_Programs_via_Lazy_Sequentialization","262363179_Predicate_analysis_with_BLAST_27","312755988_LTL_Model_Checking_of_LLVM_Bitcode_with_Symbolic_Data","303104240_PAC_learning-based_verification_and_model_synthesis","301988379_SeaHorn_A_Framework_for_Verifying_C_Programs_Competition_Contribution","301983851_Cascade","301981608_FramewORk_for_Embedded_System_verification","301978730_AProVE_Termination_and_Memory_Safety_of_C_Programs","301975852_ULTIMATE_KOJAK_with_Memory_Safety_Checks","300541632_Refinement_Selection","300541540_Benchmarking_and_Resource_Measurement","300078662_CPA-BAM_Block-Abstraction_Memoization_with_Value_Analysis_and_Predicate_Analysis","300078497_DIVINE_Explicit-State_LTL_Model_Checker","300078495_CIVL_Applying_a_General_Concurrency_Verification_Framework_to_CPthreads_Programs_Competition_Contribution","300077937_Optimized_PredatorHP_and_the_SV-COMP_Heap_and_Memory_Safety_Benchmark","300077798_Vienna_Verification_Tool_IC3_for_Parallel_Software","300077797_Symbiotic_3_New_Slicer_and_Error-Witness_Generation","300077796_MU-CSeq_04_Individual_Memory_Location_Unwindings","300077711_Ultimate_Automizer_with_Two-track_Proofs","300077710_Hunting_Memory_Bugs_in_C_Programs_with_Map2Check","297582654_CBMC_-_C_Bounded_Model_Checker","290878712_SMACK_Decoupling_Source_Language_Details_from_Verifier_Implementations","290851484_ESBMC_122","283653456_Software_verification_and_verifiable_witnesses_Report_on_SV-COMP_2015","281768852_Program_Analysis_with_Local_Policy_Iteration","281589369_Witness_Validation_and_Stepwise_Testification_across_Software_Verifiers","280499550_Boosting_k-Induction_with_Continuously-Refined_Invariants","262601560_Status_Report_on_Software_Verification_Competition_Summary_SV-COMP_2014","262601356_Second_Competition_on_Software_Verification_Summary_of_SV-COMP_2013","255566670_Lecture_Notes_in_Computer_Science"]}