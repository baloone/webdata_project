{"id":"320634007_A_comparison_of_code_similarity_analysers","abstract":"Copying and pasting of source code is a common activity in software engineering. Often, the code is not copied as it is and it may be modified for various purposes; e.g. refactoring, bug fixing, or even software plagiarism. These code modifications could affect the performance of code similarity analysers including code clone and plagiarism detectors to some certain degree. We are interested in two types of code modification in this study: pervasive modifications, i.e. transformations that may have a global effect, and local modifications, i.e. code changes that are contained in a single method or code block. We evaluate 30 code similarity detection techniques and tools using five experimental scenarios for Java source code. These are (1) pervasively modified code, created with tools for source code and bytecode obfuscation, and boiler-plate code, (2) source code normalisation through compilation and decompilation using different decompilers, (3) reuse of optimal configurations over different data sets, (4) tool evaluation using ranked-based measures, and (5) local + global code modifications. Our experimental results show that in the presence of pervasive modifications, some of the general textual similarity measures can offer similar performance to specialised code similarity tools, whilst in the presence of boiler-plate code, highly specialised source code similarity detection techniques and tools outperform textual similarity measures. Our study strongly validates the use of compilation/decompilation as a normalisation technique. Its use reduced false classifications to zero for three of the tools. Moreover, we demonstrate that optimal configurations are very sensitive to a specific data set. After directly applying optimal configurations derived from one data set to another, the tools perform poorly on the new data set. The code similarity analysers are thoroughly evaluated not only based on several well-known pair-based and query-based error measures but also on each specific type of pervasive code modification. This broad, thorough study is the largest in existence and potentially an invaluable guide for future users of similarity detection in source code.","authors":["Chaiyong Ragkhitwetsagul","Jens Krinke","David Clark"],"meta":["August 2018Empirical Software Engineering 23(9)","DOI:10.1007/s10664-017-9564-7"],"references":["315639780_Using_CompilationDecompilation_to_Enhance_Clone_Detection","312484664_BigCloneEval_A_Clone_Detection_Tool_Evaluation_Framework_with_BigCloneBench","305386496_Scikit-Iearn_Machine_learning_in_python","304552708_How_Can_I_Use_This_Method","318125249_Stack_Overflow_in_Github_Any_Snippets_There","312532894_Clone_detection_using_abstract_syntax_trees","312237870_Similarity_of_Source_Code_in_the_Presence_of_Pervasive_Modifications","308161218_Introduction_to_information_retrieval_chapt","304286816_Repairing_Programs_with_Semantic_Code_Search_T","303099433_SourcererCC_scaling_code_clone_detection_to_big-code"]}