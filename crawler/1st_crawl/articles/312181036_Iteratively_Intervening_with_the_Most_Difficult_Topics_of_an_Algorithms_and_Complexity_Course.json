{"id":"312181036_Iteratively_Intervening_with_the_Most_Difficult_Topics_of_an_Algorithms_and_Complexity_Course","abstract":"When compared to earlier programming and data structure experiences that our students might have, the perspective changes on computers and programming when introducing theoretical computer science into the picture. Underlying computational models need to be addressed, and mathematical tools employed, to understand the quality criteria of theoretical computer science. Focus shifts from doing to proving. Over several years, we have tried to make this perspective transition smoother for the students of a third-year mandatory algorithms, data structures, and computational complexity course. The concepts receiving extra attention in this work are NP-completeness, one of the most central concepts in computer science, and dynamic programming, an algorithm construction method that is powerful but somewhat unintuitive for some students.\nThe major difficulties that we attribute to NP-completeness are that the tasks look similar but have a different purpose than in algorithm construction exercises. Students do not immediately see the usefulness of the concept, and hence motivation could be one issue. One line of attacking NP-completeness has been to emphasize its algorithmic aspects using typical tools for teaching algorithms.\nSome potential difficulties associated with dynamic programming are that the method is based on a known difficult concept—recursion—and that there are many ingredients in a dynamic programming solution to a problem.\nFor both dynamic programming and NP-completeness, we have invented several new activities and structured the teaching differently, forcing students to think and adopt a standpoint, and practice the concepts in programming assignments. Student surveys show that these activities are appreciated by the students, and our evaluations indicate that they have positive effects on learning. We believe that these activities could be useful in any similar course.\nThe approach to improving the course is action research, and the evaluation has been done using course surveys, self-efficacy surveys, rubrics-like grading protocols, and grades. We have also interviewed teaching assistants about their experiences.","authors":["Emma Enström","Viggo Kann"],"meta":["January 2017ACM Transactions on Computing Education 17(1):1-38","DOI:10.1145/3018109"],"references":["261287614_Learning_Teaching_in_Higher_Education_The_Reflective_Professional","256537666_Do_Learners_Really_Know_Best_Urban_Legends_in_Education","254049381_Five_years_with_kattis_-_Using_an_automated_assessment_system_in_teaching","254049121_Work_in_progress_-_Courses_dedicated_to_the_development_of_logical_and_algorithmic_thinking","250891681_The_student_experience_of_mathematical_proof_at_University_level","247784746_Meta-Analysis_of_the_Research_on_Response_Cards_Effects_on_Test_Achievement_Quiz_Achievement_Participation_and_Off-Task_Behavior","234806759_On_teaching_theoretical_foundations_of_computer_science","231557192_Learning_and_Teaching_in_Higher_Education_The_Reflective_Professional","226499841_High_school_geometry_students'_justification_for_their_views_of_empirical_evidence_and_mathematical_proof","225133384_On_Teaching_the_Basics_of_Complexity_Theory","224361019_Teaching_abstraction_to_novices_Pattern-based_and_ADT-based_problem-solving_processes","221538923_Teaching_recursion_in_a_procedural_environment_-_How_much_should_we_emphasize_the_computing_model","220808440_Computer_lab_work_on_theory","220807284_Reductive_thinking_in_undergraduate_CS_courses","2394316_Teaching_Recursion_Before_Loops_In_Cs1","316858624_Computer_Science_Curricula_2013_Curriculum_Guidelines_for_Undergraduate_Degree_Programs_in_Computer_Science","272160038_Learning_and_Awareness","271729841_Development_and_Validation_of_Scores_on_a_Computer_Programming_Self-Efficacy_Scale_and_Group_Analyses_of_Novice_Programmer_Self-Efficacy","268486419_Reductive_thinking_in_a_quantitative_perspective_The_case_of_the_algorithm_course","264839724_Aspects_of_proof_in_pupils'_practice_of_school_mathematics","264722245_Possible_Student_Justification_of_Proofs","262170662_From_theory_to_practice_NP-completeness_for_every_CS_student","261465939_Dynamic_programming_-_Structure_difficulties_and_teaching","260979805_Can_Peer_Instruction_Be_Effective_in_Upper-Division_Computer_Science_Courses","250888362_Supporting_abstraction_processes_in_problem_solving_through_pattern-oriented_instruction","250726160_Undergraduate_mathematics_majors'_writing_performance_producing_proofs_and_counterexamples_about_continuous_functions","247699381_Taxonomy_o_f_Educational_Objectives_Cognitive_Domain","242106003_What_do_novice_programmers_know_about_recursion","242091808_An_investigation_of_factors_related_to_self-efficacy_for_Java_programming_among_engineering_students","241081823_Clickers_A_New_Teaching_Aid_with_Exceptional_Promise","234827817_Pattern_oriented_instruction_and_the_enhancement_of_analogical_reasoning","234809416_NP-_Completeness_for_All_Computer_Science_Undergraduates_A_Novel_Project-_Based_Curriculum","234803695_A_framework_for_teaching_recursion","233894825_Guide_for_Constructing_Self-Efficacy_Scales_Revised","233820393_Social_Foundations_of_Thought_Action_A_Social_Cognitive_Theory","233465131_Learning_from_Their_Mistakes_Using_Students'_Incorrect_Proofs_as_a_Pedagogical_Tool","233185693_Can_a_proof_and_a_counterexample_coexist_Students'_conceptions_about_the_relationship_between_proof_and_refutation","232603513_Role_of_Self-Efficacy_and_Self-Concept_Beliefs_in_Mathematical_Problem_Solving_A_Path_Analysis","228328451_Taxonomy_of_educational_objectives_Handbook_I_Cognitive_domain","220808257_Using_AVs_to_explain_NP-completeness","220807410_Mental_models_of_recursion_investigating_students'_understanding_of_recursion","220555391_Introduction_to_the_Theory_of_Computation","6468149_Clickers_in_the_Large_Classroom_Current_Research_and_Best-Practice_Tips","2453372_NP-completeness_A_Retrospective","2335821_Using_Interactive_Visualization_for_Teaching_the_Theory_of_NP-completeness"]}