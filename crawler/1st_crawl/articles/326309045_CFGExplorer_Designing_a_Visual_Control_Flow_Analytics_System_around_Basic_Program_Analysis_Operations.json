{"id":"326309045_CFGExplorer_Designing_a_Visual_Control_Flow_Analytics_System_around_Basic_Program_Analysis_Operations","abstract":"To develop new compilation and optimization techniques, computer scientists frequently Consult program analysis artifacts such as Control flow graphs (CFGs) and traces of executed instructions. A CFG is a directed graph representing possible execution paths in a program. CFGs are commonly visualized as node‐link diagrams while traces are commonly viewed in raw text format. Visualizing and exploring CFGs and traces is challenging because of the complexity and specificity of the operations researchers perform. We present a design study where we collaborate with computer scientists researching dynamic binary analysis and compilation techniques. The research group primarily employs CFGs and traces to reason about and develop new algorithms for program optimization and parallelization. Through questionnaires, interviews, and a year‐long observation, we analyzed their use of visualization, noting that the tasks they perform match common subroutines they employ in their techniques. Based on this task analysis, we designed CFGExplorer, a visual analytics system that supports computer scientists with interactions that are integrated with the program structure. We developed a domain‐specific graph modification to generate graph layouts that reflect program structure. CFGExplorer incorporates structures such as functions and loops, and uses the correspondence between CFGs and traces to support navigation. We further augment the system to highlight the output of program analysis techniques, facilitating exploration at a higher level. We evaluate the tool through guided sessions and semi‐structured interviews as well as deployment. Our collaborators have integrated CFGExplorer into their workflow and use it to reason about programs, develop and debug new algorithms, and share their findings.","authors":["Sabin Devkota","Katherine Isaacs"],"meta":["June 2018Computer Graphics Forum 37(3):453-464","DOI:10.1111/cgf.13433"],"references":["319411846_Bridging_From_Goals_to_Tasks_with_Design_Study_Analysis_Reports","263895062_Semi-Automatic_Editing_of_Graphs_with_Customized_Layouts","239399685_An_Open_Graph_Visualization_System_and_Its_Applications_to_Software_Engineering","234803027_Contextual_Design","230887322_Technical_Section_CGV-An_interactive_graph_visualization_system","213891424_The_Program_Dependence_Graph_and_Its_Use_in_Optimization","6715552_ASK-GraphView_A_large_scale_graph_visualization_system_IEEE_Trans_Vis_Comput_Graph","5383340_GrouseFlocks_Steerable_Exploration_of_Graph_Hierarchy_Space","3187542_A_Technique_for_Drawing_Directed_Graphs","2870195_An_Open_Graph_Visualization_System_and_Its_Applications_to_Software_Engineering","304811670_Pathfinder_Visual_Analysis_of_Paths_in_Graphs","281328857_Proceedings_of_Drawing_Graphs_and_Maps_with_Curves_Dagstuhl_Seminar_13151","257481867_Objective_versus_subjective_measures_of_Paris_Metro_map_usability_Investigating_traditional_octolinear_versus_all-curves_schematics","227601171_Displaying_dependence_graphs_A_hierarchical_approach","220586558_Matrices_or_Node-Link_Diagrams_Which_Visual_Representation_is_Better_for_Visualising_Connectivity_Models","51751977_D-3_Data-Driven_Documents","3115111_Methods_for_Visual_Understanding_of_Hierarchical_Systems_Structure","2821926_Graph_Layout_through_the_VCG_Tool"]}