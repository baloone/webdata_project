{"id":"262327728_Language_Support_for_Dynamic_Hierarchical_Data_Partitioning","abstract":"Applications written for distributed-memory parallel architectures must partition their data to enable parallel execution. As memory hierarchies become deeper, it is increasingly necessary that the data partitioning also be hierarchical to match. Current language proposals perform this hierarchical partitioning statically, which excludes many important applications where the appropriate partitioning is itself data dependent and so must be computed dynamically. We describe Legion, a region-based programming system, where each region may be partitioned into subregions. Partitions are computed dynamically and are fully programmable. The division of data need not be disjoint and subregions of a region may overlap, or alias one another. Computations use regions with certain privileges (e.g., expressing that a computation uses a region read-only) and data coherence (e.g., expressing that the computation need only be atomic with respect to other operations on the region), which can be controlled on a per-region (or subregion) basis.\nWe present the novel aspects of the Legion design, in particular the combination of static and dynamic checks used to enforce soundness. We give an extended example illustrating how Legion can express computations with dynamically determined relationships between computations and data partitions. We prove the soundness of Legion's type system, and show Legion type checking improves performance by up to 71% by eliding provably safe memory checks. In particular, we show that the dynamic checks to detect aliasing at runtime at the region granularity have negligible overhead. We report results for three real-world applications running on distributed memory machines, achieving up to 62.5X speedup on 96 GPUs on the Keeneland supercomputer.","authors":["Sean Treichler","Michael Bauer","Alex Aiken"],"meta":["October 2013ACM SIGPLAN Notices 48(10):495-514","DOI:10.1145/2509136.2509545","Conference: Proceedings of the 2013 ACM SIGPLAN international conference on Object oriented programming systems languages & applicationsVolume: 48"],"references":["279062908_X10","242479489_Kumar_V_A_Fast_and_High_Quality_Multilevel_Scheme_for_Partitioning_Irregular_Graphs_SIAM_Journal_on_Scientific_Computing_201_359-392","234793704_A_Type_and_Effect_System_for_Deterministic_Parallel_Java","221643796_Composable_memory_transactions","221496743_Hierarchical_Place_Trees_A_Portable_Abstraction_for_Task_Parallelism_and_Data_Movement","221321632_X10_An_object-oriented_approach_to_Non-Uniform_Cluster_Computing","221321518_Ownership_encapsulation_and_the_disjointness_of_type_and_effect","220997021_Safe_Nondeterminism_in_a_Deterministic-by-Default_Parallel_Language","213880752_Sequoia_Programming_the_Memory_Hierarchy","2887036_Ownership_Types_for_Object_Encapsulation","2884461_Region-Based_Memory_Management_in_Cyclone","311474340_Language_support_for_dynamic_hierarchical_data_partitioning","279352624_X10","265454137_BENCHMARKING_MODERN_MULTIPROCESSORS","261212974_Legion_Expressing_locality_and_independence_with_logical_regions","258139318_Parallel_Programmability_and_the_Chapel_Language","222502168_Region-Based_Memory_Management","221643483_Programming_the_Memory_Hierarchy_Revisited_Supporting_Irregular_Parallelism_in_Sequoia","220751784_Language_Support_for_Regions","220105573_Titanium_A_High-performance_Java_Dialect","220093857_Keeneland_Bringing_Heterogeneous_GPU_Computing_to_the_Computational_Science_Community","3965916_Separation_logic_A_logic_for_shared_mutable_data_structures","2376490_The_Design_Implementation_and_Evaluation_of_SMART"]}