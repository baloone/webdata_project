{"id":"329572503_Models_by_OgboJr_Productions_LLC","abstract":"Data Science is all about building models. Without models we don’t have a science, we just have data. Actually, without models we’re basically doing statistics. But what are these models we speak of? A model is a description of something—often much simpler description than the thing it is trying to describe. This “model is a description” business implies that there’s a language to describe things. It also implies an implementation: we must be able to check whether something satisﬁes the description. One way to describe and verify things is to write them down. For example, a character string “2” describes a number 2. If we look at character string “3” we know it is not a number 2. Looking at another character string “2” we can verify that it is a number 2. What string would we write for square root of 2? How about “square root of 2” or shorthand: √2. Notice how we changed the language: we cannot write down the digits for √2 because it is irrational, so we invent notation in which we can write it down. Similarly, we can also write down π as “ratio of diameter to circumference of a circle”. Unfortunately the trick of inventing notation doesn’t get us very far. Most things are beyond our representation—similar to how we cannot write down irrational numbers. Even if we use English (or anything else) to describe them. The models we can build must be: ﬁnite (in description size) and computable (running time is ﬁnite). Notice how that limits the things we can describe. Everything outside of that is forever beyond our capabilities to even talk about (well, except the way we’re doing it now; e.g. we can write down ‘inﬁnity’ as a word, or a symbol ∞). Just look at any math book. All problems are ﬁnite. All problems are solvable in ﬁnite time. The building blocks are vertices, vectors, equations of lines, circles, polynomials, etc., functions such as sines, cosines, square roots, etc. There are no arbitrary curves or shapes— only those that can be described in ﬁnite number of characters on a page. Computer science too has its own set of description based limitations: every function is a mapping from input to output. Yet there are inﬁnitely more input-to-output mappings than there are programs. In other words, there are functions that cannot be described/computed by a program. So when we’re programming, such functions represent things that we just can’t write a program for.\n1\nTo bring the discussion back to models: Our model description language will be made out of simple building blocks, such as vertices, vectors, linear equations, geometric objects (circles, rectangles, etc.), logic statements, etc. Models will combine these in several diﬀerent ways, but always keeping the full model description ﬁnite and computable. Another requirement of a model: it is desirable to have a model that we can learn or adjust from data. This is the reason why many models are trivially simple: it’s easy to adjust them using data.","authors":["Alexander Sverdlov","Ogbonnaya Jr. Njiolenaka Akpara"],"meta":["December 2018"],"references":[]}