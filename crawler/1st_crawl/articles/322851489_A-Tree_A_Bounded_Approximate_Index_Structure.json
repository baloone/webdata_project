{"id":"322851489_A-Tree_A_Bounded_Approximate_Index_Structure","abstract":"Index structures are one of the most important tools that DBAs leverage in order to improve the performance of analytics and transactional workloads. However, with the explosion of data that is constantly being generated in a wide variety of domains including autonomous vehicles, Internet of Things (IoT) devices, and E-commerce sites, building several indexes can often become prohibitive and consume valuable system resources. In fact, a recent study has shown that indexes created as part of the TPC-C benchmark can account for 55% of the total memory available in a state-of-the-art in-memory DBMS. This overhead consumes valuable and expensive main memory, and limits the amount of space that a database has available to store new data or process existing data. In this paper, we present a novel approximate index structure called A-Tree. At the core of our index is a tunable error parameter that allows a DBA to balance lookup performance and space consumption. To navigate this tradeoff, we provide a cost model that helps the DBA choose an appropriate error parameter given either (1) a lookup latency requirement (e.g., 500ns) or (2) a storage budget (e.g., 100MB). Using a variety of real-world datasets, we show that our index structure is able to provide performance that is comparable to full index structures while reducing the storage footprint by orders of magnitude.","authors":["Alex Galakatos","Michael Markovitch","Carsten Binnig","Rodrigo L C Fonseca"],"meta":["January 2018"],"references":["276465165_BF-tree_Approximate_Tree_Indexing","319600464_Revisiting_reuse_for_approximate_query_processing","312875953_Two_birds_one_stone_a_fast_yet_lightweight_indexing_scheme_for_modern_database_systems","304021516_Reducing_the_Storage_Overhead_of_Main-Memory_OLTP_Databases_with_Hybrid_Indexes","304021176_UpBit_Scalable_In-Memory_Updatable_Bitmap_Indexing","261087784_The_adaptive_radix_tree_ARTful_indexing_for_main-memory_databases","256209282_Computational_methods_for_best_spline_function_approximation","238501969_PP-Index_Using_Permutation_Prefixes_for_Efficient_and_Scalable_Approximate_Similarity_Search","227105477_Chebyshev_approximation_by_spline_functions_with_free_knots","223700828_Dimensionality_Reduction_for_Similarity_Searching_in_Dynamic_Databases"]}