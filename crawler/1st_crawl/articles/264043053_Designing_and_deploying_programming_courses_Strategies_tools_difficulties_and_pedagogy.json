{"id":"264043053_Designing_and_deploying_programming_courses_Strategies_tools_difficulties_and_pedagogy","abstract":"Designing and deploying programming courses is undoubtedly a challenging task. In this paper, an attempt to analyze important aspects of a sequence of two courses on imperative-procedural and object-oriented programming in a non-CS majors Department is made. This analysis is based on a questionnaire filled in by fifty students in a voluntary basis. The issues of the programming courses that are investigated refer to: the strategy selected for the introduction to programming; the sequence of the programming techniques and languages taught and the transition from the one to the other; students’ difficulties with programming in general and with imperative-procedural and object-oriented programming in specific; the teaching and learning design of both courses; and the material that students rely on for learning programming. Based on the analysis of students’ replies on the questionnaire, related work and the instructor’s experience on teaching the courses, conclusions are drawn regarding all the aforementioned aspects of designing and deploying programming courses. The main contribution of the paper is the fact that all the important and interrelated aspects of a sequence of two programming courses are investigated in conjunction, providing realistic implications and guidelines for improving the quality and effectiveness of existing programming courses and designing and deploying new courses. The main results refer to the usage of a pseudo-language for an introduction to programming, the transition from procedural to object-oriented programming, the intrinsic difficulties of learning programming, and practices for a more successful teaching and learning design of programming courses.\n\nhttp://www.springer.com/alert/urltracking.do?id=L530c877Mfaf813Sb10d373","authors":["Stelios Xinogalos"],"meta":["May 2016Education and Information Technologies 21(3):559-588","DOI:10.1007/s10639-014-9341-9"],"references":["292573981_Acquisition_of_Programming_Knowledge_and_Skills","258011388_Programming_Techniques_and_Environments_in_a_Technology_Management_Department","258010581_Exploring_the_effects_of_Collaboration_Scripts_embedded_in_a_Distributed_Pair_Programming_System","255964908_Using_Flowchart-based_Programming_Environments_for_Simplifying_Programming_and_Software_Engineering_Processes","227186529_Mini-languages_A_way_to_learn_programming_principles","223617670_An_introduction_to_object-oriented_programming_with_a_didactic_microworld_objectKarel","221538349_Avoiding_object_misconceptions","221537965_Programming_in_context_a_model-first_approach_to_CS1","221537273_The_top_10_reasons_why_object-oriented_programming_can't_be_taught_in_CS_1","221536843_Student_understanding_of_object-oriented_programming_as_expressed_in_concept_maps","220832185_My_Program_is_Correct_But_it_Doesn_t_Run_A_Preliminary_Investigation_of_Novice_Programmers_Problems","220808194_A_study_of_the_difficulties_of_novice_programmers","220808148_Checklists_for_grading_object-oriented_CS1_programs_concepts_and_misconceptions","220807323_Novice_Java_programmers'_conceptions_of_object_and_class_and_variation_theory","220807260_Identifying_Novice_Difficulties_in_Object_Orientated_Design","220590718_A_Formal_Language_Selection_Process_for_Introductory_Programming_Courses","200085843_Usability_Issues_in_the_Design_of_Novice_Programming_Systems","2758900_Thetis_An_ANSI_C_Programming_Environment_Designed_for_Introductory_Use","319243806_Using_Educational_Tools_for_Teaching_Object_Oriented_Design_and_Programming","312915607_My_program_is_correct_but_it_doesn't_run_A_preliminary_investigation_of_novice_programmers'_problems","311483447_Let's_begin_introducing_the_object-oriented_paradigm","274056621_Programming_in_Java","271452975_Partonomy_and_taxonomy_in_object-oriented_thinking","247274567_Programming_agents_without_a_programming_language","242535999_An_introductory_pascal_class_a_case_study_of_student_errors","242505732_Introduction_to_oo_teaching_objects-first_in_introductory_computer_science","242504995_The_concept_of_variable_in_programming_Its_meaning_and_use_in_problem-solving_by_novice_programmers","242484727_Hirshfield_the_top_10_reasons_why_object-oriented_programming_can't_be_taught_in_cs_i","242106003_What_do_novice_programmers_know_about_recursion","242013521_An_Evaluation_of_Knowledge_Transfer_from_Microworld_Programming_to_Conventional_Programming","239545069_Learning_Flow_of_Control_Recursive_and_Iterative_Procedures","238685295_A_Summary_of_Misconceptions_of_High_School_Basic_Programmers","231167919_Some_Difficulties_of_Learning_to_Program","231167898_Some_Difficulties_of_Learning_to_Program","228858563_A_long-term_investigation_of_the_comprehension_of_OOP_concepts_by_novices","221538800_On_using_C_and_object-orientation_in_CS1_the_message_is_still_more_important_than_the_medium","221537467_Let's_begin_introducing_the_object-oriented_paradigm","221537075_Programming_in_Java_Student-constructed_rules","221130728_Difficulties_with_Collection_Classes_in_Java_-_The_Case_of_the_ArrayList_Collection","220808190_Constructivist_approach_to_object-oriented_design_and_programming","220807909_A_constructivist_framework_for_integrating_the_Java_paradigm_into_the_undergraduate_curriculum","220807889_Object_oriented_students_poster","220707138_Choosing_a_first_programming_language","220691770_The_art_and_science_of_C_-_a_library-based_introduction_to_computer_science","220613438_Partonomy_and_taxonomy_in_object-oriented_thinking_junior_high_school_students'_perceptions_of_object-oriented_basic_concepts","220424846_KidSim_Programming_Agents_Without_a_Programming_Language","220420384_Novice_Mistakes_Are_the_Folk_Wisdoms_Correct","200534698_Cognitive_activities_of_abstraction_in_object_orientation_An_empirical_study","200085837_Learning_and_Teaching_Programming_A_Review_and_Discussion","3640425_Seven_deadly_sins_of_introductory_programming_language_design","2551403_Teaching_Objects-first_In_Introductory_Computer_Science"]}