{"id":"340514944_Java-MaC_A_Run-time_Assurance_Approach_for_Java_Programs","abstract":"We describe Java-MaC, a prototype implementation of the Monitoring and Checking (MaC) architecture for Java programs. The MaC architecture provides assurance that the target program is running correctly with respect to a formal requirements specification by monitoring and checking the execution of the target program at run-time. MaC bridges the gap between formal verification, which ensures the correctness of a design rather than an implementation, and testing, which does not provide formal guarantees about the correctness of the system.\nUse of formal requirement specifications in run-time monitoring and checking is the salient aspect of the MaC architecture. MaC is a lightweight formal method solution which works as a viable complement to the current heavyweight formal methods. In addition, analysis processes of the architecture including instrumentation of the target program, monitoring, and checking are performed fully automatically without human direction, which increases the accuracy of the analysis. Another important feature of the architecture is the clear separation between monitoring implementation-dependent low-level behaviors and checking high-level behaviors, which allows the reuse of a high-level requirement specification even when the target program implementation changes. Furthermore, this separation makes the architecture modular and allows the flexibility of incorporating third party tools into the architecture. The paper presents an overview of the MaC architecture and a prototype implementation Java-MaC.","authors":["MoonZoo Kim","Mahesh Viswanathan","Sampath Kannan","Insup Lee"],"meta":["March 2004Formal Methods in System Design 24(2):129-155","DOI:10.1023/B%3AFORM.0000017719.43755.7c"],"references":["232261774_Monitoring_Checking_and_Steering_of_Real-Time_Systems","223697270_Collecting_and_Analyzing_Data_from_Distributed_Control_Programs","45598352_Distributed_Spatial_Control_and_Global_Monitoring_of_Mobile_Agents","3866977_Model_Checking_Programs","242622159_On_the_usability_of_logics_which_handle_partial_functions","237128841_The_Temporal_Logic_of_Reactive_and_Concurrent_Systems_Safety","222514569_Jass_-_Java_with_Assertions","3864359_Bandera_Extracting_finite-state_models_from_Java_source_code","3754323_A_unified_approach_for_specifying_timing_constraints_and_composite_events_in_active_real-time_database_systems","3726243_Early_detection_of_timing_constraint_violation_at_runtime"]}