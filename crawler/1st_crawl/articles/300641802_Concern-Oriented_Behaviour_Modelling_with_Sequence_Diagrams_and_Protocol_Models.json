{"id":"300641802_Concern-Oriented_Behaviour_Modelling_with_Sequence_Diagrams_and_Protocol_Models","abstract":"Concern-Oriented REuse (CORE) is a multi-view modelling approach that builds on the disciplines of model-driven engineering, software product lines and aspect-orientation to define broad units of reuse, so called concerns. Concerns specify the essence of a design solution and its different variations, if any, using multiple structural and behavioural views, and expose the encapsulated functionality through a three-part interface: a variation, a customization and a usage interface. Concerns can reuse other concerns, and model composition techniques are used to create complex models in which these concerns are intertwined. In such a context, specifying the composition of the models is a non-trivial task, in particular when it comes to specifying the composition of behavioural models. This is the case for CORE message views, which define behaviour using sequence diagrams. In this paper we describe how we added an additional behavioural view to CORE – the state view – that specifies the allowed invocation protocol of class instances. We discuss why Protocol Modelling, a compositional modelling approach based on state diagrams, is an appropriate notation to specify such a state view, and show how we added support for protocol modelling to the CORE metamodel. Finally, we demonstrate how to model using the new state views by means of an example, and explain how state views can be exploited to model-check the correctness of behavioural compositions.","authors":["Wisam Al Abed","Matthias Schöttle","Abir Ayed","Jörg Kienzle"],"meta":["January 2015","DOI:10.1007/978-3-319-21912-7_10","In book: Behavior Modeling -- Foundations and Applications (pp.250-278)"],"references":["284354851_Industrial_Adoption_of_Model-Driven_Engineering_Are_the_Tools_Really_the_Problem","268202441_TouchRAM_A_Multitouch-Enabled_Tool_for_Aspect-Oriented_Software_Design","267774700_Using_Aspects_to_Abstract_and_Modularize_Statecharts","265510850_Concern-Oriented_Software_Design","259891154_Towards_Model_and_Language_Composition","229071927_Composition_semantics_for_executable_and_evolvable_behavioral_modeling_in_MDA","228383184_Reusable_aspect_models","221223858_HiLA_High-Level_Aspects_for_UML_State_Machines","220116583_Aspect-Oriented_Development_Using_Protocol_Modeling","220059431_Protocol_modelling_A_modelling_approach_that_supports_reusable_behavioural_abstractions","215588323_Feature-Oriented_Domain_Analysis_FODA_feasibility_study","215588315_Aspect-oriented_Multi-view_Modeling","245805381_Communicating_Sequential_Processes","242504479_Communicating_Sequential_Processes","221014877_AO_challenge_-_Implementing_the_ACID_properties_for_transactional_objects","220503833_Complexity_Metrics_for_Systems_Development_Methods_and_Techniques","220116609_AspectOptima_A_Case_Study_on_Aspect_Dependencies_and_Interactions","46102582_A_model_for_communicating_sequential_process","37422675_Open_Multithreaded_Transactions_-_A_Transaction_Model_for_Concurrent_Object-Oriented_Programming","10255186_The_Magical_Number_Seven_Plus_Or_Minus_2_Some_Limits_On_Our_Capacity_for_Processing_Information","2956483_Guest_Editor's_Introduction_Model-Driven_Engineering"]}