{"id":"292076603_Computational_completeness_of_complete_star-like_and_linear_hybrid_networks_of_evolutionary_processors_with_a_small_number_of_processors","abstract":"A hybrid network of evolutionary processors (HNEP) is a graph where each node is associated with a special rewriting system called an evolutionary processor, an input filter, and an output filter.\nEach evolutionary processor is given a finite set of one type of point mutations (insertion, deletion or a substitution of a symbol) which can be applied to certain positions in a string. An HNEP rewrites the strings in the nodes and then re-distributes them according to a filter-based communication protocol; the filters are defined by certain variants of random-context conditions. HNEPs can be considered both as languages generating devices (GHNEPs) and language accepting devices (AHNEPs); most previous approaches treated the accepting and generating cases separately. For both cases, in this paper we show that five nodes are sufficient to accept (AHNEPs) or generate (GHNEPs) any recursively enumerable language by showing the more general result that any partial recursive relation can be computed by an HNEP with (at most) five nodes with the underlying graph structure for the communication between the evolutionary processors being the complete or the linear graph with five nodes, whereas with a star-like communication graph we need six nodes. If the final results are defined by only taking the terminal strings out of the designated output node, then for these extended HNEPs we can prove that only four nodes are needed in all cases—for computing any partial recursive relation as well as for generating and accepting any recursively enumerable language—and the underlying communication structure can be a complete or a linear graph, but now even a star-like graph, too.","authors":["Artiom Alhazov","Rudolf Freund","Vladimir Rogozhin","Yurii Rogozhin"],"meta":["March 2016Natural Computing 15(1)","DOI:10.1007/s11047-015-9534-1"],"references":["273945946_Smallest_Filters_in_Complete_Obligatory_Hybrid_Networks_of_Evolutionary_Processors","262572647_Generating_and_Accepting_P_Systems_with_Minimal_Left_and_Right_Insertion_and_Deletion","228609625_Nine_Universal_Circular_Post_Machines","226864941_Accepting_Hybrid_Networks_of_Evolutionary_Processors","312446089_Computationally_complete_chains_of_evolutionary_processors_with_random_context_filters","279293965_On_the_Power_of_Accepting_Networks_of_Evolutionary_Processors_with_Special_Topologies_and_Random_Context_Filters","273945886_Five_Nodes_Are_Sufficient_for_Hybrid_Networks_of_Evolutionary_Processors_to_Be_Computationally_Complete","239538954_Formal_reduction_of_the_general_combinatorial_decision_problem","225201003_Small_universal_accepting_hybrid_networks_of_evolutionary_processors","223582764_All_NP-problems_can_be_solved_in_polynomial_time_by_accepting_hybrid_networks_of_evolutionary_processors_of_constant_size","221582171_Solving_NP-Complete_Problems_With_Networks_of_Evolutionary_Processors","221563785_Circular_Post_Machines_and_P_Systems_with_Exo-insertion_and_Deletion","221539651_Obligatory_Hybrid_Networks_of_Evolutionary_Processors","221467375_Computational_Completeness_of_Hybrid_Networks_of_Evolutionary_Processors_with_Seven_Nodes","221150005_New_Small_Universal_Circular_Post_Machines"]}