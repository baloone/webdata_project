{"id":"257640653_On_position_restricted_substring_searching_in_succinct_space","abstract":"We study the position restricted substring searching (PRSS) problem, where the task is to index a text T[0⋯n-1] of n characters over an alphabet set Σ of size δ, in order to answer the following: given a query pattern P (of length p) and two indices ℓ and r, report all occ ℓ,r occurrences of P in T[ℓ⋯r]. Known indexes take O(nlogn) bits or O(nlog 1+ϵ n) bits space, and answer this query in O(p+logn+occ ℓ,r logn) time or in optimal O(p+occ ℓ,r ) time respectively, where ϵ is any positive constant. The main drawback of these indexes is their space requirement of Ω(nlogn) bits, which can be much more than the optimal logδ bits to store the text T. This paper addresses an open question asked by V. Mäkinen and G. Navarro [Lect. Notes Comput. Sci. 3887, 703–714 (2006; Zbl 1145.68392)], which is whether it is possible to design a succinct index answering PRSS queries efficiently. We first study the hardness of this problem and prove the following result: a succinct (or a compact) index cannot answer PRSS queries efficiently in the pointer machine model, and also not in the RAM model unless bounds on the well-researched orthogonal range query problem improve. However, for the special case of sufficiently long query patterns, that is for Ω(log 2+ϵ n), we derive an |CSA f |+|CSA r |+o(n) bits index with optimal query time, where |CSA f | and |CSA r | are the space (in bits) of the compressed suffix arrays (with O(p) time for pattern search) of T and T ← (the reverse of T) respectively. The space can be reduced further to |CSA f |+o(n)| bits with a resulting query time will be O(p+occ ℓ,r +log 3+ϵ n). For the general case, where there is no restriction on pattern length, we obtain an O(1 ϵ3nlogδ) bits index with O(p+occ ℓ,r +n ϵ ) query time. We use suffix sampling techniques to achieve these space-efficient indexes.","authors":["Wing-Kai Hon","Rahul Shah","Sharma V. Thankachan","Jeffrey Scott Vitter"],"meta":["December 2012Journal of Discrete Algorithms 17:109–114","DOI:10.1016/j.jda.2012.09.002"],"references":["249916485_Ordered_Pattern_Matching_Towards_Full-Text_Retrieval","229067733_Linear_Pattern_Matching_Algorithm","221664282_Linear-Space_Substring_Range_Counting_over_Polylogarithmic_Alphabets","221314071_Substring_Range_Reporting","220430619_Indexing_compressed_text","51931490_Lecture_Notes_in_Computer_Science","50387323_Compressed_Suffix_Arrays_and_Suffix_Trees_with_Applications_to_Text_Indexing_and_String_Matching","4323900_Geometric_Burrows-Wheeler_Transform_Linking_Range_Searching_and_Text_Indexing","226440176_Efficient_worst-case_data_structures_for_range_searching","225112633_Lecture_Notes_in_Computer_Science","221580213_Lecture_Notes_in_Computer_Science","220994452_Improved_Algorithms_for_the_Range_Next_Value_Problem_and_Applications","220980228_Lecture_Notes_in_Computer_Science","220779327_Suffix_Arrays_a_New_Method_for_On-Line_String_Searches","220770796_Alphabet-Independent_Compressed_Text_Indexing","220431105_A_Space-Economical_Suffix_Tree_Construction_Algorithm","220431093_Lower_Bounds_for_Orthogonal_Range_Searching_I_The_Reporting_Case","50869742_Orthogonal_Range_Searching_on_the_RAM_Revisited","40884230_Compressed_Full-Text_Indexes"]}