{"id":"328402005_Verifying_a_Concurrent_Garbage_Collector_with_a_Rely-Guarantee_Methodology","abstract":"Concurrent garbage collection algorithms are a challenge for program verification. In this paper, we address this problem by proposing a mechanized proof methodology based on the Rely-Guarantee proof technique. We design a compiler intermediate representation with strong type guarantees, dedicated support for abstract concurrent data structures, and high-level iterators on runtime internals. In addition, we define an Rely-Guarantee program logic supporting an incremental proof methodology where annotations and invariants can be progressively enriched. We formalize the intermediate representation, the proof system, and prove the soundness of the methodology in the Coq proof assistant. Equipped with this, we prove a fully concurrent garbage collector where mutators never have to wait for the collector.","authors":["Yannick Zakowski","David Cachera","Delphine Demange","Gustavo Petri"],"meta":["August 2019Journal of Automated Reasoning 63(1â€“3)","DOI:10.1007/s10817-018-9489-x"],"references":["328724682_A_Verified_Generational_Garbage_Collector_for_CakeML","282485043_Relaxing_Safely_Verified_On-the-Fly_Garbage_Collection_for_x86-TSO","266657665_Atomicity_Refinement_for_Verified_Compilation","262392168_Plan_B_A_Buffered_Memory_Model_for_Java","326164155_Verified_compilation_of_linearizable_data_structures_mechanizing_rely_guarantee_for_semantic_refinement","325142264_Mechanized_Verification_of_Fine-Grained_Concurrent_Programs","319203038_Verifying_a_Concurrent_Garbage_Collector_Using_a_Rely-Guarantee_Methodology","319202891_A_Verified_Generational_Garbage_Collector_for_CakeML","300645984_Automated_and_Modular_Refinement_Reasoning_for_Concurrent_Programs","282926114_The_Reflective_Milawa_Theorem_Prover_is_Sound_Down_to_the_Machine_Code_that_Runs_it"]}