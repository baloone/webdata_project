{"id":"224483341_Database_Applications_of_the_fetch-and-add_Instruction","abstract":"The FETCH-AND-ADD instruction provides for synchronization of multiple processes in a parallel manner. This paper explores the use of FETCH-AND-ADD in the context of database systems. We show how to enqueue locks, detect lock conflicts, and release locks without resorting to critical program sections that require mutual exclusion during execution. The scheme is compatible with a variant of lock management proposed by Rosenkrantz and Stearns. A second approach to parallel lock management is based on a reservation scheme by Milenkovic. This methodology uses FETCH-AND-ADD implementation of a priority queue. An implementation of such a queue originally reported by Gottlieb and Kruskal is used for this purpose, although the storage requirements for queue management may be unacceptably large in specific cases. Both approaches described in the paper suggest that FETCH-AND-ADD is potentially effective for eliminating serial bottlenecks caused by lock conflicts in multiprocessor systems.","authors":["Harold S. Stone"],"meta":["August 1984IEEE Transactions on Computers C-33(7):604 - 612","DOI:10.1109/TC.1984.5009333","SourceIEEE Xplore"],"references":["3048187_The_NYU_Ultracomputer_Designing_an_MIMD_Shared_Memory_Parallel_Computer","247693585_System_Level_Concurrency_Control_for_Database_Systems","242461947_Coordinating_large_numbers_of_processors","242363827_The_nyu_ultracomputer_--_designing_an_mjmd_shared_memory_parallel_computer","234769720_Coordinating_parallel_processors_A_partial_unification","33889243_Update_synchronization_in_multiaccess_database_systems","2958787_Networks_and_Algorithm_for_Very-Large-Scale_Parallel_Computation"]}