{"id":"318283640_Automated_Bug_Removal_for_Software-Defined_Networks","abstract":"When debugging an SDN application, diagnosing the problem is merely the first step: the operator must still find a fix that solves the problem, without causing new problems elsewhere. However, most existing debuggers focus exclusively on diagnosis and offer the network operator little or no help with finding an effective fix. Finding a suitable fix is difficult because the number of candidates can be enormous. In this paper, we propose a step towards automated repair for SDN applications. Our approach consists of two elements. The first is a data structure that we call meta provenance, which can be used to efficiently find good candidate repairs. Meta provenance is inspired by the provenance concept from the database community; however, whereas standard provenance can only reason about changes to data, meta provenance can also reason about changes to programs. The second element is a system that can efficiently backtest a set of candidate repairs using historical data from the network. This is used to eliminate candidate repairs that do not work well, or that cause other problems. We have implemented a system that maintains meta provenance for SDNs, as well as a prototype debugger that uses the meta provenance to automatically suggest repairs. Results from several case studies show that, for problems of moderate complexity, our debugger can find high-quality repairs within one minute.","authors":["Yang Wu","Andreas Haeberlen","Wenchao Zhou","Boon T Loo"],"meta":["July 2017","Project: Meta provenance"],"references":["303164480_A_NICE_way_to_test_OpenFlow_applications","301462139_Automated_Network_Repair_with_Meta_Provenance","290989616_Kinetic_Verifiable_Dynamic_Network_Control","316899960_Genesis_synthesizing_forwarding_tables_in_multi-tenant_networks","313580789_Program_slicing","313407038_Real_time_network_policy_checking_using_header_space_analysis","305781084_The_Good_the_Bad_and_the_Differences_Better_Network_Diagnostics_with_Differential_Provenance","303198479_Resilient_distributed_datasets_A_fault-tolerant_abstraction_for_in-memory_cluster_computing","300489673_NetGen","300204942_Tierless_Programming_and_Reasoning_for_Networks"]}