{"id":"326918072_Automated_Plagiarism_Detection_for_Computer_Programming_Exercises_Based_on_Patterns_of_Resubmission","abstract":"Plagiarism detection for computer programming exercises is a difficult problem. A traditional strategy has been to compare the submissions from all of the students in a class, searching for similarities between submissions suggestive of copying. Automated tools exist that compare submissions in order to help with this search. Increasingly, however, instructors have allowed students to submit multiple solutions, receiving formative feedback between submissions, with feedback often generated by automated assessment systems. Allowing multiple submissions allows for a fundamentally new way to detect plagiarism. Specifically, students may struggle with an exercise until frustration leads them to submit work that is not their own. We present a method for detecting plagiarism from the sequence of submissions made by an individual student. We have explored a variety of measures of program change over submissions, and we have found a set of features that can be transformed, using logistic regression, into a score capturing the likelihood of plagiarism. We have applied this method to data from four exercises from an undergraduate programming class. We show that our automatically generated scores are strongly correlated with the assessments of plagiarism made by an expert instructor. Thus, the scores can act as a powerful tool for searching for cases of academic dishonesty.","authors":["Narjes Tahaei","David Noelle"],"meta":["August 2018","DOI:10.1145/3230977.3231006","Conference: the 2018 ACM Conference"],"references":["331132565_A_Comparison_of_Similarity_Techniques_for_Detecting_Source_Code_Plagiarism","276162253_How_automated_feedback_through_text_mining_changes_plagiaristic_behavior_in_online_assignments","271940035_Programming_Pluralism_Using_Learning_Analytics_to_Detect_Patterns_in_the_Learning_of_Computer_Programming","266493507_Design_of_the_AC_Academic_Plagiarism_Detection_System","261164999_A_coding_style-based_plagiarism_detection","224182598_Language-Independent_Clone_Detection_Applied_to_Plagiarism_Detection","301454067_Binary_instant_feedback_on_programming_exercises_can_reduce_student_engagement_and_promote_cheating","298715993_Cross-language_source_code_re-use_detection_using_latent_semantic_analysis","269681724_Applied_Categorical_Data_Analysis","264828888_Uncovering_Source_Code_Reuse_in_Large-Scale_Academic_Environments","263541515_Using_Learning_Analytics_to_Understand_the_Learning_Pathways_of_Novice_Programmers","244438006_Plagiarism_in_natural_and_programming_languages_An_overview_of_current_tools_and_technologies","239567615_Binary_Codes_Capable_of_Correcting_Deletions","238669640_An_algorithm_for_differential_file_comparison","234830599_An_algorithmic_approach_to_the_detection_and_prevention_of_plagiarism","228328445_MOSS_A_System_for_Detecting_Software_Plagiarism","228057706_Indexing_By_Latent_Semantic_Analysis","51986583_Binary_Codes_Capable_of_Correcting_Deletions_Insertions_and_Reversals"]}