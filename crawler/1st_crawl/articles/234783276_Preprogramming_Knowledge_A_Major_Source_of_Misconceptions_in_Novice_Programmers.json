{"id":"234783276_Preprogramming_Knowledge_A_Major_Source_of_Misconceptions_in_Novice_Programmers","abstract":"We present a process model to explain bugs produced by novices early in a programming course. The model was motivated by interviews with novice programmers solving simple programming problems. Our key idea is that many programming bugs can be explained by novices inappropriately using their knowledge of step-by-step procedural specifications in natural language. We view programming bugs as patches generated in response to an impasse reached by the novice while developing a program. We call such patching strategies bug generators. Several of our bug generators describe how natural language preprogramming knowledge is used by novices to create patches. Other kinds of bug generators are also discussed. We describe a representation both for novice natural language preprogramming knowledge and novice fragmentary programming knowledge. Using these representations and the bug generators, we evaluate the model by analyzing four interviews with novice programmers.","authors":["Jeffrey G. Bonar","Elliot Soloway"],"meta":["June 1985Human-Computer Interaction 1(2):133-161","DOI:10.1207/s15327051hci0102_3"],"references":["313169658_Protocol_methods_in_research_on_mathematical_thinking","311870284_Repair_Theory_A_Generative_Theory_of_Bugs_in_Procedural_Skills","292317405_Addition_and_subtraction_A_cognitive_perspective_pp","242602039_What_do_novices_know_about_programming","240355188_Towards_a_process_model_for_high_school_algebra","239584695_An_empirical_invest_igation_of_the_tacit_plan_knowledge_in_programming","238983414_Students_Preconceptions_in_Introductory_Mechanics","235700798_Human_problem_solving","235678850_Empirical_Studies_of_Programming_Knowledge","234651119_Student_Conceptions_of_Semantically_Laden_Letters_in_Algebra_A_Technical_Report"]}