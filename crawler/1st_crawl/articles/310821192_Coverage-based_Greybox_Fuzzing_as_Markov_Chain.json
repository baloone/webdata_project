{"id":"310821192_Coverage-based_Greybox_Fuzzing_as_Markov_Chain","abstract":"Coverage-based Greybox Fuzzing (CGF) is a random testing approach that requires no program analysis. A new test is generated by slightly mutating a seed input. If the test exercises a new and interesting path, it is added to the set of seeds; otherwise, it is discarded. We observe that most tests exercise the same few \"high-frequency\" paths and develop strategies to explore significantly more paths with the same number of tests by gravitating towards low-frequency paths. We explain the challenges and opportunities of CGF using a Markov chain model which specifies the probability that fuzzing the seed that exercises path i generates an input that exercises path j. Each state (i.e., seed) has an energy that specifies the number of inputs to be generated from that seed. We show that CGF is considerably more efficient if energy is inversely proportional to the density of the stationary distribution and increases monotonically every time that seed is chosen. Energy is controlled with a power schedule.\nWe implemented the exponential schedule by extending AFL. In 24 hours, AFLFAST exposes 3 previously unreported CVEs that are not exposed by AFL and exposes 6 previously unreported CVEs 7x faster than AFL. AFLFAST produces at least an order of magnitude more unique crashes than AFL.","authors":["Marcel BÃ¶hme","Thuan Pham","Abhik Roychoudhury"],"meta":["October 2016","DOI:10.1145/2976749.2978428","Conference: the 2016 ACM SIGSAC Conference"],"references":["303773719_Coverage-directed_differential_testing_of_JVM_implementations","241770404_Probabilistic_symbolic_execution","221554473_Taint-based_Directed_Whitebox_Fuzzing","220713569_TaintScope_A_Checksum-Aware_Directed_Fuzzing_Tool_for_Automatic_Software_Vulnerability_Detection","220422300_An_Empirical_Study_of_the_Reliability_of_UNIX_Utilities","6026283_Optimization_by_Simulated_Annealing","316906731_Driller_Augmenting_Fuzzing_Through_Selective_Symbolic_Execution","316856855_S2E_a_platform_for_in-vivo_multi-path_analysis_of_software_systems","315615471_Automated_Vulnerability_Analysis_Leveraging_Control_Flow_for_Evolutionary_Input_Crafting","313527105_QEMU_-_A_Fast_and_Portable_Dynamic_Translator","310819146_Model-based_whitebox_fuzzing_for_program_binaries","292667446_SAGE_Whitebox_fuzzing_for_security_testing_SAGE_has_had_a_remarkable_impact_at_Microsoft","283518264_Program-Adaptive_Mutational_Fuzzing","283460591_SE_A_Platform_for_In-Vivo_Multi-Path_Analysis_of_Software_Systems","282891045_A_Probabilistic_Analysis_of_the_Efficiency_of_Automated_Software_Testing","267199248_Hybrid_Fuzz_Testing_Discovering_Software_Bugs_via_Fuzzing_and_Symbolic_Execution","262399416_Regression_tests_to_expose_change_interaction_errors","262170417_Scheduling_black-box_mutational_fuzzing","239445375_Cambridge_Series_in_Statistical_and_Probabilistic_Mathematics","220881014_QEMU_a_Fast_and_Portable_Dynamic_Translator","220851853_KLEE_Unassisted_and_Automatic_Generation_of_High-Coverage_Tests_for_Complex_Systems_Programs","220447062_The_Anatomy_of_a_Large-Scale_Hypertextual_Web_Search_Engine","220309880_SAGE_Whitebox_Fuzzing_for_Security_Testing","220045421_Optimization_by_simulated_annealing","200047922_The_Anatomy_of_a_Large-Scale_Hypertextual_Web_Search_Engine","200044584_The_anatomy_of_a_large-scale_hypertextual_Web_search_engine","4303457_Automated_Vulnerability_Analysis_Leveraging_Control_Flow_for_Evolutionary_Input_Crafting"]}