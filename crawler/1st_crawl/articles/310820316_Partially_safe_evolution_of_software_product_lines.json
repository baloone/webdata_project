{"id":"310820316_Partially_safe_evolution_of_software_product_lines","abstract":"A key challenge developers might face when evolving a product line is not to inadvertently affect users of existing products. In refactoring and conservative extension scenarios, we can avoid this problem by checking for behavior preservation, either by testing the generated products or by using formal theories. Product line refinement theories support that by requiring behavior preservation for all existing products. However, in many evolution scenarios, such as bug fixing, there is a high chance that only some of the products are refined. To support developers in these and other non full-refinement situations, we define a theory of partial product line refinement that helps to precisely understand which products should not be affected by an evolution scenario. This provides a kind of impact analysis that could, for example, reduce test effort, since products not affected do not need to be tested. Additionally, we formally derive a catalog of eight partial refinement templates that capture evolution scenarios, and associated preconditions, not covered before. Finally, by analyzing 79218 commits from the Linux repository, we find evidence that the proposed templates could cover a number of practical evolution scenarios.","authors":["Gabriela Sampaio","Paulo Borba","Leopoldo Motta Teixeira"],"meta":["September 2016","DOI:10.1145/2934466.2934482","Conference: the 20th International Systems and Software Product Line Conference"],"references":["303413628_FEVER_extracting_feature-oriented_changes_from_commits","276501519_Coevolution_of_variability_models_and_related_software_artifacts_A_fresh_look_at_evolution_patterns_in_the_Linux_kernel","262412718_Extracting_feature_model_changes_from_the_Linux_kernel_using_FMDiff","230094009_Simulation-Based_Abstractions_for_Software_Product-Line_Model_Checking","221108648_Refactoring_product_lines","220883560_Model_Checking_of_Domain_Artifacts_in_Product_Line_Engineering","220716106_Modeling_and_Model_Checking_Software_Product_Lines","216168402_Reasoning_about_Edits_to_Feature_Models","215588352_Model_Checking_Lots_of_Systems_Efficient_Verification_of_Temporal_Properties_in_Software_Product_Lines","316269438_Feature-Oriented_Software_Product_Lines","311489734_Guaranteeing_Configuration_Validity_in_Evolving_Software_Product_Lines","276558076_Safe_Evolution_Templates_for_Software_Product_Lines","263808401_Temporal_and_Modal_Logic_Handbook_of_Theoretical_Computer_Science","260313318_Reducing_the_verification_cost_of_evolving_product_families_using_static_analysis_techniques","247084865_Orna_Grumberg_and_Doron_Peled","233904721_A_Theory_of_Software_Product_Line_Refinement","230625814_Temporal_and_Modal_Logic","220693462_Software_Product_Line_Engineering_Foundations_Principles_and_Techniques"]}