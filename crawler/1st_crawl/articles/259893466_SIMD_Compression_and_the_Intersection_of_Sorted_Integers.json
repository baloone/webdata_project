{"id":"259893466_SIMD_Compression_and_the_Intersection_of_Sorted_Integers","abstract":"Sorted lists of integers are commonly used in inverted indexes and database\nsystems. They are often compressed in memory. We can use the SIMD instructions\navailable in common processors to boost the speed of integer compression\nschemes. By making use of superscalar execution together with vectorization,\nour S4-BP128-D4 scheme uses as little as 0.7 CPU cycles per decoded integer\nwhile still providing state-of-the-art compression.\nHowever, if the subsequent processing of the integers is slow, the effort\nspent on optimizing decoding speed can be wasted. To show that it does not have\nto be so, we (1) vectorize and optimize the intersection of posting lists; (2)\nintroduce the SIMD Galloping algorithm. We exploit the fact that one SIMD\ninstruction can compare 4 pairs of integers at once.\nWe experiment with two TREC text collections, GOV2 and ClueWeb09 (Category\nB), using logs from AOL and the TREC million-query track. We show that using\nonly the SIMD instructions ubiquitous in all modern CPUs, our techniques for\nconjunctive queries can double the speed of a state-of-the-art approach.","authors":["Daniel Lemire","Leonid Boytsov","Nathan Kurz"],"meta":["January 2014Software Practice and Experience 46(6)","DOI:10.1002/spe.2326","SourcearXiv"],"references":["265816442_Fast_Sorted-Set_Intersection_using_SIMD_Instructions","256494594_Vectorizing_Database_Column_Scans_with_Complex_Predicates","278699087_Lecture_Notes_in_Computer_Science","266660065_Vectorized_Bloom_filters_for_advanced_SIMD_processors","266658724_Partitioned_Elias-Fano_Indexes","266658721_Skewed_partial_bitvectors_for_list_intersection","262350217_Faster_and_smaller_inverted_indices_with_treaps","256182149_Program_design_for_retrospective_searches_on_large_data_bases","254861706_Multi-Core_Main-Memory_Joins_Sort_vs_Hash_Revisited","235453107_Parallel_Prefix_Computation"]}