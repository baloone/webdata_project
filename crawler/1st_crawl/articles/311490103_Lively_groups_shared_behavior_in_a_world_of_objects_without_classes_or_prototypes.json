{"id":"311490103_Lively_groups_shared_behavior_in_a_world_of_objects_without_classes_or_prototypes","abstract":"Development environments which aim to provide short feedback loops to developers must strike a balance between immediacy and the ability to abstract and reuse behavioral modules. The Lively Kernel, a self-supporting, browser-based environment for explorative development supports standard object-oriented programming with classes or prototypes, but also a more immediate, object-centric approach for modifying and programming visible objects directly. This allows users to quickly create graphical prototypes with concrete objects. However, when developing with the object-centric approach, sharing behavior between similar objects becomes cumbersome. Developers must choose to either abstract behavior into classes, scatter code across collaborating objects, or to manually copy code between multiple objects. That is, they must choose between less concrete development, reduced maintainability, or code duplication. In this paper, we propose Lively Groups, an extension to the object-centric development tools of Lively to work on multiple concrete objects. In our approach, developers may dynamically group live objects that share behavior using tags. They can then modify and program such groups as if they were single objects. Our approach scales the Lively Kernelâ€™s explorative development approach from one to many objects, while preserving the maintainability of abstractions and the immediacy of concrete objects.","authors":["Tim Felgentreff","Jens Lincke","Robert Hirschfeld","Lauritz Thamsen"],"meta":["October 2015","DOI:10.1145/2846656.2846659","Conference: the Workshop"],"references":["254007748_Do_we_really_need_to_extend_syntax_for_advanced_modularity","241635901_The_Lively_PartsBin--A_Cloud-Based_Repository_for_Collaborative_Development_of_Active_Web_Content","241623002_Scoping_changes_in_self-supporting_development_environments_using_context-oriented_programming","220877472_Directness_and_Liveness_in_the_Morphic_User_Interface_Construction_Environment","220606957_Organizing_Programs_Without_Classes","200040381_Back_to_the_Future_The_Story_of_Squeak_A_Practical_Smalltalk_Written_in_Itself","2805979_Aspect-Oriented_Programming","301414926_Traits","298859870_22nd_international_conference_on_object-oriented_programming_systems_languages_and_applications","271143323_Context-oriented_Programming","248688626_Object_-_oriented_Software_Construction_Prentice_-_Hall_Int","239650539_Encapsulation_reusability_and_extensibility_in_object-oriented_programming_languages","238676735_Smith_self_the_power_of_simplicity","230629686_Aspect-Oriented_Programming","221249086_The_Lively_Kernel_A_Self-supporting_System_on_a_Web_Page","220828945_The_Lively_Kernel_just_for_fun_let's_take_JavaScript_seriously","220130874_An_open_implementation_for_context-oriented_layer_composition_in_ContextJS","213885820_An_overview_of_COMMON_LISP","30873047_Object_Oriented_Software_Construction","3712694_Assessing_the_Benefits_of_Incorporating_Function_Clone_Detection_in_a_Development_Process","2627001_N_Degrees_of_Separation_Multi-Dimensional_Separation_of_Concerns","2237329_A_Semantics_of_Multiple_Inheritance"]}