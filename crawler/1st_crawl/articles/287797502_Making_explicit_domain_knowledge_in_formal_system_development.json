{"id":"287797502_Making_explicit_domain_knowledge_in_formal_system_development","abstract":"Modeling languages are concerned with providing techniques and tool support for the design, synthesis and analysis of the models resulting from a given modeling activity, this activity being usually part of a system development model or process. These languages quite successfully focused on the analysis of the designed system exploiting the expressed semantic power of the underlying modeling language. The semantics of these modeling languages are well understood by the system designers and/or the modeling language users i.e. implicit semantics.\nIn general, modeling languages are not equipped with resources, concepts or entities handling explicitly domain engineering features and characteristics (domain knowledge) in which the modeled systems evolve.\nIndeed, the designer has to explicitly handle the knowledge issued and/or mined from an analysis of this application domain i.e. explicit semantics. Nowadays, making explicit the domain knowledge inside system design models does not obey to any methodological rule validated by the practice. The modeling languages users introduce through types, constraints, profiles, etc. these domain knowledge features.\nOur claim is that ontologies are good candidates for handling explicit domain knowledge. They define domain theories and provide resources for uniquely identifying domain knowledge concepts. Therefore, allowing models to make references to ontologies is a modular solution for models to explicitly handle domain knowledge.\nOvercoming the absence of explicit semantics expression in the modeling languages used to specify systems models will increase the robustness of the designed system models. Indeed, the axioms and theorems resulting from the ontologies, thanks to references, can be used to strengthen the properties of the designed models.\nThe objective of this paper is to offer rigorous mechanisms for handling domain knowledge in design models. This paper also shows how these mechanisms are set up in the cases of static, dynamic and formal models.","authors":["Yamine AÃ¯t-Ameur","Dominique Mery"],"meta":["December 2015Science of Computer Programming 121","DOI:10.1016/j.scico.2015.12.004","Project: IMPEX IMPlicit and EXplicit semantics integration in proof based developments of discrete systems"],"references":["287464504_A_categorical_approach_to_ontology_alignment","268266699_An_Ontology_and_Indexation_Based_Management_of_Services_and_Workflows_Application_to_Geological_Modeling","265798905_HCI_and_Software_Engineering_for_User_Interface_Plasticity","254222386_Ontology_alignment_for_networked_enterprise_information_system_interoperability_in_supply_chain_environment","235924381_Modeling_Ontological_Structures_with_Type_Classes_in_Coq","225070221_Evolving_GATE_to_meet_new_challenges_in_language_engineering","224812788_The_Distributed_Ontology_Language_DOL_Ontology_Integration_andInteroperability_Applied_to_Mathematical_Formalization","224001338_Four_Dark_Corners_Of_Requirements_Engineering","221553733_Deriving_Specifications_from_Requirements_An_Example","221466808_Bringing_Semantics_to_Web_Services_the_OWL-S_approach","221466419_Sesame_A_Generic_Architecture_for_Storing_and_Querying_RDF_and_RDF_Schema","221466324_The_Protege_OWL_Plugin_An_Open_Development_Environment_for_Semantic_Web_Applications","221349887_Compositionality_Ontology_and_Mereology_of_Domains","220806272_KeYmaera_A_Hybrid_Theorem_Prover_for_Hybrid_Systems_System_Description","220565934_Classification_of_Research_Efforts_in_Requirements_Engineering","220438679_Web_Service_Modeling_Ontology","220123897_An_Ontology-Based_Multimedia_Annotator_for_the_Semantic_Web_of_Language_Engineering","43652213_Rodin_An_Open_Toolset_for_Modelling_and_Reasoning_in_Event-B","3454145_Annotation_for_the_Deep_Web","291284008_Stepwise_Development_of_Formal_Models_for_Web_Services_Compositions_Modelling_and_Property_Verification","290110321_Sesame_A_Generic_Architecture_for_Storing_and_Querying_RDF_and_RDF_Schema","281329465_On_Implicit_and_Explicit_Semantics_Integration_Issues_in_Proof-Based_Development_of_Systems","262286850_A_type-theoretical_approach_for_ontologies_The_case_of_roles","242205847_A_graph_oriented_model_for_ontology_transformation_into_conceptual_data_model","222617506_CREAM_-_Creating_metadata_for_the_semantic_web","222442656_The_UML_as_a_formal_modeling_notation","221541842_Stepwise_Design_of_BPEL_Web_Services_Compositions_An_Event_B_Refinement_Based_Approach","221473804_Knowledge_Models_to_Reduce_the_Gap_between_Heterogeneous_Models_Application_to_Aircraft_Systems_Engineering","221473583_A_Proof_Based_Approach_for_Modelling_and_Verifying_Web_Services_Compositions","221262019_DLDB_Extending_Relational_Databases_to_Support_Semantic_Web_Queries","221135377_Model-based_Adaptation_for_Self-Healing_Systems","221048647_TERMINAE_method_and_integration_process_for_legal_ontology_building","220994159_Introducing_Dynamic_Constraints_in_B","220985511_A_Semantic_Repository_for_Adaptive_Services","220827125_Introducing_Institutions","220604804_Where_Are_the_Semantics_in_the_Semantic_Web","220461232_Context_Representation_in_Domain_Ontologies_and_Its_Use_for_Semantic_Integration_of_Data","29641570_Domain_Ontologies_A_Database-Oriented_Analysis","3187984_Inferring_declarative_requirements_specifications_from_operational_scenarios","2930649_3store_Efficient_Bulk_RDF_Storage","2808444_The_Ontolingua_Server_A_Tool_for_Collaborative_Ontology_Construction_International_Journal_of_Human_Computer_Studies"]}