{"id":"276161620_Guest_editorial_special_section_on_software_maintenance_and_evolution","abstract":"As described in the IEEE Standard Glossary of Software Engineering Terminology (1994), software maintenance is “The process of modifying a software system or component after delivery to correct faults, improve performance or other attributes, or adapt to a changed environment.”Since the first studies of software maintenance and evolution, (Lehman 1980; Lehman and Belady 1985), research in the area has covered a wide variety of topics. Topics range from reverse engineering, program comprehension, software migration, refactoring, and regression testing. As such the five articles in this special issue cover differ aspects of software maintenance and evolution, namely traceability link recovery and usage, understanding of issue reports, and identification/refactoring of code smells specifically related to spreadsheets.In the paper “Do Developers Benefit From Requirements Traceability When Evolving and Maintaining a Software System?” the authors conduct a controlled experiment with 71 subje ...","authors":["Massimiliano Di Penta","Jonathan I. Maletic"],"meta":["April 2015Empirical Software Engineering 20(2):410-412","DOI:10.1007/s10664-015-9382-8"],"references":["221620547_Latent_Dirichlet_Allocation","3188274_Recovering_Traceability_Links_between_Code_and_Documentation","271528890_Refactoring_Improving_the_Design_of_Existing_Code","262157385_Latent_Dirichlet_Allocation","238626125_Refactoring_Improving_the_Design_of_Existing_Programs","234799414_Program_Evolution_Processes_of_Software_Change","221592676_Refactoring_Improving_the_Design_of_Existing_Code","221556054_Software_Traceability_with_Topic_Modeling","220319974_Latent_Dirichlet_Allocation","3895379_Supporting_program_comprehension_using_semantic_and_structural_information"]}