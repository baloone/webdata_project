{"id":"349241424_Computational_Abstraction","abstract":"Representation and abstraction are two of the fundamental concepts of computer science. Together they enable “high-level” programming: without abstraction programming would be tied to machine code; without a machine representation, it would be a pure mathematical exercise. Representation begins with an abstract structure and seeks to find a more concrete one. Abstraction does the reverse: it starts with concrete structures and abstracts away. While formal accounts of representation are easy to find, abstraction is a different matter. In this paper, we provide an analysis of data abstraction based upon some contemporary work in the philosophy of mathematics. The paper contains a mathematical account of how Frege’s approach to abstraction may be interpreted, modified, extended and imported into type theory. We argue that representation and abstraction, while mathematical siblings, are philosophically quite different. A case of special interest concerns the abstract/physical interface which houses both the physical representation of abstract structures and the abstraction of physical systems.","authors":["Raymond Turner"],"meta":["February 2021Entropy 23(2):213","DOI:10.3390/e23020213"],"references":["330691978_Information_Processing_Artifacts","312626867_The_Philosophy_of_Computer_Science","328702085_The_logic_of_identity_and_copy_for_computational_artefacts","327032612_Thin_objects_An_abstractionist_account","326327276_Computational_Artifacts_Towards_a_Philosophy_of_Computer_Science","326321840_Computer_Science_Towards_a_Philosophy_of_Computer_Science","324639658_Frege's_Conception_of_Numbers_as_Objects","313599399_Handbook_of_Logic_in_Computer_Science","305261183_Programming_with_abstract_data_types","305260213_The_history_of_fortran_I_II_and_III"]}