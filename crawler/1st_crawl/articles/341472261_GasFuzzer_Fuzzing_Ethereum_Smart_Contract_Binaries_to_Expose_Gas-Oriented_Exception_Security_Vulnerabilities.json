{"id":"341472261_GasFuzzer_Fuzzing_Ethereum_Smart_Contract_Binaries_to_Expose_Gas-Oriented_Exception_Security_Vulnerabilities","abstract":"Ethereum is a kind of blockchain platform where developers may develop and run programs called smart contracts. It inherently relies on gas consumption within a specified allowance to constrain code execution, making every instruction along an execution path to be a location for raising an exception. In this paper, we present GasFuzzer, the first work in exploring the effects of gas allowance manipulation to expose gas-oriented exception security vulnerabilities. GasFuzzer consists of two phases. The first phase introduces a gas-greedy strategy to favor transactions having higher gas consumption for mutation to obtain test transactions with different gas consumptions. The second phase introduces a novel notion of fractional gas consumption coverage and a novel gas-leveling strategy. It applies them to mutate the gas allowances of some of these transactions resulting in the highest gas consumptions produced in the first phase followed by applying these allowance-mutated transactions together with those which remained non-mutated to fuzz test the smart contract. We report an evaluation of GasFuzzer via an experiment on 3170 real-world smart contracts deployed on the public Ethereum Blockchain between October 2017 and July 2019. The findings show that GasFuzzer with gas-greedy strategy can detect more Exceptions Disorder kind of security vulnerabilities (7 more cases) than the previous state-of-the-art black-box fuzzer, and GasFuzzer with gas-leveling strategy and gas coverage criterion can detect 6 additional cases of Exceptions Disorder security vulnerabilities, which is significant.","authors":["Imran Ashraf","Xiaoxue Ma","Bo Jiang","W.K. Chan"],"meta":["May 2020IEEE Access PP(99):1-1","DOI:10.1109/ACCESS.2020.2995183"],"references":["335089065_EVMFuzzer_detect_EVM_vulnerabilities_via_fuzz_testing","328511070_MadMax_surviving_out-of-gas_conditions_in_Ethereum_smart_contracts","346043483_sFuzz_an_efficient_adaptive_fuzzer_for_solidity_smart_contracts","345396329_Finding_The_Greedy_Prodigal_and_Suicidal_Contracts_at_Scale","343342059_VerX_Safety_Verification_of_Smart_Contracts","337096962_Learning_to_Fuzz_from_Symbolic_Execution_with_Application_to_Smart_Contracts","336335962_A_Fuzz_Testing_Service_for_Assuring_Smart_Contracts","328322036_Evaluating_Fuzz_Testing","328321512_Securify_Practical_Security_Analysis_of_Smart_Contracts","327131915_ContractFuzzer_fuzzing_smart_contracts_for_vulnerability_detection","325731308_Towards_saving_money_in_using_smart_contracts","314157173_Under-Optimized_Smart_Contracts_Devour_Your_Money","326728355_SmartCheck_static_analysis_of_ethereum_smart_contracts","323248811_ZEUS_Analyzing_Safety_of_Smart_Contracts","310821192_Coverage-based_Greybox_Fuzzing_as_Markov_Chain"]}