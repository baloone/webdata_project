{"id":"317820182_A_survey_of_Hardware-based_Control_Flow_Integrity_CFI","abstract":"CFI is a computer security technique that detects runtime attacks by monitoring a program's branching behavior. This work presents a detailed analysis of the security policies enforced by 21 recent hardware-based CFI architectures. The goal is to evaluate the security, limitations, hardware cost, performance, and practicality of using these policies. We show that many architectures are not suitable for widespread adoption, since they have practical issues, such as relying on accurate control flow model (which is difficult to obtain) or they implement policies which provide only limited security.","authors":["Ruan de Clercq","Ingrid Verbauwhede"],"meta":["June 2017"],"references":["284575562_The_Matter_of_Heartbleed","283121202_Counterfeit_Object-oriented_Programming_On_the_Difficulty_of_Preventing_Code_Reuse_Attacks_in_C_Applications","283055562_Losing_Control_On_the_Effectiveness_of_Control-Flow_Integrity_under_Stack_Attacks","269196975_ROPecker_A_Generic_and_Practical_Approach_For_Defending_Against_ROP_Attacks","260619041_Hardware-Assisted_Detection_of_Malicious_Software_in_Embedded_Systems","254045453_Branch_regulation_Low-overhead_protection_from_code_reuse_attacks","3049214_SmashGuard_A_Hardware_Solution_to_Prevent_Security_Attacks_on_the_Function_Return_Address","317576644_No-Jump-into-Basic-Block_Enforce_Basic_Block_CFI_on_the_Fly_for_Real-world_Binaries","316346868_Using_CoreSight_PTM_to_Integrate_CRA_Monitoring_IPs_in_an_ARM-Based_SoC","316038179_SOFIA_Software_and_control_flow_integrity_architecture","315033684_Protecting_the_Control_Flow_of_Embedded_Processors_against_Fault_Attacks","312106416_Hardware-Based_Trusted_Computing_Architectures_for_Isolation_and_Attestation","311491892_HCFI_Hardware-enforced_Control-Flow_Integrity","306301970_Data-Oriented_Programming_On_the_Expressiveness_of_Non-control_Data_Attacks","305513259_CCFI_Cryptographically_Enforced_Control_Flow_Integrity","304010362_Integration_of_ROPJOP_Monitoring_IPs_in_an_ARM-based_SoC","303711348_Efficient_Security_Monitoring_with_the_Core_Debug_Interface_in_an_Embedded_Processor","303542678_Strategy_without_tactics_policy-agnostic_hardware-enhanced_control-flow_integrity","301916094_A_Fine-Grained_Control_Flow_Integrity_Approach_Against_Runtime_Memory_Attacks_for_Embedded_Systems","301819519_Control-Flow_Integrity_Precision_Security_and_Performance","289707479_Towards_a_practical_solution_to_detect_code_reuse_attacks_on_ARM_mobile_devices","287044145_Out_of_Control_Overcoming_Control-Flow_Integrity","283846704_Missing_the_Pointer_On_the_Effectiveness_of_Code_Pointer_Integrity","280567875_Missing_the_Point_er_On_the_Effectiveness_of_Code_Pointer_Integrity","262056380_Efficiently_Securing_Systems_from_Code_Reuse_Attacks","261485947_Eternal_War_in_Memory","261458881_SCRAP_Architecture_for_signature-based_protection_from_Code_Reuse_Attacks","245851014_Defeating_compiler-level_buffer_overluow_protection","221609721_On_the_effectiveness_of_address-space_randomization","221609643_The_Geometry_of_Innocent_Flesh_on_the_Bone","221609557_Control-flow_integrity","221609055_Jump-oriented_programming_a_new_class_of_code-reuse_attack","221551100_Alternating_Control_Flow_Reconstruction","221160740_DROP_Detecting_Return-Oriented_Programming_Malicious_Code","220593585_Control-flow_integrity_Principles_implementations_and_applications","3498421_Continuous_signature_monitoring_efficient_concurrent-detection_of_processor_control_errors","3337881_Hardware-Assisted_Run-Time_Monitoring_for_Secure_Program_Execution_on_Embedded_Processors","3042151_Concurrent_error_detection_using_watchdog_processors-A_survey"]}