{"id":"320678813_A_Large-Scale_Empirical_Study_of_Security_Patches","abstract":"Given how the \"patching treadmill\" plays a central role for enabling sites to counter emergent security concerns, it behooves the security community to understand the patch development process and characteristics of the resulting fixes. Illumination of the nature of security patch development can inform us of shortcomings in existing remediation processes and provide insights for improving current practices. In this work we conduct a large-scale empirical study of security patches, investigating more than 4,000 bug fixes for over 3,000 vulnerabilities that affected a diverse set of 682 open-source software projects. For our analysis we draw upon the National Vulnerability Database, information scraped from relevant external references, affected software repositories, and their associated security fixes. Leveraging this diverse set of information, we conduct an analysis of various aspects of the patch development life cycle, including investigation into the duration of impact a vulnerability has on a code base, the timeliness of patch development, and the degree to which developers produce safe and reliable fixes. We then characterize the nature of security fixes in comparison to other non-security bug fixes, exploring the complexity of different types of patches and their impact on code bases.\nAmong our findings we identify that: security patches have a lower footprint in code bases than non-security bug patches; a third of all security issues were introduced more than 3 years prior to remediation; attackers who monitor open-source repositories can often get a jump of weeks to months on targeting not-yet-patched systems prior to any public disclosure and patch distribution; nearly 5% of security fixes negatively impacted the associated software; and 7% failed to completely remedy the security hole they targeted.","authors":["Frank Li","Vern Paxson"],"meta":["October 2017","DOI:10.1145/3133956.3134072","Conference: the 2017 ACM SIGSAC Conference"],"references":["301415299_VCCFinder","298807969_Talos_Neutralizing_Vulnerabilities_with_Security_Workarounds_for_Rapid_Response","288827327_An_Empirical_Study_on_Real_Bug_Fixes","284575562_The_Matter_of_Heartbleed","261274812_A_large_scale_exploratory_analysis_of_software_vulnerability_life_cycles","254040777_An_empirical_study_of_supplementary_bug_fixes","246828292_Milk_or_Wine_Does_Software_Security_Improve_with_Age","228738947_B_Large-scale_vulnerability_analysis","221656953_Security_versus_performance_bugs_A_case_study_on_firefox","221554067_Has_the_bug_really_been_fixed","309614063_Vulnerability_severity_scoring_and_bounties_why_the_disconnect","303413510_A_deeper_look_into_bug_fixes_patterns_replacements_deletions_and_additions","283842531_The_Attack_of_the_Clones_A_Study_of_the_Impact_of_Shared_Code_on_Vulnerability_Patching","248427624_When_do_changes_induce_fixes_On_Fridays","236644409_The_Design_of_Bug_Fixes","221656991_When_do_changes_induce_fixes","221560785_How_do_fixes_become_bugs","220070444_A_Complexity_Measure","3189025_A_Complexity_Measure"]}