{"id":"220997136_Reflexive_CHAM_and_the_join-calculus","abstract":"By adding reflexion to the chemical machine of Berry and Boudol, we obtain a formal model of concurrency that is consistent with mobility and distribution. Our model provides the foundations of a programming language with functional and object-oriented features. It can also be seen as a process calculus, the join-calculus, which we prove equivalent to the Ï€-calculus of Milner, Parrow and Walker.","authors":["Cedric Fournet","Georges Gonthier"],"meta":["January 1996Conference Record of the Annual ACM Symposium on Principles of Programming Languages","SourceDBLP"],"references":["226816107_FACILE_A_symmetric_integration_of_concurrent_and_functional_programming","220676793_A_Foundation_for_Actor_Computation","270956456_A_Calculus_of_Mobile_Processes_Parts_I_and_II","242361677_Polyadic_D_-calculus_a_tutorial","224001269_Communication_and_Concurrency","222477350_Chemical_abstract_machine","222449825_On_reduction-based_process_semantics","221620657_A_Foundation_for_Higher-order_Concurrent_Constraint_Programming","220997239_Combinatory_Representation_of_Mobile_Processes","220700882_The_Problem_of_Weak_Bisimulation_up_to''","220695004_ACTORS_A_Model_of_Concurrent_Computation_in_Distributed_Systems","220173419_Functions_as_Processes","3556210_Typing_and_subtyping_for_mobile_processes","2815413_A_Typed_Higher-Order_Programming_Language_Based_on_the_Pi-Calculus","2780012_Two_Techniques_for_Compiling_Lazy_Pattern_Matching","2767856_Localities_and_Failures"]}