{"id":"332218917_Scalable_Processing_of_Contemporary_Semi-Structured_Data_on_Commodity_Parallel_Processors_-_A_Compilation-based_Approach","abstract":"JSON (JavaScript Object Notation) and its derivatives are essential in the modern computing infrastructure. However, existing software often fails to process such types of data in a scalable way, mainly for two reasons: (i) the processing often requires to build a memory-consuming parse tree; (ii) there exist inherent dependences in processing the data stream, preventing any data-level parallelization. Facing the challenges, developers often have to construct ad-hoc pre-parsers to split the data stream in order to reduce the memory consumption and increase the data parallelism. However, this strategy requires more programming efforts. Moreover, the pre-parsing itself is non-trivial to parallelize, thus introducing a new serial bottleneck. To solve the dilemma, this work introduces a scalable yet fully automatic solution - a compilation system, namely JPStream, that compiles standard JSONPath queries into parallel executables with bounded memory footprints. First, JPStream adopts a stream processing design that combines the querying and parsing into one pass, without generating any in-memory parse tree. To achieve this, JPStream uses a novel joint compilation technique that compiles the queries and the JSON syntax together into a single automaton. Furthermore, JPStream leverages the \"enumerability'' of automaton to break the dependences and reason about the transition rules to prune infeasible states. It also features a runtime that learns structural constraints from the input to enhance the pruning. Evaluation on real-world JSON datasets with standard JSONPath queries shows that JPStream can reduce the memory consumption significantly, by up to 95%, meanwhile achieving near-linear speedup on multicore and manycore processors.","authors":["Lin Jiang","Xiaofan Sun","Umar Farooq","Zhijia Zhao"],"meta":["April 2019","DOI:10.1145/3297858.3304008","Conference: the Twenty-Fourth International Conference"],"references":["319597814_Mison_a_fast_JSON_parser_for_data_analytics","316104813_Microservices_Yesterday_Today_and_Tomorrow","345723490_Challenging_the_embarrassingly_sequential_parallelizing_finite_state_machine-based_computations_through_principled_speculation","329652877_ASPEN_A_Scalable_In-SRAM_Architecture_for_Pushdown_Automata","327564410_Filter_before_you_parse_faster_analytics_on_raw_data_with_sparser","321175453_Cache_automaton","320679248_Grammar-aware_Parallelization_for_Scalable_XPath_Querying","317272430_Enabling_scalability-sensitive_speculative_parallelization_for_FSM_computations","315664446_Microservices_yesterday_today_and_tomorrow","313014342_Grammar-aware_Parallelization_for_Scalable_XPath_Querying"]}