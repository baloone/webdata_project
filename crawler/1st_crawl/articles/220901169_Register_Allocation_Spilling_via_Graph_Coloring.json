{"id":"220901169_Register_Allocation_Spilling_via_Graph_Coloring","abstract":"In a previous paper we reported the successful use of graph coloring techniques for doing global register allocation in an experimental PL/I optimizing compiler. When the compiler cannot color the register conflict graph with a number of colors equal to the number of available machine registers, it must add code to spill and reload registers to and from storage. Previously the compiler produced spill code whose quality sometimes left much to be desired, and the ad hoc techniques used took considerable amounts of compile time. We have now discovered how to extend the graph coloring approach so that it naturally solves the spilling problem. Spill decisions are now made on the basis of the register conflict graph and cost estimates of the value of keeping the result of a computation in a register rather than in storage. This new approach produces better object code and takes much less compile time.","authors":["Gregory J. Chaitin"],"meta":["January 1982ACM SIGPLAN Notices 39(4):98-105","DOI:10.1145/989393.989403","SourceDBLP","Conference: Proceedings of the SIGPLAN 89 Conference on Programming Language Design and Implementation"],"references":["239571000_Measurement_of_code_improvement_algorithms","224104069_The_History_of_Language_Processor_Technology_in_IBM","220938717_The_801_Minicomputer","220901200_Optimization_of_Range_Checking","220687223_Register_Allocation_Via_Coloring"]}