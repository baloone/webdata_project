{"id":"220997408_A_Unified_Approach_to_Global_Program_Optimization","abstract":"A technique is presented for global analysis of program structure in order to perform compile time optimization of object code generated for expressions. The global expression optimization presented includes constant propagation, common subexpression elimination, elimination of redundant register load operations, and live expression analysis. A general purpose program flow analysis algorithm is developed which depends upon the existence of an \"optimizing function.\" The algorithm is defined formally using a directed graph model of program flow structure, and is shown to be correct. Several optimizing functions are defined which, when used in conjunction with the flow analysis algorithm, provide the various forms of code optimization. The flow analysis algorithm is sufficiently general that additional functions can easily be defined for other forms of global code optimization.","authors":["Gary A. Kildall"],"meta":["January 1973","DOI:10.1145/512927.512945","SourceDBLP","Conference: Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages"],"references":["284211908_Program_optimization","270238672_Programming_An_Introduction_to_Computer_Techniques","243519413_Compiling_Techniques_for_Algebraic_Expressions","242504693_On_writing_an_optimizing_translator_for_algol_60","242374192_Some_analysis_techniques_for_optimizing_computer_programs","239577001_Efficient_handling_of_subscripted_variables_in_Algol_60_compilers","237106161_Global_expression_optimization_during_compilation","234820096_Code-generation_technique_for_large-language_compilers","232903877_A_global_flow_analysis_algorithm","226674500_On_the_number_of_registers_needed_to_evaluate_arithmetic_expressions","224102669_Compiler_assignment_of_data_items_to_registers","221331651_Transformations_of_Programs","221331361_A_Contribution_to_the_Problem_of_the_Optimization_of_Programs","221330360_An_Optimizing_Compiler_Design","31457287_A_Direction-Independent_Algorithm_for_Determining_the_Forward_and_Backward_Compute_Point_for_A_Term_or_Subscript_During_Compilation"]}