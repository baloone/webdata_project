{"id":"221137886_A_Stackless_Runtime_Environment_for_a_Pi-calculus","abstract":"The Pi-calculus is a formalism to model and reason about highly concurrent and dynamic systems. Most of the expressive power of the language comes from the ability to pass communication channels among concurrent processes, as any other value. We present in this paper the CubeVM, an interpreter architecture for an applied variant of the Pi-calculus, focusing on its operational semantics. The main characteristic of the CubeVM comes from its stackless architecture. We show, in a formal way, that the resource management model inside the VM may be greatly simplified without the need for nested stack frames. This is particularly true for the garbage collection of processes and channels. The proposed GC, based on a reference counting scheme, is highly concurrent and, most interestingly, does automatically detect and reclaim cycles of disabled processes. We also address the main performance issues raised by the fine-grained concurrency model of the Pi-calculus. We introduce the reactive variant of the semantics that allows, when applicable, to increase the performance drastically by bypassing the scheduler. We define the language subset of processes in so called chain-reaction forms for which the sequential semantics can be proved statically. We illustrate the expressive power and performance gains of such chain-reactions with examples of functional, dataflow and object-oriented systems. Encodings for the pure Pi-calculus are also demonstrated.","authors":["Frederic Peschanski","Samuel Hym"],"meta":["June 2006","DOI:10.1145/1134760.1134770","SourceDBLP","Conference: Proceedings of the 2nd International Conference on Virtual Execution Environments, VEE 2006, Ottawa, Ontario, Canada, June 14-16, 2006"],"references":["221336301_A_Virtual_Machine_for_a_Process_Calculus","221150699_Why_Events_Are_a_Bad_Idea","243709109_A_Virtual_Machine_for_the_TyCO_Process_Calculus","242608945_Why_threads_are_a_bad_idea_for_most_purposes","242529225_Handbook_of_Process_Algebra","237306212_Continuations_and_Stackless_Python_Or_How_to_change_a_Paradigm_of_an_existing_Program","225092381_Revised_Report_On_The_Algorithmic_Language_Scheme","220881427_Python_Programming_Language","220700598_Implicit_Typing_a_la_ML_for_the_Join-Calculus","220690524_Communicating_and_Mobile_Systems_The_p-Calculus"]}