{"id":"307088989_Some_Trouble_with_Transparency_An_Analysis_of_Student_Errors_with_Object-oriented_Python","abstract":"We investigated implications of transparent mechanisms in the context of an introductory object-oriented programming course using Python. Here transparent mechanisms are those that reveal how the instance object in Python relates to its instance data. We asked students to write a new method for a provided Python class in an attempt to answer two research questions: 1) to what extent do Python's transparent OO mechanisms lead to student difficulties? and 2) what are common pitfalls in OO programming using Python that instructors should address? Our methodology also presented the correct answer to the students and solicited their comments on their submission. We conducted a content analysis to classify errors in the student submissions. We find that most students had difficulty with the instance (self) object, either by omitting the parameter in the method definition, by failing to use the instance object when referencing attributes of the object, or both. Reference errors in general were more common than other errors, including misplaced returns and indentation errors. These issues may be connected to problems with parameter passing and using dot-notation, which we argue are prerequisites for OO development in Python.","authors":["Craig S. Miller","Amber Settle"],"meta":["August 2016","DOI:10.1145/2960310.2960327","Conference: the 2016 ACM Conference","Project: Reference Errors in Novice Programming"],"references":["288002756_Do_we_know_how_difficult_the_Rainfall_Problem_is","274377900_Computational_Thinking","274309848_Computational_Thinking","273922715_Learning_Object-Oriented_Programming_in_Python_Towards_an_Inventory_of_Difficulties_and_Testing_Pitfalls","266660951_Measuring_cognitive_load_in_introductory_CS","266656690_Scenario-based_programming_Reducing_the_cognitive_load_fostering_abstract_thinking","265550833_Metonymy_and_reference-point_errors_in_novice_programming","262175378_A_support_program_for_introductory_CS_Courses_that_improves_student_performance_and_retains_students_from_underrepresented_groups","259998496_Notional_Machines_and_Introductory_Programming_Education","259998484_A_Review_of_Generic_Program_Visualization_Systems_for_Introductory_Programming_Education","234769338_Threshold_concepts_in_computer_science_Do_they_exist_and_are_they_useful","221538349_Avoiding_object_misconceptions","220808214_Teaching_an_object-oriented_CS1_-_with_Python","220808148_Checklists_for_grading_object-oriented_CS1_programs_concepts_and_misconceptions","215900245_Performance_of_python_CS1_students_in_mid-level_non-python_CS_courses","215900215_Python_for_CS1_CS2_and_beyond","200534702_A_Study_of_the_Development_of_Studentsa_Visualizations_of_Program_State_during_an_Elementary_Object-Oriented_Programming_Course","2821154_Towards_a_New_Model_of_Abstraction_in_the_Engineering_of_Software","313392731_Cognitive_dimensions_of_notations_in","301454139_Revisiting_rainfall_to_explore_exam_questions_and_performance_on_CS1","301377098_Learning_Object-Oriented_Programming_in_Python","271452652_Threshold_concepts_in_computer_science","269159283_Centralized_mindset","262208353_Python_as_a_first_programming_language","261961199_Python_as_a_first_programming_language","234787619_Of_black_and_glass_boxes_scaffolding_for_doing_and_learning","231167919_Some_Difficulties_of_Learning_to_Program","231167898_Some_Difficulties_of_Learning_to_Program","222466354_Cognitive_Load_During_Problem_Solving_Effects_on_Learning","221320517_Examples_that_can_do_harm_in_learning_programming","220808272_Teaching_abstraction_in_introductory_courses","213877619_The_Law_of_Leaky_Abstractions","200534698_Cognitive_activities_of_abstraction_in_object_orientation_An_empirical_study","200086132_Cognitive_dimensions_of_notations","43801360_Concrete_examples_of_abstraction_as_manifested_in_students'_transformative_experiences"]}