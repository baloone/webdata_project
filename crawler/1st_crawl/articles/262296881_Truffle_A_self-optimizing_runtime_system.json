{"id":"262296881_Truffle_A_self-optimizing_runtime_system","abstract":"We present Truffle, a novel framework for implementing managed languages in Javaâ„¢. The language implementer writes an AST interpreter, which is integrated in our framework that allows tree rewriting during AST interpretation. Tree rewrites incorporate type feedback and other profiling information into the tree, thus specializing the tree and augmenting it with run-time information. When the tree reaches a stable state, partial evaluation compiles the tree into optimized machine code. The partial evaluation is done by Graal, the just-in-time compiler of our Java VM (a variation of the Java HotSpot VM). To show that Truffle supports a variety of programming language paradigms, we present prototype implementations of JavaScript (a dynamically typed programming language) and J (an array programming language).","authors":["Christian Wimmer","Thomas Wuerthinger"],"meta":["October 2012","DOI:10.1145/2384716.2384723","Conference: Proceedings of the 3rd annual conference on Systems, programming, and applications: software for humanity"],"references":["220752221_Debugging_Optimized_Code_with_Dynamic_Deoptimization","262351526_Self-optimizing_AST_interpreters","229422188_Tracing_the_meta-level_PyPy's_tracing_JIT_compiler","221320550_PyPy's_approach_to_virtual_machine_construction"]}