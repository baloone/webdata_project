{"id":"261314442_Teaching_developer_skills_in_the_first_software_engineering_course","abstract":"Both employers and graduate schools expect computer science graduates to be able to work as developers on software projects. Software engineering courses present the opportunity in the curriculum to learn the relevant skills. This paper presents our experience from Wayne State University and reviews challenges and constraints that we faced while trying to teach these skills. In our first software engineering course, we teach the iterative software development that includes practices of software change, summarized in the phased model of software change. The required resources for our software engineering course are comparable to the other computer science courses. The students - while working in teams - are graded based on their individual contribution to the team effort rather than on the work of the other team members, which improves the fairness of the grading and considerably lessens the stress for the best students in the course. Our students have expressed a high level of satisfaction, and in a survey, they indicated that the skills that they learned in the course are highly applicable to their careers.","authors":["Vaclav Rajlich"],"meta":["May 2013Proceedings - International Conference on Software Engineering","DOI:10.1109/ICSE.2013.6606661","Conference: Software Engineering (ICSE), 2013 35th International Conference on"],"references":["254041543_Integrating_tools_and_frameworks_in_undergraduate_software_engineering_curriculum","234137783_Teaching_software_engineering_and_software_project_management_An_integrated_and_practical_approach","221554491_Using_the_inverted_classroom_to_teach_software_engineering","5152940_Response_Rate_and_Response_Quality_of_Internet-Based_Surveys_An_Experimental_Study","323798703_Software_engineering_state_of_the_art_and_practice","288951487_Computer_science_curriculum_2008_An_interim_revision_of_CS_2001","271528890_Refactoring_Improving_the_Design_of_Existing_Code","270162336_In_The_Structure_of_Scientific_Revolutions","261463167_Software_Change_in_the_Solo_Iterative_Process_An_Experience_Report","254041640_Ten_tips_to_succeed_in_Global_Software_Engineering_education","254041638_Improving_PSP_education_by_pairing_An_empirical_study","247231197_Software_Change_Impact_Analysis","242403407_Agile_Software_Development_With_Scrum","241632875_Teaching_collaborative_software_development_A_case_study","241623972_An_approach_for_evaluating_FOSS_projects_for_student_participation","234820812_Death_March_The_Complete_Software_Developer's_Guide_to_Surviving_Mission_Impossible_Projects","227987777_Feature_location_in_source_code_A_taxonomy_and_survey","222698740_An_experimental_card_game_for_teaching_software_engineering_processes","221592676_Refactoring_Improving_the_Design_of_Existing_Code","221537464_The_software_engineering_capstone_Structure_and_tradeoffs","220807387_Open_source_contribution_as_an_effective_software_engineering_class_project","220475131_Teaching_Software_Evolution_in_Open_Source","220424337_Changing_the_paradigm_of_software_engineering","220091835_Incremental_Change_in_Object-Oriented_Programming","4378129_Software_Change_Impact_Analysis","3841123_The_effects_of_pair-pressure_and_pair-learning_on_software_engineering_education","2899032_Software_Engineering_Education_a_Roadmap"]}