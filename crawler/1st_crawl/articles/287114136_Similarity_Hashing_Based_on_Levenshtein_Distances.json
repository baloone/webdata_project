{"id":"287114136_Similarity_Hashing_Based_on_Levenshtein_Distances","abstract":"It is increasingly common in forensic investigations to use automated pre-processing techniques to reduce the massive volumes of data that are encountered. This is typically accomplished by comparing fingerprints (typically cryptographic hashes) of files against existing databases. In addition to finding exact matches of cryptographic hashes, it is necessary to find approximate matches corresponding to similar files, such as different versions of a given file.\nThis paper presents a new stand-alone similarity hashing approach called saHash, which has a modular design and operates in linear time. saHash is almost as fast as SHA-1 and more efficient than other approaches for approximate matching. The similarity hashing algorithm uses four sub-hash functions, each producing its own hash value. The four sub-hashes are concatenated to produce the final hash value. This modularity enables sub-hash functions to be added or removed, e.g., if an exploit for a sub-hash function is discovered. Given the hash values of two byte sequences, saHash returns a lower bound on the number of Levenshtein operations between the two byte sequences as their similarity score. The robustness of saHash is verified by comparing it with other approximate matching approaches such as +sdhash+.","authors":["Frank Breitinger","Georg Ziroff","Steffen Lange","Harald Baier"],"meta":["January 2014IFIP Advances in Information and Communication Technology 433:133-147","DOI:10.1007/978-3-662-44952-3_10","Conference: IFIP International Conference on Digital Forensics"],"references":["267943513_Performance_Issues_About_Context-Triggered_Piecewise_Hashing","266526506_Security_Aspects_of_Fuzzy_Hashing","259367591_Sparse_similarity-preserving_hashing","259164859_FRASH_A_framework_to_test_algorithms_of_similarity_hashing","251702903_An_evaluation_of_forensic_similarity_hashes","243457811_Distribution_de_la_Flore_Alpine_dans_le_Bassin_des_Dranses_et_dans_quelques_regions_voisines","224373394_Building_a_Better_Similarity_Trap_with_Statistically_Improbable_Features","224243607_Security_Aspects_of_Piecewise_Hashing_in_Computer_Forensics","222430237_Kornblum_J_Identifying_Almost_Identical_Files_using_Context_Triggered_Piecewise_Hashing_Digital_Investigation_3suppl_91-97","221352788_Data_Fingerprinting_with_Similarity_Digests","299411970_A_fuzzy_hashing_approach_based_on_random_sequences_and_hamming_distance","288702317_Managing_Terabyte-Scale_Investigations_with_Similarity_Digests","268741777_Similarity_Preserving_Hashing_Eligible_Properties_and_a_New_Algorithm_MRSH-v2","261038907_mvHash-B_-_A_New_Approach_for_Similarity_Preserving_Hashing","242608934_Fingerprinting_by_Random_Polynomials","242391317_The_MD5_Message-digest_Algorithm","239567615_Binary_Codes_Capable_of_Correcting_Deletions","224110892_Detecting_Similar_Files_Based_on_Hash_and_Statistical_Analysis_for_Digital_Forensic_Investigation","51986583_Binary_Codes_Capable_of_Correcting_Deletions_Insertions_and_Reversals","4324375_An_Efficient_Piecewise_Hashing_Method_for_Computer_Forensics"]}