{"id":"220437498_Fast_Practical_Algorithms_for_Computing_All_the_Repeats_in_a_String","abstract":"Given a string x = x[1..n] on an alphabet of size α, and a threshold p\nmin\n≥ 1, we describe four variants of an algorithm PSY1 that, using a suffix array, computes all the complete nonextendible repeats in x of length p ≥ p\nmin\n. The basic algorithm PSY1–1 and its simple extension PSY1–2 are fast on strings that occur in biological, natural language and other applications (not highly periodic strings), while PSY1–3 guarantees Θ(n) worst-case execution time. The final variant, PSY1–4, also achieves Θ(n) processing time and, over the complete range of strings tested, is the fastest of the four. The space requirement of all four algorithms is about 5n bytes, but all make use of the “longest common prefix” (LCP) array, whose construction requires about 6n bytes. The four algorithms are faster in applications and use less space than a recently-proposed algorithm (Narisawa in Proceedings of 18th Annual Symposium on Combinatorial Pattern Matching, pp. 340–351, 2007) that produces equivalent output. The suffix array is not explicitly used by algorithms PSY1, but may be required for postprocessing; in this case, storage requirements rise to 9n bytes. We also describe two variants of a fast Θ(n)-time algorithm PSY2 for computing all complete supernonextendible repeats in x.","authors":["Simon J. Puglisi","William F Smyth","Munina Yusufu"],"meta":["June 2010Mathematics in Computer Science 3(4):373-389","DOI:10.1007/s11786-010-0033-6","SourceDBLP"],"references":["226881522_Engineering_a_Lightweight_Suffix_Array_ConstructionAlgorithm","226093658_Engineering_a_Lightweight_Suffix_Array_Construction_Algorithm","221543151_Space-Time_Tradeoffs_for_Longest-Common-Prefix_Array_Computation","221314014_Finding_Maximal_Pairs_With_Bounded_Gap","221313707_Linear-Time_Longest-Common-Prefix_Computation_in_Suffix_Arrays_and_Its_Applications","221241653_A_taxonomy_of_suffix_array_construction_algorithms","220565754_A_taxonomy_of_suffix_array_construction_algorithms","2905833_An_Approach_to_Phrase_Selection_for_Offline_Data_Compression","285433013_The_maximum_number_of_runs_in_a_string","250198110_The_Maximum_Number_of_Runs_in_a_String","244455729_Computing_Patterns_in_Strings","238176056_Algorithms_on_Strings_Trees_and_Strings","228733057_Faster_lightweight_suffix_array_construction","228057969_Algorithms_on_Stings_Trees_and_Sequences","222516401_Replacing_Suffix_Trees_with_Enhanced_Suffix_Arrays","222436071_Accurate_discovery_of_co-derivative_documents_via_duplicate_text_detection","221574087_An_Approach_to_Phrase_Selection_for_Offline_Data_Compression","221313930_Efficient_Computation_of_Substring_Equivalence_Classes_with_Suffix_Arrays","221313870_Space_Efficient_Linear_Time_Construction_of_Suffix_Arrays","221241582_Fast_Optimal_Algorithms_for_Computing_All_the_Repeats_in_a_String","221209232_Two_Space_Saving_Tricks_for_Linear_Time_LCP_Array_Computation","220897068_Simple_Linear_Work_Suffix_Array_Construction","220657921_Space_Efficient_Linear_Time_Construction_of_Suffix_Arrays","220555899_Algorithms_on_Stings_Trees_and_Sequences_Computer_Science_and_Computational_Biology","220520502_Computing_All_Repeats_Using_Suffix_Arrays","47841530_Simple_Linear_Work_Suffix_Array_Construction","16619763_New_approaches_for_computer_analysis_of_nucleic_acid_sequences","8379823_A_New_Algorithm_for_Detecting_Low-complexity_Regions_in_Protein_Sequences","2985771_Off-line_dictionary-based_compression","2927633_Two_space_saving_tricks_for_linear_time_LCP_computation","2702058_A_Block-Sorting_Lossless_Data_Compression_Algorithm","2591624_Off-Line_Compression_by_Greedy_Textual_Substitution"]}