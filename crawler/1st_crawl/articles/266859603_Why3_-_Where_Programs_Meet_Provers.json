{"id":"266859603_Why3_-_Where_Programs_Meet_Provers","abstract":"We present Why3, a tool for deductive program verification, and WhyML, its programming and specification language. WhyML is a first-order language with polymorphic types, pattern matching, and inductive predicates. Programs can make use of record types with mutable fields, type invariants, and ghost code. Verification conditions are discharged by Why3 with the help of various existing automated and interactive theorem provers. To keep verification conditions tractable and comprehensible, WhyML imposes a static control of aliases that obviates the use of a memory model. A user can write WhyML programs directly and get correct-by-construction OCaml programs via an automated extraction mechanism. WhyML is also used as an intermediate language for the verification of C, Java, or Ada programs. We demonstrate the benefits of Why3 and WhyML on non-trivial examples of program verification.","authors":["Jean-Christophe Filli√¢tre","Andrei Paskevich"],"meta":["March 2013","DOI:10.1007/978-3-642-37036-6_8","Conference: European Symposium on Programming"],"references":["265866913_Why3_Shepherd_Your_Herd_of_Provers","256382276_Why_Hi-Lite_Ada","225727410_Boogie_A_Modular_Reusable_Verifier_for_Object-Oriented_Programs","221255118_Expressing_Polymorphic_Types_in_a_Many-Sorted_Language","261358451_VACID-0_Verification_of_Ample_Correctness_of_Invariants_of_Data-structures_Edition_0","220618247_Fast_Pattern_Matching_in_Strings"]}