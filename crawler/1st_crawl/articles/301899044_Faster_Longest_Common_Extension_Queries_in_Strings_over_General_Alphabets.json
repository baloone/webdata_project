{"id":"301899044_Faster_Longest_Common_Extension_Queries_in_Strings_over_General_Alphabets","abstract":"Longest common extension queries (often called longest common prefix queries) constitute a fundamental building block in multiple string algorithms, for example computing runs and approximate pattern matching. We show that a sequence of $q$ LCE queries for a string of size $n$ over a general ordered alphabet can be realized in $O(q \\log \\log n+n\\log^*n)$ time making only $O(q+n)$ symbol comparisons. Consequently, all runs in a string over a general ordered alphabet can be computed in $O(n \\log \\log n)$ time making $O(n)$ symbol comparisons. Our results improve upon a solution by Kosolobov (Information Processing Letters, 2016), who gave an algorithm with $O(n \\log^{2/3} n)$ running time and conjectured that $O(n)$ time is possible. We make a significant progress towards resolving this conjecture. Our techniques extend to the case of general unordered alphabets, when the time increases to $O(q\\log n + n\\log^*n)$. The main tools are difference covers and the disjoint-sets data structure.","authors":["Pawel Gawrychowski","Tomasz Kociumaka","Wojciech Rytter","Tomasz Wale≈Ñ"],"meta":["February 2016"],"references":["274902486_Longest_Common_Extensions_in_Sublinear_Space","319975129_The_Runs_Theorem","289573577_Online_Detection_of_Repetitions_with_Backtracking","281487045_Finding_the_Leftmost_Critical_Factorization_on_Unordered_Alphabet","281450291_Universal_Reconstruction_of_a_String","279864407_Computing_Runs_on_a_General_Alphabet","269116579_Longest_Common_Extensions_in_Trees","265908817_Lempel-Ziv_Factorization_May_Be_Harder_Than_Computing_All_Runs","262805753_A_new_characterization_of_maximal_repetitions_by_Lyndon_trees","232743670_Time-Space_Trade-Offs_for_Longest_Common_Extensions"]}