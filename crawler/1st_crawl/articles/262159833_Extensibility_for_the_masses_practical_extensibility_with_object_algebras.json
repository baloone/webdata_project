{"id":"262159833_Extensibility_for_the_masses_practical_extensibility_with_object_algebras","abstract":"This paper presents a new solution to the expression problem (EP) that works in OO languages with simple generics (including Java or C#). A key novelty of this solution is that advanced typing features, including F-bounded quantification, wildcards and variance annotations, are not needed. The solution is based on object algebras, which are an abstraction closely related to algebraic datatypes and Church encodings. Object algebras also have much in common with the traditional forms of the Visitor pattern, but without many of its drawbacks: they are extensible, remove the need for accept methods, and do not compromise encapsulation. We show applications of object algebras that go beyond toy examples usually presented in solutions for the expression problem. In the paper we develop an increasingly more complex set of features for a mini-imperative language, and we discuss a real-world application of object algebras in an implementation of remote batches. We believe that object algebras bring extensibility to the masses: object algebras work in mainstream OO languages, and they significantly reduce the conceptual overhead by using only features that are used by everyday programmers.","authors":["Bruno Oliveira","William R. Cook"],"meta":["June 2012","DOI:10.1007/978-3-642-31057-7_2","Conference: Proceedings of the 26th European conference on Object-Oriented Programming"],"references":["266357863_Remote_Batch_Invocation_for_SQL_Databases","242550428_MultiJava_Modular_Open_Classes_and_Symmetric_Multiple_Dispatch_for_Java","314834359_Extensible_algebraic_datatypes_with_defaults","281016850_Mathematical_foundations_of_software_development","278718948_JavaGI","278688741_Jiazzi","267217017_Genericity_extensibility_and_type-safety_in_the_V_pattern","243786740_The_Expression_Problem_Revisited_Four_new_solutions_using_generics","242637531_Design_Patterns_Elements_of_Reusable_Object-Oriented_Software_Addison-Wesley_Reading_MA","238671211_User-Defined_Types_and_Procedural_Data_Structures_as_Complementary_Approaches_to_Data_Abstraction"]}