{"id":"2639704_Software_Tamper_Resistance_Obstructing_Static_Analysis_of_Programs","abstract":"In this paper we address the problem of protecting trusted software on untrusted hosts by code obfuscation. We address one aspect of the problem, namely obstructing static analysis of programs. The presence of aliases has been proven to restrict greatly the precision of static data-flow analysis. Meanwhile, effective alias detection has been shown to be NP-Hard. While this represents a significant hurdle for code optimization, it provides a theoretical basis for structuring tamper-resistant programs---the systematic introduction of nontrivial aliases transforms programs to a form that yields data flow information very slowly and/or with little precision. We describe a set of transformations that introduce aliases and further hinder the analysis by a systematic \"break-down\" of the program control-flow; transforming high level control transfers to indirect addressing through aliased pointers. By doing so, the basic control-flow analysis is made into a general alias analysis problem, and...","authors":["Chenxi Wang","Jonathan Hill","John Knight","Jack Davidson"],"meta":["June 2000"],"references":["221351589_Protecting_Mobile_Agents_Against_Malicious_Hosts","37987523_A_Taxonomy_of_Obfuscating_Transformations","3837679_Survivability_architectures_issues_and_approaches","3746603_Breaking_abstractions_and_unstructuring_data_structures","3694131_Building_diverse_computer_systems","262493820_Advanced_Compiler_Design_Implementation","243654781_Inter-procedural_Pointer_Analysis","239029296_A_Safe_Approximation_Algorithm_for_Interprocedural_Pointer_Analysis","238690550_The_suif2_compiler_infrastructure","234811765_Flow_Analysis_of_Computer_Programs","220722314_Tamper_Resistant_Software_An_Implementation","2682951_Interprocedural_Aliasing_In_The_Presence_Of_Pointers","2647278_Undecidability_of_Static_Analysis","2590591_Time_Limited_Blackbox_Security_Protecting_Mobile_Agents_From_Malicious_Hosts"]}