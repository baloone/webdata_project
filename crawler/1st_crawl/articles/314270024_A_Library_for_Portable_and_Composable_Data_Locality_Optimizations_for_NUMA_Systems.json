{"id":"314270024_A_Library_for_Portable_and_Composable_Data_Locality_Optimizations_for_NUMA_Systems","abstract":"Many recent multiprocessor systems are realized with a nonuniform memory architecture (NUMA) and accesses to remote memory locations take more time than local memory accesses. Optimizing NUMA memory system performance is difficult and costly for three principal reasons: (1) Today’s programming languages/libraries have no explicit support for NUMA systems, (2) NUMA optimizations are not portable, and (3) optimizations are not composable (i.e., they can become ineffective or worsen performance in environments that support composable parallel software).\nThis article presents TBB-NUMA, a parallel programming library based on Intel Threading Building Blocks (TBB) that supports portable and composable NUMA-aware programming. TBB-NUMA provides a model of task affinity that captures a programmer’s insights on mapping tasks to resources. NUMA-awareness affects all layers of the library (i.e., resource management, task scheduling, and high-level parallel algorithm templates) and requires close coupling between all these layers. Optimizations implemented with TBB-NUMA (for a set of standard benchmark programs) result in up to 44% performance improvement over standard TBB. But more important, optimized programs are portable across different NUMA architectures and preserve data locality also when composed with other parallel computations sharing the same resource management layer.","authors":["Zoltan Majo","Thomas R. Gross"],"meta":["March 2017ACM Transactions on Parallel Computing 3(4):1-32","DOI:10.1145/3040222"],"references":["262329928_MemProf_a_memory_profiler_for_NUMA_multicore_systems","262309431_Effciently_combining_parallel_software_using_fine-grained_language-level_hierarchical_resource_management_policies","262159992_Traffic_Management_A_Holistic_Approach_to_Memory_Placement_on_NUMA_Systems","254463538_SALSA_Scalable_and_Low_Synchronization_NUMA-aware_Algorithm_for_producer-consumer_pools","224132799_Memphis_Finding_and_fixing_NUMA-related_performance_problems_on_multi-core_platforms","221643558_Does_Cache_Sharing_on_Modern_CMP_Matter_to_the_Performance_of_Contemporary_Multithreaded_Programs","221351802_Thread_clustering_Sharing-aware_scheduling_on_SMP-CMP-SMT_multiprocessors","221257281_Flat-combining_NUMA_locks","221084484_User-Level_Dynamic_Page_Migration_for_Multiprogrammed_Shared-Memory_Multiprocessors","221005338_Comparing_cache_architectures_and_coherency_protocols_on_x86-64_multicore_SMP_systems","220938818_Operating_System_Support_for_Improving_Data_Locality_on_CC-NUMA_Compute_Servers","220910230_Simple_But_Effective_Techniques_for_NUMA_Memory_Management","51992086_Memory_bandwidth_and_machine_balance_in_high_performance_computers","2760161_The_Implementation_of_the_Cilk-5_Multithreaded_Language","2709106_OS_Support_for_Improving_Data_Locality_on_CC-NUMA_Compute_Servers","2388582_A_Case_for_User-Level_Dynamic_Page_Migration","316856915_SLAW_a_scalable_locality-aware_adaptive_work-stealing_scheduler_for_multi-core_systems","311463706_ReSense_Mapping_Dynamic_Workloads_of_Colocated_Multithreaded_Applications_Using_Resource_Sensitivity","283473290_A_Library_for_Portable_and_Composable_Data_Locality_Optimizations_for_NUMA_Systems","279963319_Callisto-RTS_Fine-Grain_Parallel_Loops","279822259_Locating_cache_performance_bottlenecks_using_data_profiling","268461720_Traffic_management","266659560_Experimental_analysis_of_space-bounded_schedulers","266657811_Effective_automatic_computation_placement_and_dataallocation_for_parallelization_of_regular_programs","266657183_Callisto_Co-scheduling_parallel_runtime_systems","264159793_A_Case_for_NUMA-Aware_Contention_Management_on_Multicore_Processors","262399044_A_Tool_to_Analyze_the_Performance_of_Multithreaded_Programs_on_NUMA_Architectures","262211808_Fast_Concurrent_Queues_for_x86_Processors","262205636_ReSense_Mapping_Dynamic_Workloads_of_Colocated_Multithreaded_Applications_Using_Resource_Sensitivity","261486341_Misunderstanding_the_NUMA_memory_system_performance_of_multithreaded_workloads","254462649_CATS_Cache_Aware_Task-Stealing_based_on_online_profiling_in_multi-socket_multi-core_architectures","254004410_Expressing_pipeline_parallelism_using_TBB_constructs","242787762_OpenMP_Application_Program_Interface","234826842_Simple_but_effective_techniques_for_NUMA_memory_management","224235694_Characterizing_multi-threaded_applications_based_on_shared-resource_contention","222693573_Hardware_Monitors_for_Dynamic_Page_Migration","221643676_Wait-Free_Queues_With_Multiple_Enqueuers_and_Dequeuers","221643409_SLAW_A_Scalable_Locality-aware_Adaptive_Work-stealing_Scheduler_for_Multi-core_Systems","221351703_Locating_Cache_Performance_Bottlenecks_Using_Data_Profiling","221321507_NUMA-Aware_Memory_Manager_with_Dominant-Thread-Based_Copying_GC","220752333_Composing_Parallel_Software_Efficiently_with_Lithe","220379232_1_Feedback-Directed_Page_Placement_for_ccNUMA_via_Hardware-generated_Memory_Traces","4336565_Optimization_via_Reflection_on_Work_Stealing_in_TBB","2532830_The_Data_Locality_of_Work_Stealing"]}