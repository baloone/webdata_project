{"id":"280752222_Causal-Consistent_Reversible_Debugging","abstract":"Reversible debugging provides developers with a way to execute their applications both forward and backward, seeking the cause of an unexpected or undesired event. In a concurrent setting, reversing actions in the exact reverse order in which they have been executed may lead to undo many actions that were not related to the bug under analysis. On the other hand, undoing actions in some order that violates causal dependencies may lead to states that could not be reached in a forward execution. We propose an approach based on causal-consistent reversibility: each action can be reversed if all its consequences have already been reversed. The main feature of the approach is that it allows the programmer to easily individuate and undo exactly the actions that caused a given misbehavior till the corresponding bug is reached. This paper major contribution is the individuation of the appropriate primitives for causal-consistent reversible debugging and their prototype implementation in the CaReDeb tool. We also show how to apply CaReDeb to individuate common real-world concurrent bugs.","authors":["Elena Giachino","Ivan Lanese","Claudio Antares Mezzina"],"meta":["April 2014","DOI:10.1007/978-3-642-54804-8_26","Conference: International Conference on Fundamental Approaches to Software Engineering"],"references":["261157289_A_Compositional_Semantics_for_the_Reversible_p-Calculus","228958660_Causeway_A_message-oriented_distributed_debugger","228796126_Reversible_Communicating_Concurrent_Systems","221560530_Dynamic_slicing_long_running_programs_through_execution_fast_forwarding","305263053_IGOR_A_System_for_Program_Debugging_via_Reversible_Execution","234798553_Debugging_operating_systems_with_time-traveling_virtual_machines","234785475_The_debugging_system_AIDS","233947390_FReD_Automated_Debugging_via_Binary_Search_through_a_Process_Lifetime","233765921_A_Reversible_Abstract_Machine_and_Its_Space_Overhead","222783480_Reversing_Algebraic_Process_Calculi"]}