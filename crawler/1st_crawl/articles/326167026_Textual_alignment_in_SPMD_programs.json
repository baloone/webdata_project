{"id":"326167026_Textual_alignment_in_SPMD_programs","abstract":"We propose a formal definition of the notion of textual alignment as is used in programming languages proposing spmd-like collective operations. We argue that this property provides an intuitive programming model that makes it easier to perform program analysis and program optimization. Here, textual alignment is studied in the context of the operational semantics of a basic imperative programming language. This language provides support for global synchronization barriers. The semantics records suitable information concerning the parallel execution flow of programs and identifies textually aligned code segments. We prove that our definition of textual alignment entails the absence of deadlocks.","authors":["Frédéric Dabrowski"],"meta":["April 2018","DOI:10.1145/3167132.3167254","Conference: the 33rd Annual ACM Symposium"],"references":["317487665_Replicated_Synchronization_for_Imperative_BSP_Programs","317427677_Replicated_Synchronization_for_Imperative_BSP_Programs","239543338_A_Modular_Implementation_of_Bulk_Synchronous_Parallel_ML","224483213_Some_computer_organizations_and_their_effectiveness_IEEE_Trans_Comput_C-21948","221643460_May-happen-in-parallel_analysis_of_X10_programs","221497007_Enforcing_Textual_Alignment_of_Collectives_Using_Dynamic_Checks","221496788_Concurrency_Analysis_for_Parallel_Programs_with_Textually_Aligned_Barriers","221302477_A_Certified_Data_Race_Analysis_for_a_Java-like_Language","220857740_Bulk_Synchronous_Parallel_ML_Modular_Implementation_and_Performance_Prediction","220768728_Functional_Parallel_Programming_with_Explicit_Processes_Beyond_SPMD","220284743_A_Static_Analysis_for_Bulk_Synchronous_Parallel_ML_to_Avoid_Parallel_Nesting","314000724_SPMD_Computational_Model","313560953_Some_computer_organizations_and_their_effectiveness","312634615_An_Extended_Polyhedral_Model_for_SPMD_Programs_and_Its_Use_in_Static_Data_Race_Detection","300132934_Dynamic_Analysis_to_Support_Program_Development_with_the_Textually_Aligned_Property_for_OpenSHMEM_Collectives","293805646_May-Happen-in-Parallel_Based_Deadlock_Analysis_for_Concurrent_Objects","269311144_May-happen-in-parallel_analysis_based_on_segment_graphs_for_safe_ESL_models","262604923_MulticoreBSP_for_C_A_High-Performance_Library_for_Shared-Memory_Parallel_Programming","261486288_Can_We_Make_It_Faster_Efficient_May-Happen-in-Parallel_Analysis_Revisited","242386491_Titanium_language_reference_manual_v1","222506723_BSPlib_the_BSP_programming_library","221643665_Barrier_matching_for_programs_with_textually_unaligned_barriers","221597395_The_SPMD_model_past_present_and_future","220997514_Barrier_Inference","220875699_Static_Nonconcurrency_Analysis_of_OpenMP_Programs","220690555_The_Formal_Semantics_of_Programming_Languages_An_Introduction","220118508_A_Structural_Approach_to_Operational_Semantics","220105573_Titanium_A_High-performance_Java_Dialect","2678541_Static_Analysis_of_Barrier_Synchronization_in_Explicitly_Parallel_Programs"]}