{"id":"283470854_Tracing_vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_for_Self-Optimizing_Interpreters","abstract":"Tracing and partial evaluation have been proposed as meta-compilation techniques for interpreters to make just-in-time compilation language-independent. They promise that programs executing on simple interpreters can reach performance of the same order of magnitude as if they would be executed on state-of-the-art virtual machines with highly optimizing just-in-time compilers built for a specific language. Tracing and partial evaluation approach this meta-compilation from two ends of a spectrum, resulting in different sets of tradeoffs.This study investigates both approaches in the context of self-optimizing interpreters, a technique for building fast abstract-syntax-tree interpreters. Based on RPython for tracing and Truffle for partial evaluation, we assess the two approaches by comparing the impact of various optimizations on the performance of an interpreter for SOM, an object-oriented dynamically-typed language. The goal is to determine whether either approach yields clear performance or engineering benefits. We find that tracing and partial evaluation both reach roughly the same level of performance. SOM based on meta-tracing is on average 3x slower than Java, while SOM based on partial evaluation is on average 2.3x slower than Java. With respect to the engineering, tracing has however significant benefits, because it requires language implementers to apply fewer optimizations to reach the same level of performance.","authors":["Stefan Marr","St√©phane Ducasse"],"meta":["October 2015ACM SIGPLAN Notices 50(10)","DOI:10.1145/2858965.2814275","Conference: OOPSLA'15: ACM International Conference on Object Oriented Programming Systems Languages & ApplicationsAt: Pittsburgh, PA, USA"],"references":["311471435_Storage_strategies_for_collections_in_dynamically_typed_languages","275654155_Zero-Overhead_Metaprogramming_Reflection_and_Metaobject_Protocols_Fast_and_without_Compromises","266661846_A_Domain-Specific_Language_for_Building_Self-Optimizing_AST_Interpreters","266078363_An_object_storage_model_for_the_truffle_language_implementation_framework","264647016_Are_We_There_Yet_Simple_Language_Implementation_Techniques_for_the_21st_Century","262358133_Storage_Strategies_for_Collections_in_Dynamically_Typed_Languages","273188647_Accelerating_iterators_in_optimizing_AST_interpreters","269148316_The_DaCapo_benchmarks","267857088_The_Impact_of_Meta-Tracing_on_VM_Design_and_Implementation","262351526_Self-optimizing_AST_interpreters"]}