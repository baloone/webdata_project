{"id":"328561997_Revisiting_supervised_and_unsupervised_models_for_effort-aware_just-in-time_defect_prediction","abstract":"Effort-aware just-in-time (JIT) defect prediction aims at finding more defective software changes with limited code inspection cost. Traditionally, supervised models have been used; however, they require sufficient labelled training data, which is difficult to obtain, especially for new projects. Recently, Yang et al. proposed an unsupervised model (i.e., LT) and applied it to projects with rich historical bug data. Interestingly, they reported that, under the same inspection cost (i.e., 20 percent of the total lines of code modified by all changes), it could find about 12% - 27% more defective changes than a state-of-the-art supervised model (i.e., EALR) when using different evaluation settings. This is surprising as supervised models that benefit from historical data are expected to perform better than unsupervised ones. Their finding suggests that previous studies on defect prediction had made a simple problem too complex. Considering the potential high impact of Yang et al.’s work, in this paper, we perform a replication study and present the following new findings: (1) Under the same inspection budget, LT requires developers to inspect a large number of changes necessitating many more context switches. (2) Although LT finds more defective changes, many highly ranked changes are false alarms. These initial false alarms may negatively impact practitioners’ patience and confidence. (3) LT does not outperform EALR when the harmonic mean of Recall and Precision (i.e., F1-score) is considered. Aside from highlighting the above findings, we propose a simple but improved supervised model called CBS+, which leverages the idea of both EALR and LT. We investigate the performance of CBS+ using three different evaluation settings, including time-wise cross-validation, 10-times 10-fold cross-validation and cross-project validation. When compared with EALR, CBS+ detects about 15% - 26% more defective changes, while keeping the number of context switches and initial false alarms close to those of EALR. When compared with LT, the number of defective changes detected by CBS+ is comparable to LT’s result, while CBS+ significantly reduces context switches and initial false alarms before first success. Finally, we discuss how to balance the tradeoff between the number of inspected defects and context switches, and present the implications of our findings for practitioners and researchers.","authors":["Qiao Huang","Xin Xia","David Lo"],"meta":["October 2019Empirical Software Engineering 24(1)","DOI:10.1007/s10664-018-9661-2"],"references":["325727106_Is_better_data_better_than_better_data_miners_on_the_benefits_of_tuning_SMOTE_for_defect_prediction","324111531_The_Impact_of_Refactoring_Changes_on_the_SZZ_Algorithm_An_Empirical_Study","320959053_Characterizing_Software_Developers_by_Perceptions_of_Productivity","318868877_Revisiting_unsupervised_learning_for_defect_prediction","317138650_Identifying_self-admitted_technical_debt_in_open_source_projects_using_text_mining","350683302_Ordinal_Methods_for_Behavioral_Data_Analysis","324636893_How_Far_We_Have_Progressed_in_the_Journey_An_Examination_of_Cross-Project_Defect_Prediction","324266506_Characterizing_and_Predicting_Blocking_Bugs_in_Open_Source_Projects","321738180_File-Level_Defect_Prediction_Unsupervised_vs_Supervised_Models","320884546_Supervised_vs_Unsupervised_Models_A_Holistic_Look_at_Effort-Aware_Just-in-Time_Defect_Prediction","316859179_Better_Data_is_Better_than_Better_Data_Miners_Benefits_of_Tuning_SMOTE_for_Defect_Prediction","314153003_Revisiting_Unsupervised_Learning_for_Defect_Prediction","315532936_TLEL_A_two-layer_ensemble_learning_approach_for_just-in-time_defect_prediction","312484838_Automated_Debugging_Considered_Harmful_Considered_Harmful_A_User_Study_Revisiting_the_Usefulness_of_Spectra-Based_Fault_Localization_Techniques_with_Professionals_Using_Real_Bugs_from_Large_Systems","310821310_Effort-aware_just-in-time_defect_prediction_simple_unsupervised_models_could_be_better_than_supervised_models"]}