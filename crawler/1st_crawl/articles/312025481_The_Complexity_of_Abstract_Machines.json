{"id":"312025481_The_Complexity_of_Abstract_Machines","abstract":"The lambda-calculus is a peculiar computational model whose definition does not come with a notion of machine. Unsurprisingly, implementations of the lambda-calculus have been studied for decades. Abstract machines are implementations schema for fixed evaluation strategies that are a compromise between theory and practice: they are concrete enough to provide a notion of machine and abstract enough to avoid the many intricacies of actual implementations. There is an extensive literature about abstract machines for the lambda-calculus, and yet—quite mysteriously—the efficiency of these machines with respect to the strategy that they implement has almost never been studied.\n\nThis paper provides an unusual introduction to abstract machines, based on the complexity of their overhead with respect to the length of the implemented strategies. It is conceived to be a tutorial, focusing on the case study of implementing the weak head (call-by-name) strategy, and yet it is an original re-elaboration of known results. Moreover, some of the observation contained here never appeared in print before.","authors":["Beniamino Accattoli"],"meta":["January 2017","DOI:10.4204/EPTCS.235.1"],"references":["281487133_A_Strong_Distillery","263012272_Distilling_Abstract_Machines_Long_Version","221662597_On_the_Invariance_of_the_Unitary_Cost_Model_for_Head_Reduction_LongVersion","221351029_Lambda_Calculi_and_Linear_Speedups","1958710_An_Invariant_Cost_Model_for_the_Lambda_Calculus","308730809_On_the_Relative_Usefulness_of_Fireballs","305908655_The_Useful_MAM_a_Reasonable_Implementation_of_the_Strong_lambda_-Calculus","285906234_On_the_Value_of_Variables","281049946_An_abstract_factorization_theorem_for_explicit_substitutions","262338285_Beta_Reduction_is_Invariant_Indeed_Long_Version","262210934_A_Nonstandard_Standardization_Theorem","227288779_The_Structural_l-Calculus"]}