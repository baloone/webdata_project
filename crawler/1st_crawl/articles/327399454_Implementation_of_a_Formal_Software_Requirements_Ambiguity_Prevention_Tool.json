{"id":"327399454_Implementation_of_a_Formal_Software_Requirements_Ambiguity_Prevention_Tool","abstract":"The success of the software engineering process depends heavily on clear unambiguous software requirements. Ambiguity refers to the possibility to understand a requirement in more than one way. Unfortunately, ambiguity is an inherent property of the natural languages used to write the software user requirements. This could cause a final faulty system implementation, which is too expensive to correct. The basic requirements ambiguity resolution approaches in the literature are ambiguity detection, ambiguity avoidance, and ambiguity prevention. Ambiguity prevention is the least tackled approach because it requires designing formal languages and templates, which are hard to implement. The main goal of this paper is to provide full implementation of an ambiguity prevention tool and then study its effectiveness using real requirements. Towards this goal, we developed a set of Finite State Machine (FSMs) implementing templates of various requirement types. We then used Python to implement the ambiguity prevention tool based on those FSMs. We also collected a benchmark of 2460 real requirements and selected a random set of forty real requirements to test the effectiveness of the developed tool. The experiment showed that the implemented ambiguity prevention tool can prevent critical requirements ambiguity issues such as missing information or domain ambiguity. Nevertheless, there is a tradeoff between ambiguity prevention and the effort needed to write the requirements using the imposed templates. Â© 2018 International Journal of Advanced Computer Science and Applications.","authors":["Rasha Alomari","Hanan Elazhary"],"meta":["January 2018International Journal of Advanced Computer Science and Applications 9(8)","DOI:10.14569/IJACSA.2018.090854"],"references":["286669049_The_DODT_tool_applied_to_sub-sea_software","285682403_REAS_An_Interactive_Semi-Automated_System_for_Software_Requirements_Elicitation_Assistance","279997528_Addressing_the_Challenges_of_Requirements_Ambiguity_A_Review_of_Empirical_Literature","265812301_Semi-Automation_for_Ambiguity_Resolution_in_Open_Source_Software_Requirements","265580421_Translation_of_Software_Requirements","290109857_Automatic_Detection_of_Ambiguous_Terminology_for_Software_Requirements","276344834_Analysis_of_Modeling_Techniques_used_for_Translating_Natural_Language_Specification_into_Formal_Software_Requirements","262280857_Writing_quality_requirements","261464430_Automatic_Checking_of_Conformance_to_Requirement_Boilerplates_via_Text_Chunking_An_Industrial_Case_Study","241259981_Karl_Wiegers_Describes_10_Requirements_Traps_to_Avoid","225177725_Analysing_anaphoric_ambiguity_in_natural_language_requirements","225109885_Ontology-Driven_Guidance_for_Requirements_Elicitation","221552319_Ambiguity_Detection_Towards_a_Tool_Explaining_Ambiguity_Sources","220796409_Automated_review_of_natural_language_requirements_documents_Generating_useful_warnings_with_user-extensible_glossaries_driving_a_simple_state_machine","4043785_Higher_quality_requirements_specifications_through_natural_language_patterns"]}