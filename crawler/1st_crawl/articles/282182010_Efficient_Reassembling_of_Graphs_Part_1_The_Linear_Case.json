{"id":"282182010_Efficient_Reassembling_of_Graphs_Part_1_The_Linear_Case","abstract":"The reassembling of a simple connected graph\n\\(G = (V,E)\\) is an abstraction of a problem arising in earlier studies of network analysis. Its simplest formulation is in two steps:(1)\nWe cut every edge of G into two halves, thus obtaining a collection of \\(n = |\\,V\\,|\\) one-vertex components, such that for every \\(v\\in V\\) the one-vertex component \\(\\{ v \\}\\) has \\({{degree}}_{}(v)\\) half edges attached to it.\n(2)\nWe splice the two halves of every edge together, not of all the edges at once, but in some ordering \\(\\Theta \\) of the edges that minimizes two measures that depend on the edge-boundary degrees of assembled components.\nA component A is a subset of V and its edge-boundary degree is the number of edges in G with one endpoint in A and one endpoint in \\(V-A\\) (which is the same as the number of half edges attached to A after all edges with both endpoints in A have been spliced together). The maximum edge-boundary degree encountered during the reassembling process is what we call the \\(\\varvec{\\alpha }\\)\n-measure of the reassembling, and the sum of all edge-boundary degrees is its \\(\\varvec{\\beta }\\)\n-measure. The \\(\\alpha \\)-optimization (resp. \\(\\beta \\)-optimization) of the reassembling of G is to determine an order \\(\\Theta \\) for splicing the edges that minimizes its \\(\\alpha \\)-measure (resp. \\(\\beta \\)-measure). There are different forms of reassembling, depending on restrictions and variations on the ordering \\(\\Theta \\) of the edges. We consider only cases satisfying the condition that if an edge between disjoint components A and B is spliced, then all the edges between A and B are spliced at the same time. In this report, we examine the particular case of linear reassembling, which requires that the next edge to be spliced must be adjacent to an already spliced edge. We delay other forms of reassembling to follow-up reports. We prove that \\(\\alpha \\)-optimization of linear reassembling and minimum-cutwidth linear arrangment (\\(\\mathrm{CutWidth}\\)) are polynomially reducible to each other, and that \\(\\beta \\)-optimization of linear reassembling and minimum-cost linear arrangement (\\(\\mathrm{MinArr}\\)) are polynomially reducible to each other. The known NP-hardness of \\(\\mathrm{CutWidth}\\) and \\(\\mathrm{MinArr}\\) imply the NP-hardness of \\(\\alpha \\)-optimization and \\(\\beta \\)-optimization.","authors":["A. J. Kfoury","Saber Mirzaei"],"meta":["April 2017Journal of Combinatorial Optimization 33(3)","DOI:10.1007/s10878-016-0024-x","SourcearXiv"],"references":["299656613_A_Different_Approach_to_the_Design_and_Analysis_of_Network_Algorithms","268357155_The_Denotational_and_Static_Semantics_of_a_Domain-Specific_Language_for_Flow-Network_Design","267479159_Addenda_to_the_survey_of_layout_problems","265128573_The_syntax_and_semantics_of_a_domain-specific_language_for_flow-network_design","262247934_A_new_rounding_procedure_for_the_assignment_problem_with_applications_to_dense_graph_arrangement_problems","228922421_Safe_Compositional_Equation-based_Modeling_of_Constrained_Flow_Networks","226412756_l22Spreading_Metrics_for_Vertex_Ordering_Problems","222813234_Min_Cut_is_NP-Complete_for_Edge_Weighted_Treees","222057470_Some_Simplified_NP-Complete_Graph_Problems","221218738_Topological_Bandwidth"]}