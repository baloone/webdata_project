{"id":"320178008_Designing_small_universal_k-mer_hitting_sets_for_improved_analysis_of_high-throughput_sequencing","abstract":"With the rapidly increasing volume of deep sequencing data, more efficient algorithms and data structures are needed. Minimizers are a central recent paradigm that has improved various sequence analysis tasks, including hashing for faster read overlap detection, sparse suffix arrays for creating smaller indexes, and Bloom filters for speeding up sequence search. Here, we propose an alternative paradigm that can lead to substantial further improvement in these and other tasks. For integers k and L > k, we say that a set of k-mers is a universal hitting set (UHS) if every possible L-long sequence must contain a k-mer from the set. We develop a heuristic called DOCKS to find a compact UHS, which works in two phases: The first phase is solved optimally, and for the second we propose several efficient heuristics, trading set size for speed and memory. The use of heuristics is motivated by showing the NP-hardness of a closely related problem. We show that DOCKS works well in practice and produces UHSs that are very close to a theoretical lower bound. We present results for various values of k and L and by applying them to real genomes show that UHSs indeed improve over minimizers. In particular, DOCKS uses less than 30% of the 10-mers needed to span the human genome compared to minimizers. The software and computed UHSs are freely available at github.com/Shamir-Lab/DOCKS/ and acgt.cs.tau.ac.il/docks/, respectively.","authors":["Yaron Orenstein","David Pellow","Guillaume Marcais","Ron Shamir"],"meta":["October 2017PLoS Computational Biology 13(10):e1005777","DOI:10.1371/journal.pcbi.1005777"],"references":["283544243_PacBio_Sequencing_and_Its_Applications","263736737_KMC_2_Fast_and_resource-frugal_k-mer_counting","263012253_Sampling_the_Suffix_Array_with_Minimizers","260443015_Wood_DE_Salzberg_SL_Kraken_Ultrafast_metagenomic_sequence_classification_using_exact_alignment_Genome_Biol_15_R46","259824884_On_the_Representation_of_De_Bruijn_Graphs","324094964_Improved_Search_of_Large_Transcriptomic_Sequencing_Databases_Using_Split_Sequence_Bloom_Trees","315920503_Improved_Search_of_Large_Transcriptomic_Sequencing_Databases_Using_Split_Sequence_Bloom_Trees","305910088_Compact_Universal_k-mer_Hitting_Sets","293634469_Fast_Search_of_Thousands_of_Short-Read_Sequencing_Experiments","262164659_Memory_efficient_minimum_substring_partitioning","234841365_De_Novo_Co-Assembly_of_Bacterial_Genomes_from_Multiple_Single_Cells","232225548_SCALCE_boosting_Sequence_Compression_Algorithms_using_Locally_Consistent_Encoding","224868956_Exploiting_sparseness_in_de_novo_genome_assembly","242792925_A_proof_of_Golomb's_conjecture_for_the_de_Bruijn_graph","221427226_Sparse_Suffix_Trees"]}