{"id":"310734282_Concurrency_in_Snap-Stabilizing_Local_Resource_Allocation","abstract":"In distributed systems, resource allocation consists in managing fair access of a large number of processes to a typically small number of reusable resources. As soon as the number of available resources is greater than one, the efficiency in concurrent accesses becomes an important issue, as a crucial goal is to maximize the utilization rate of resources. In this paper, we tackle the concurrency issue in resource allocation problems. We first characterize the maximal level of concurrency we can obtain in such problems by proposing the notion of maximal concurrency. Then, we focus on Local Resource Allocation problems (LRA). Our results are both negative and positive. On the negative side, we show that there is a wide class of instances of LRA for which it is impossible to obtain maximal concurrency without compromising the fairness. On the positive side, we propose a snap-stabilizing LRA algorithm which achieves a high (but not maximal) level of concurrency, called here strong concurrency.","authors":["Karine Altisen","Stéphane Devismes","Anaïs Durand"],"meta":["November 2016Journal of Parallel and Distributed Computing 102","DOI:10.1016/j.jpdc.2016.11.004","Project: Concurrency and Resource Allocation Problems"],"references":["281132042_On_Probabilistic_Snap-Stabilization","273455301_Self-Stabilizing_Leader_Election_in_Polynomial_Steps","305576245_Self-Stabilizing_Leader_Election_in_Polynomial_Steps","305263121_Solution_of_a_Problem_in_Concurrent_Programming_Control","295786345_The_fuzzy_philosophers","289669361_Self-Stabilization_in_Spite_of_Distributed_Control","269858936_Introduction_Self_Stabilization","243480112_Two_starvation_free_solutions_to_a_general_exclusion_problem","239552157_Self_stabilizing_systems_in_spite_of_distributed_control","229926626_A_self-stabilizing_token-based_k-out-of-l_exclusion_algorithm"]}