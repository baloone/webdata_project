{"id":"335084180_Why_aren't_regular_expressions_a_lingua_franca_an_empirical_study_on_the_re-use_and_portability_of_regular_expressions","abstract":"This paper explores the extent to which regular expressions (regexes) are portable across programming languages. Many languages offer similar regex syntaxes, and it would be natural to assume that regexes can be ported across language boundaries. But can regexes be copy/pasted across language boundaries while retaining their semantic and performance characteristics?\nIn our survey of 158 professional software developers, most indicated that they re-use regexes across language boundaries and about half reported that they believe regexes are a universal language.We experimentally evaluated the riskiness of this practice using a novel regex corpus — 537,806 regexes from 193,524 projects written in JavaScript, Java, PHP, Python, Ruby, Go, Perl, and Rust. Using our polyglot regex corpus, we explored the hitherto-unstudied regex portability problems: logic errors due to semantic differences, and security vulnerabilities due to performance differences.\nWe report that developers’ belief in a regex lingua franca is understandable but unfounded. Though most regexes compile across language boundaries, 15% exhibit semantic differences across languages and 10% exhibit performance differences across languages. We explained these differences using regex documentation, and further illuminate our findings by investigating regex engine implementations. Along the way we found bugs in the regex engines of JavaScript-V8, Python, Ruby, and Rust, and potential semantic and performance regex bugs in thousands of modules.","authors":["James C. Davis","Louis Michael","Christy A. Coghlan","Francisco Servant"],"meta":["August 2019","DOI:10.1145/3338906.3338909","Conference: the 2019 27th ACM Joint Meeting"],"references":["327566664_What's_in_a_GitHub_Star_Understanding_Repository_Starring_Practices_in_a_Social_Coding_Platform","327445639_Cross-project_code_clones_in_GitHub","327122899_ReScue_crafting_regular_expression_DoS_attacks","325732250_Are_code_examples_on_an_online_QA_forum_reliable_a_study_of_API_misuse_on_stack_overflow","323026969_Usage_and_Attribution_of_Stack_Overflow_Code_Snippets_in_GitHub_Projects","321859870_Cloned_and_non-cloned_Java_methods_a_comparative_study","318127134_Statistical_Migration_of_API_Usages","316662438_Stack_Overflow_in_Github_Any_Snippets_There","262690648_Static_Analysis_for_Regular_Expression_Exponential_Runtime_via_Substructural_Logics","261094876_Understanding_reuse_in_the_Android_Market","258316465_StackOverflow_and_GitHub_Associations_Between_Software_Development_and_Crowdsourced_Knowledge","331872251_Exploring_Regular_Expression_Evolution","329639119_Secure_coding_practices_in_Java_challenges_and_vulnerabilities","328903388_Research_Paper_Automatic_Checking_of_Regular_Expressions","328591811_How_well_are_regular_expressions_tested_in_the_wild","328588764_The_impact_of_regular_expression_denial_of_service_ReDoS_in_practice_an_empirical_study_at_the_ecosystem_scale","328585457_Oreo_detection_of_clones_in_the_twilight_zone","323155729_A_systematic_review_of_fuzzing_techniques","321263300_Exploring_regular_expression_comprehension","320391521_DejaVu_a_map_of_code_duplicates_on_GitHub","320028630_Turning_evil_regexes_harmless","318760425_Understanding_Stack_Overflow_Code_Fragments","318494277_Mastering_Regular_Expressions","318125249_Stack_Overflow_in_Github_Any_Snippets_There","317919491_Stack_Overflow_Considered_Harmful_The_Impact_of_CopyPaste_on_Android_Application_Security","316178211_MutRex_A_Mutation-Based_Generator_of_Fault_Detecting_Strings_for_Regular_Expressions","315861659_Static_Detection_of_DoS_Vulnerabilities_in_Programs_that_Use_Regular_Expressions","315638841_Stack_Overflow_A_code_laundering_platform","314943141_Stack_Overflow_A_Code_Laundering_Platform","305525621_Generating_Evil_Test_Strings_for_Regular_Expressions","305524844_Migrating_user_interfaces_in_native_mobile_applications_android_to_iOS","305026774_Exploring_regular_expression_usage_and_context_in_Python","304918837_Analyzing_Matching_Time_Behavior_of_Backtracking_Regular_Expression_Matchers_by_Using_Ambiguity_of_NFA","304286816_Repairing_Programs_with_Semantic_Code_Search_T","303413506_From_Query_to_Usable_Code_An_Analysis_of_Stack_Overflow_Code_Snippets","301319474_Comparing_reuse_practices_in_two_large_software-producing_companies","300205053_Automated_Software_Transplantation","289331376_A_Comparative_Study_of_Bug_Patterns_in_Java_Cloned_and_Non-cloned_Code","279439148_Snowball_Sampling_Problems_and_Techniques_of_Chain_Referral_Sampling","271528890_Refactoring_Improving_the_Design_of_Existing_Code","266657931_Mining_StackOverflow_to_turn_the_IDE_into_a_self-confident_programming_prompter","261391911_What_makes_a_good_code_example_A_study_of_programming_QA_in_StackOverflow","261276660_Detecting_and_characterizing_semantic_inconsistencies_in_ported_code","261270949_AutoComment_Mining_question_and_answer_sites_for_automatic_comment_generation","261192598_Seahawk_Stack_overflow_in_the_IDE","261120984_An_Exploratory_Study_of_Cloning_in_Industrial_Software_Product_Lines","259634665_Measuring_and_modeling_programming_experience","257391344_Software_clone_detection_A_systematic_review","255663728_Algorithms_for_Finding_Patterns_in_Strings","242091646_The_Software_Migration_Barbell","225171012_Research_Issues_in_the_Renovation_of_Legacy_Systems","234808611_Reengineering_of_old_systems_to_an_object-oriented_architecture","234784463_Programming_Techniques_Regular_expression_search_algorithm","225888418_Personal_Opinion_Surveys","222826061_Comparison_and_evaluation_of_code_clone_detection_techniques_and_tools_A_qualitative_approach"]}