{"id":"225722239_Program_extraction_from_normalization_proofs","abstract":"From a constructive proof of strong normalization plus uniqueness of the long beta-normal form for the simply typed lambda-calculus a normalization program is extracted using Kreisel's modified realizability interpretation for intuitionistic logic. The proof — which uses Tait's computability predicates — is not completely formalized: Induction is done on the meta level, and therefore not a single program but a family of program, one for each term is obtained. Nevertheless this may be used to write a short and efficient normalization program in a type free programming functional programming language (e.g. LISP) which has the interesting feature that it first evaluates a term r of type to a functional r of type p and then collapses r to the normal form of r.","authors":["Ulrich Berger"],"meta":["April 2006","DOI:10.1007/BFb0037100","In book: Typed Lambda Calculi and Applications (pp.91-106)"],"references":["257283540_Programmation_fonctionelle_certifiee_--_L'extraction_de_programmes_dans_l'assistant_Coq","238244186_Implicit_and_noncomputational_arguments_using_monads","246739009_Machine_Checked_Normalization_Proofs_for_Typed_Combinator_Calculi","243787850_PX_a_system_extracting_programs_from_proofs","243773825_A_proof_of_normalization_for_simply_typed_lambda_calculus_written_in_ALF","240319684_Extracting_o's_programs_from_proofs_in_the_calculus_of_constructions","240118623_Minimal_logic_for_computable_functionals","239601765_Interpretation_of_analysis_by_means_of_functionals_of_finite_type","223354157_Synthesis_of_ML_Programs_in_the_System_Coq","222294431_Lambda_Calculus_Notation_with_Nameless_Dummies_a_Tool_for_Automatic_Formula_Manipulation_with_Application_to_the_Church-Rosser_Theorem"]}