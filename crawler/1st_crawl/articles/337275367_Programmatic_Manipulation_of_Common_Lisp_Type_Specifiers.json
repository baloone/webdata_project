{"id":"337275367_Programmatic_Manipulation_of_Common_Lisp_Type_Specifiers","abstract":"In this article we contrast the use of the s-expression with the BDD (Binary Decision Diagram) as a data structure for pro-grammatically manipulating Common Lisp type specifiers. The s-expression is the de facto standard surface syntax and also programmatic representation of the type specifier, but the BDD data structure offers advantages: most notably, type equivalence checks using s-expressions can be computa-tionally intensive, whereas the type equivalence check using BDDs is a check for object identity. As an implementation and performance experiment, we define the notion of maximal disjoint type decomposition, and discuss implementations of algorithms to compute it: a brute force iteration, and as a tree reduction. The experimental implementations represent type specifiers by both aforementioned data structures , and we compare the performance observed in each approach.","authors":["Jim Edward Newton","Didier Verna","Maximilien Colange"],"meta":["November 2019","Conference: European Lisp Symposium","Project: European Lisp Symposium"],"references":["337275458_Type-Checking_of_Heterogeneous_Sequences_in_Common_Lisp","221057069_Verification_of_Synchronous_Sequential_Machines_Based_on_Symbolic_Execution","220898822_A_Gentle_Introduction_to_Semantic_Subtyping","220404617_Regular_Expression_Types_for_XML","280765005_Graph-based_algorithms_for_Boolean_function_manipulation","228440070_An_introduction_to_Binary_Decision_Diagrams","225216636_A_decision_procedure_for_common_Lisp'sSUBTYPEP_predicate","222470936_Symbolic_Model_Checking_1020_States_and_Beyond","221057054_Compiling_pattern_matching_to_good_decision_trees","220422039_An_improved_equivalence_algorithm","200030023_Structure_and_Interpretation_of_Computer_Programs","31853978_Paradigms_of_Artificial_Intelligence_Programming_Case_Studies_in_Common_LISP","3047130_Binary_Decision_Diagrams"]}