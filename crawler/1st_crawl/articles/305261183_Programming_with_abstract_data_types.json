{"id":"305261183_Programming_with_abstract_data_types","abstract":"The motivation behind the work in very-high-level languages is to ease the programming task by providing the programmer with a language containing primitives or abstractions suitable to his problem area. The programmer is then able to spend his effort in the right place; he concentrates on solving his problem, and the resulting program will be more reliable as a result. Clearly, this is a worthwhile goal. Unfortunately, it is very difficult for a designer to select in advance all the abstractions which the users of his language might need. If a language is to be used at all, it is likely to be used to solve problems which its designer did not envision, and for which the abstractions embedded in the language are not sufficient. This paper presents an approach which allows the set of built-in abstractions to be augmented when the need for a new data abstraction is discovered. This approach to the handling of abstraction is an outgrowth of work on designing a language for structured programming. Relevant aspects of this language are described, and examples of the use and definitions of abstractions are given.","authors":["B. Liskov","S. Zilles"],"meta":["April 1974","DOI:10.1145/942572.807045"],"references":["273920119_Procedural_encapsulation","225965977_The_Programming_Language_Pascal","221213216_Toward_an_Understanding_of_Data_Structures","220425607_Protection_in_Programming_Languages"]}