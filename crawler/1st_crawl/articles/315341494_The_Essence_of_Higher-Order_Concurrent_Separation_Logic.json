{"id":"315341494_The_Essence_of_Higher-Order_Concurrent_Separation_Logic","abstract":"Concurrent separation logics (CSLs) have come of age, and with age they have accumulated a great deal of complexity. Previous work on the Iris logic attempted to reduce the complex logical mechanisms of modern CSLs to two orthogonal concepts: partial commutative monoids (PCMs) and invariants. However, the realization of these concepts in Iris still bakes in several complex mechanisms—such as weakest preconditions and mask-changing view shifts—as primitive notions. In this paper, we take the Iris story to its (so to speak) logical conclusion, applying the reductionist methodology of Iris to Iris itself. Specifically, we define a small, resourceful base logic, which distills the essence of Iris: it comprises only the assertion layer of vanilla separation logic, plus a handful of simple modalities. We then show how the much fancier logical mechanisms of Iris—in particular, its entire program specification layer—can be understood as merely derived forms in our base logic. This approach helps to explain the meaning of Iris’s program specifications at a much higher level of abstraction than was previously possible. We also show that the step-indexed “later” modality of Iris is an essential source of complexity, in that removing it leads to a logical inconsistency. All our results are fully formalized in the Coq proof assistant.","authors":["Robbert Krebbers","Ralf Jung","Aleš Bizjak","Jacques-Henri Jourdan"],"meta":["March 2017Lecture Notes in Computer Science","DOI:10.1007/978-3-662-54434-1_26","Conference: European Symposium on Programming"],"references":["264394320_TaDA_A_Logic_for_Time_and_Data_Abstraction","261597750_Modular_Reasoning_about_Separation_of_Concurrent_Data_Structures","261554680_Impredicative_Concurrent_Abstract_Predicates","227130424_Strong_functors_and_monoidal_monads","226906058_Monads_on_symmetric_monoidal_closed_categories","221477308_Checking_Interference_with_Fractional_Permissions","220997513_Permission_accounting_in_separation_logic","213877728_A_very_modal_model_of_a_modern_major_general_type_system","325142264_Mechanized_Verification_of_Fine-Grained_Concurrent_Programs","316898653_Interactive_proofs_in_higher-order_concurrent_separation_logic","312013370_Interactive_proofs_in_higher-order_concurrent_separation_logic","312013353_A_relational_model_of_types-and-effects_in_higher-order_concurrent_separation_logic","311482791_Higher-order_ghost_state","311473868_A_relational_modal_logic_for_higher-order_stateful_ADTs","310824189_Higher-order_ghost_state","282926793_Iris_Monoids_and_Invariants_as_an_Orthogonal_Basis_for_Concurrent_Reasoning","282486410_Mechanized_Verification_of_Fine-Grained_Concurrent_Programs","276464666_Iris","268613168_Verified_Compilation_for_Shared-Memory_C","267672965_Program_logics_for_certified_compilers","262203648_Unifying_Refinement_and_Hoare-Style_Reasoning_in_a_Logic_for_Higher-Order_Concurrency","223295612_Proving_assertions_about_parallel_programs","221602755_Deny-Guarantee_Reasoning","221602478_Oracle_Semantics_for_Concurrent_Separation_Logic","221496189_Concurrent_Abstract_Predicates","221160596_The_Next_700_Separation_Logics_-_Invited_Paper","220997232_Expressive_Modular_Fine-Grained_Concurrency_Specification","220997193_A_Relational_Modal_Logic_for_Higher-Order_Stateful_ADTs","220404293_An_indexed_model_of_recursive_types_for_foundational_proof-carrying_code","200031684_Guarded_Commands_Nondeterminacy_and_Formal_Derivation_of_Programs","38373144_The_Logic_of_Bunched_Implications","3854911_A_Modality_for_Recursion","2895661_BI_as_an_Assertion_Language_for_Mutable_Data_Structures"]}