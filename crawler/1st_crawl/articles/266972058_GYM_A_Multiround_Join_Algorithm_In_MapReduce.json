{"id":"266972058_GYM_A_Multiround_Join_Algorithm_In_MapReduce","abstract":"We study the problem of computing the join of $n$ relations in multiple\nrounds of MapReduce. We introduce a distributed and generalized version of\nYannakakis's algorithm, called GYM. GYM takes as input any generalized\nhypertree decomposition (GHD) of a query of width $w$ and depth $d$, and\ncomputes the query in $O(d)$ rounds and $O(n(\\mathrm{IN}^w + \\mathrm{OUT}))$\ncommunication and computation cost. Using GYM we achieve two main results: (1)\nEvery width-$w$ query can be computed in $O(n)$ rounds of MapReduce with\n$O(n(\\mathrm{IN}^w + \\mathrm{OUT}))$ cost; (2) Every width-$w$ query can be\ncomputed in $O(\\log(n))$ rounds of MapReduce with $O(n(\\mathrm{IN}^{3w} +\n\\mathrm{OUT}))$ cost. We achieve our second result by showing how to construct\na $O(\\log(n))$-depth and width-$3w$ GHD of a query of width $w$. We describe\nanother general technique to construct even shorter depth GHDs with longer\nwidths, effectively showing a spectrum of tradeoffs one can make between\ncommunication and computation and the number of rounds of MapReduce. By\nsimulating MapReduce in the PRAM model, our second main result also implies the\nresult of Gottlob et al.\\cite{gottlob:acq} that computing acyclic and\nconstant-width queries are in NC. In fact, for certain queries, our approach\nyields significantly fewer PRAM steps than does the construction of the latter\npaper. However, we achieve our results using only Yannakakis's algorithm, which\nhas been perceived to have a sequential nature. Instead, we surprisingly show\nthat Yannakakis's algorithm can be parallelized significantly by giving it as\ninput short-depth GHDs of queries.","authors":["Foto Afrati","Manas Joglekar","Christopher RÃ©","Semih Salihoglu"],"meta":["October 2014","SourcearXiv"],"references":["268624260_CliqueSquare_in_Action_Flat_Plans_for_Massively_Parallel_RDF_Queries","259624951_Skew_in_Parallel_Query_Processing","257748810_Skew_Strikes_Back_New_Developments_in_the_Theory_of_Join_Algorithms","254042545_Fuzzy_Joins_Using_MapReduce","241689300_Communication_Steps_for_Parallel_Query_Processing","312775005_MapReduce_Simplified_data_processing_on_large_clusters","266656616_Demonstration_of_the_Myria_Big_Data_Management_Service","260707483_Optimizing_Multiway_Joins_in_a_Map-Reduce_Environment","239761098_Query_optimization_for_massively_parallel_data_processing","235246933_Pig_Latin_A_Not-So-Foreign_Language_for_Data_Processing"]}