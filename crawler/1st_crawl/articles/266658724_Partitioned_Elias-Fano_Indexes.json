{"id":"266658724_Partitioned_Elias-Fano_Indexes","abstract":"The Elias-Fano representation of monotone sequences has been recently applied to the compression of inverted indexes, showing excellent query performance thanks to its efficient random access and search operations. While its space occupancy is competitive with some state-of-the-art methods such as gamma-delta-Golomb codes and PForDelta, it fails to exploit the local clustering that inverted lists usually exhibit, namely the presence of long subsequences of close identifiers. In this paper we describe a new representation based on partitioning the list into chunks and encoding both the chunks and their endpoints with Elias-Fano, hence forming a two-level data structure. This partitioning enables the encoding to better adapt to the local statistics of the chunk, thus exploiting clustering and improving compression. We present two partition strategies, respectively with fixed and variable-length chunks. For the latter case we introduce a linear-time optimization algorithm which identifies the minimum-space partition up to an arbitrarily small approximation factor.\nWe show that our partitioned Elias-Fano indexes offer significantly better compression than plain Elias-Fano, while preserving their query time efficiency. Furthermore, compared with other state-of-the-art compressed encodings, our indexes exhibit the best compression ratio/query time trade-off.","authors":["Giuseppe Ottaviano","Rossano Venturini"],"meta":["July 2014","DOI:10.1145/2600428.2609615"],"references":["232252646_Decoding_billions_of_integers_per_second_through_vectorization","221613797_VSEncoding_Efficient_Coding_and_Fast_Decoding_of_Integer_Lists_via_Dynamic_Programming","221613425_Efficient_query_evaluation_using_a_two-level_retrieval_process","221613419_SIMD-based_decoding_of_posting_lists","221300210_Compressing_Term_Positions_in_Web_Indexes","221023128_Inverted_index_compression_and_query_processing_with_optimized_document_ordering","45858824_On_Optimally_Partitioning_a_Text_to_Improve_Its_Compression","4234735_Super-scalar_RAM-CPU_cache_compression","2451906_Compressing_Relations_and_Indexes","301222420_Relevance_weighting_of_search_terms","265812801_Information_retrieval_Implementing_and_evaluating_search_engines","262332039_Unicorn_A_system_for_searching_the_social_graph","252117051_Variable-length_Codes_for_Data_Compression","247442902_Introduction_To_Algorithms","228949823_Searching_Web_Data_an_Entity_Retrieval_and_High-Performance_Indexing_Model","227342577_Quasi-Succinct_Indices","225246528_Binary_Interpolative_Coding_for_Effective_Index_Compression","221613795_Index_compression_is_good_especially_for_random_access","221397653_Sorting_Out_the_Document_Identifier_Assignment_Problem","220566595_Inverted_files_for_text_search_engines","220479917_Inverted_Index_Compression_Using_Word-Aligned_Binary_Codes","220432108_Efficient_Storage_and_Retrieval_by_Content_and_Address_of_Static_Files","220281825_Index_compression_using_64-bit_words","200045867_An_Introduction_to_Information_Retrieval_DRAFT","2872779_Improving_Table_Compression_with_Combinatorial_Optimization"]}