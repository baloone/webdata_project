{"id":"268335425_Automated_Test_Data_Generation_Based_On_Individual_Constraints_and_Boundary_Value","abstract":"Testing is an important activity in software development. Unfortunately till today testing is done manually by most of the industry due to high cost and complexity of automation. Automated testing can reduce the cost of software significantly. Automated Software Test Data Generation is an activity that in the course of software testing automatically generates test data for the software under test. Most of the automated test data generation uses constraint solver to generate test data. But it cannot generate test data when the constraints are not solvable. Although method can be found to generate test data even if the constraints are unsolvable, but it is poor in terms of code coverage. In this paper, we propose a test data generation method to improve test coverage and to avoid the unsolvable constraints problem. Our method is based on the individual constraints and same or dependent variable to create the path table which holds the information about the path traversed by various input test data. For generating unique test data for all the linearly independent feasible path we created equivalence class from the path table on the basis of path traversed by the various input test data. The input data is taken based on individual constraints or boundary value. Our results are compared with cyclomatic complexity and number of possible infeasible paths. The comparison shows the effectiveness of our method.","authors":["Hitesh Tahbildar","Bichitra Kalita"],"meta":["September 2010International Journal of Computer Science Issues 7(5)"],"references":["262317868_Constraint-Based_Automatic_Test_Data_Generation","228622525_Path-oriented_random_testing","221560458_CUTE_A_concolic_unit_testing_engine_for_C","221246474_PathCrawler_Automatic_Generation_of_Path_Tests_by_Combining_Static_and_Dynamic_Analysis","263988293_A_CONSTRAINT_SOLVER_AND_ITS_APPLICATION_TO_PATH_FEASIBILITY_ANALYSIS","262315186_Prioritize_Code_for_Testing_to_Improve_Code_Coverage_of_Complex_Software","228715246_A_Systematic_Review_of_Automated_Test_Data_Generation_Techniques","222744472_Heuristics-based_infeasible_path_detection_for_dynamic_test_data_generation","221500646_All_code_coverage_is_not_created_equal_A_case_study_in_prioritized_code_coverage","220070476_A_System_to_Generate_Test_Data_and_Symbolically_Execute_Programs"]}