{"id":"291140377_Reviewer_Recommendation_for_Pull-Requests_in_GitHub_What_Can_We_Learn_from_Code_Review_and_Bug_Assignment","abstract":"Context: The pull-based model, widely used in distributed software development, offers an extremely low barrier to entry for potential contributors (anyone can submit of contributions to any project, through pull-requests). Meanwhile, the project’s core team must act as guardians of code quality, ensuring that pull-requests are carefully inspected before being merged into the main development line. However, with pull-requests becoming increasingly popular, the need for qualified reviewers also increases. GitHubfacilitates this, by enabling the crowd-sourcing of pull-request reviews to a larger community of coders than just the project’s core team, as a part of their social coding philosophy. However, having access to more potential reviewers does not necessarily mean that it’s easier to find the right ones (the “needle in a haystack” problem). If left unsupervised, this process may result in communication overhead and delayed pull-request processing. Objective: This study aims to investigate whether and how previous approaches used in bug triaging and code review can be adapted to recommending reviewers for pull-requests, and how to improve the recommendation performance. Method: First, we extend three typical approaches used in bug triaging and code review for the new challenge of assigning reviewers to pull-requests. Second, we analyze social relations between contributors and reviewers, and propose a novel approach by mining each project’s comment networks (CNs). Finally, we combine the CNs with traditional approaches, and evaluate the effectiveness of all these methods on 84 GitHubprojects through both quantitative and qualitative analysis. Results: We find that CN-based recommendation can achieve, by itself, similar performance as the traditional approaches. However, the mixed approaches can achieve significant improvements compared to using either of them independently. Conclusion: Our study confirms that traditional approaches to bug triaging and code review are feasible for pull-request reviewer recommendations on GitHub. Furthermore, their performance can be improved significantly by combining them with information extracted from prior social interactions between developers on GitHub. These results prompt for novel tools to support process automation in social coding platforms, that combine social (e.g.,common interests among developers) and technical factors (e.g.,developers’ expertise).","authors":["Yue Yu","Huaimin Wang","Gang Yin","Tao Wang"],"meta":["January 2016Information and Software Technology 74","DOI:10.1016/j.infsof.2016.01.004"],"references":["307826381_Who_Should_Review_this_Pull-Request_Reviewer_Recommendation_to_Expedite_Crowd_Collaboration","303214441_Gephi_An_Open_Source_Software_for_Exploring_and_Manipulating_Networks","291206543_Wait_for_It_Determinants_of_Pull_Request_Evaluation_Latency_on_GitHub","291187145_Quality_and_productivity_outcomes_relating_to_continuous_integration_in_GitHub","283596213_Exploring_the_patterns_of_social_behavior_in_GitHub","279043219_Work_Practices_and_Challenges_in_Pull-Based_Development_The_Integrator's_Perspective","273859036_Multi-Label_Classification_An_Overview","273699454_Who_Should_Review_My_Code_A_File_Location-Based_Code-Reviewer_Recommendation_Approach_for_Modern_Code_Review","303099271_Work_practices_and_challenges_in_pull-based_development_the_contributor's_perspective","291595077_Let's_talk_about_it_evaluating_contributions_through_discussion_in_GitHub"]}