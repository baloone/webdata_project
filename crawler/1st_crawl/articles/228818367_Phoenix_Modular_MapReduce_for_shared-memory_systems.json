{"id":"228818367_Phoenix_Modular_MapReduce_for_shared-memory_systems","abstract":"This paper describes our rewrite of Phoenix, a MapReduce framework for shared-memory CMPs and SMPs. Despite successfully demonstrating the applicability of a MapReduce-style pipeline to shared-memory machines, Phoenix has a number of limitations; its uniform intermediate storage of key-value pairs, inefficient combiner implementation, and poor task overhead amortization fail to efficiently support a wide range of MapReduce applications, encouraging users to manually circumvent the framework. We describe an al-ternative implementation, Phoenix++, that provides a mod-ular, flexible pipeline that can be easily adapted by the user to the characteristics of a particular workload. Compared to Phoenix, this new approach achieves a 4.7-fold performance improvement and increased scalability, while allowing users to write simple, strict MapReduce code.","authors":["Justin Talbot","Richard M Yoo","Christos Kozyrakis"],"meta":["January 2011","DOI:10.1145/1996092.1996095"],"references":["224694506_Evaluating_MapReduce_for_Multi-core_and_Multiprocessor_Systems","220941464_A_Map-Reduce_System_with_an_Alternate_API_for_Multi-core_Environments","220884795_Tiled-MapReduce_Optimizing_Resource_Usages_of_Data-parallel_Applications_on_Multicore_with_Tiling","220884707_Mars_A_MapReduce_framework_on_graphics_processors","221474571_Phoenix_rebirth_Scalable_MapReduce_on_a_large-scale_shared-memory_system","220851866_MapReduce_Simplified_Data_Processing_on_Large_Clusters","213878695_Curiously_recurring_template_patterns","43440948_Optimizing_MapReduce_for_Multicore_Architectures"]}