{"id":"331318176_Cache-conscious_Off-Line_Real-Time_Scheduling_for_Multi-Core_Platforms_Algorithms_and_Implementation","abstract":"Most schedulability analysis techniques for multi-core architectures assume a single worst-case execution time (WCET) per task, which is valid in all execution conditions. This assumption is too pessimistic for parallel applications running on multi-core architectures with local instruction or data caches, for which the WCET of a task depends on the cache contents at the beginning of its execution, itself depending on the tasks that were executed immediately before the task under study. In this paper, we propose two scheduling techniques for multi-core architectures equipped with local instruction and data caches. The two techniques schedule a parallel application modeled as a task graph, and generate a static partitioned non-preemptive schedule, that takes benefit of cache reuse between pairs of consecutive tasks. We propose an exact method, using an integer linear programming formulation, as well as a heuristic method based on list scheduling. The efficiency of the techniques is demonstrated through an implementation of these cache-conscious schedules on a real multi-core hardware: a 16-core cluster of the Kalray MPPA-256, Andey generation. We point out implementation issues that arise when implementing the schedules on this particular platform. In addition, we propose strategies to adapt the schedules to the identified implementation factors. An experimental evaluation reveals that our proposed scheduling methods significantly reduce the length of schedules as compared to cache-agnostic scheduling methods. Furthermore, our experiments show that among the identified implementation factors, shared bus contention has the most impact.","authors":["Viet Anh Nguyen","Damien Hardy","Isabelle Puaut"],"meta":["October 2019Real-Time Systems 55(4)","DOI:10.1007/s11241-019-09333-z"],"references":["320074028_Tightening_Contention_Delays_While_Scheduling_Parallel_Applications_on_Multi-core_Architectures","320941412_Quantifying_WCET_reduction_of_parallel_applications_by_introducing_slack_time_to_limit_resource_contention","312186123_BUNDLE_Real-Time_Multi-threaded_Scheduling_to_Reduce_Cache_Contention","310821149_Response_Time_Analysis_of_Synchronous_Data_Flow_Programs_on_a_Many-Core_Processor","309349586_Mapping_hard_real-time_applications_on_many-core_processors","307572343_Reducing_the_Contention_Experienced_by_Real-Time_Core-to-IO_Flows_over_a_Tilera-Like_Network_on_Chip","301966698_Contention-Free_Execution_of_Automotive_Applications_on_a_Clustered_Many-Core_Platform","301723407_Temporal_Isolation_of_Hard_Real-Time_Applications_on_Many-Core_Processors","301453371_Scheduling_with_preemption_delays_anomalies_and_issues","301453297_A_generic_and_compositional_framework_for_multicore_response_time_analysis","295847721_Bounding_and_reducing_memory_interference_in_COTS-based_multi-core_systems","301389355_Optimizing_Preemption-Overhead_Accounting_in_Multiprocessor_Real-Time_Systems","301333454_Knights_Landing_Second-Generation_Intel_Xeon_Phi_Product","287479922_The_challenge_of_time-predictability_in_modern_many-core_architectures","281329128_Integrated_Worst-Case_Execution_Time_Estimation_of_Multicore_Applications"]}