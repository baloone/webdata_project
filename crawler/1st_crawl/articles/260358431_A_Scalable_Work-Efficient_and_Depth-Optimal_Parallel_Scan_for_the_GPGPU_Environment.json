{"id":"260358431_A_Scalable_Work-Efficient_and_Depth-Optimal_Parallel_Scan_for_the_GPGPU_Environment","abstract":"The parallel scan is a basic tool that is used to parallelize algorithms which appear to have serial dependencies. The performance of these algorithms relies heavily on the efficiency of the parallel scan that is being used. To maintain work efficiency, current parallelization methods either sacrifice the overall depth or limit the scalability. In this study, we present a parallel scan method that is derived from the Han-Carlson parallel prefix graph and is both a work-efficient and a depth-optimal process. In this method, the depth is increased by a small constant value above the lower bound; therefore, the amount of computation and/or memory access is effectively reduced. We also employ a novel cascaded thread-block execution method to exploit the single-program-multiple-data (SPMD) nature of the compute unified device architecture (CUDA) environment developed by NVIDIA. The proposed method facilitates the low-latency interthread accessible shared memory and the single-instruction-multiple-thread (SIMT) characteristics of the graphics hardware to reduce high-latency global memory access and costly barrier synchronization. Our experimental results demonstrate an average speed up of approximately 40 and 10 percent over the CUDA data parallel primitives (CUDPP) library derivation of the Kogge-Stone prefix tree and an implementation of Merrill and Grimshaw's method with coarser combination of the Kogge-Stone graph and the Brent-Kung prefix graph, respectively.","authors":["Sang-Won Ha","Tack-Don Han"],"meta":["December 2013IEEE Transactions on Parallel and Distributed Systems 24(12):2324-2333","DOI:10.1109/TPDS.2012.336"],"references":["260687001_GPU_computing","234783051_Debunking_the_100x_GPU_vs_CPU_myth_an_evaluation_of_throughput_computing_on_CPU_and_GPU","202260508_A_Work-Efficient_Step-Efficient_Prefix_Sum_Algorithm","319770176_Summed-area_tables_for_texture_mapping","303434283_A_work-efficient_step-efficient_prefix_sum_algorithm","279982530_Optimizing_Parallel_Prefix_Operations_for_the_Fermi_Architecture","258224378_Efficient_Parallel_Scan_Algorithms_for_GPUs","244442589_Stream_reduction_operations_for_GPGPU_applications","238674586_The_apl_terminal_system_instructions_for_operation","235453107_Parallel_Prefix_Computation","234791241_Summed-Area_Tables_for_Texture_Mapping","228651764_Parallel_scan_for_stream_architectures","224583051_Conditional-Sum_Addition_Logic","224483264_A_Parallel_Algorithm_for_the_Efficient_Solution_of_a_General_Class_of_Recurrence_Equations","221235976_Fast_scan_algorithms_on_graphics_processors","220688575_Vector_Models_for_Data-Parallel_Computing","220507113_Fast_Summed-Area_Table_Generation_and_its_Applications","220404454_Ultracomputers","202260457_Parallel_prefix_sum_scan_with_CUDA","35581400_Fast_area-efficient_VLSI_adders","4355031_An_optimal_parallel_algorithm_for_sorting","3504506_Scan_primitives_for_vector_computers","3042526_Scans_as_Primitive_Parallel_Operations","2887564_A_Regular_Layout_for_Parallel_Adders","2811133_A_Comparison_of_Sorting_Algorithms_for_the_Connection_Machine_CM-2","2787737_Prefix_Sums_and_Their_Applications"]}