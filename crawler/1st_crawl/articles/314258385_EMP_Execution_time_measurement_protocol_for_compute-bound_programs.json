{"id":"314258385_EMP_Execution_time_measurement_protocol_for_compute-bound_programs","abstract":"Measuring execution time is one of the most used performance evaluation techniques in computer science research. Inaccurate measurements cannot be used for a fair performance comparison between programs. Despite the prevalence of its use, the intrinsic variability in the time measurement makes it hard to obtain repeatable and accurate timing results of a program running on an operating system. We propose a novel execution time measurement protocol (termed EMP) for measuring the execution time of a compute-bound program on Linux, while minimizing that measurement's variability. During the development of execution time measurement protocol, we identified several factors that disturb execution time measurement. We introduce successive refinements to the protocol by addressing each of these factors, in concert, reducing variability by more than an order of magnitude. We also introduce a new visualization technique, what we term ‘dual-execution scatter plot’ that highlights infrequent, long-running daemons, differentiating them from frequent and/or short-running daemons. Our empirical results show that the proposed protocol successfully achieves three major aspects—precision, accuracy, and scalability—in execution time measurement that can work for open-source and proprietary software. Copyright","authors":["Young-Kyoon Suh","Richard T. Snodgrass","John Kececioglu","Peter J. Downey"],"meta":["February 2017Software Practice and Experience 47(4)","DOI:10.1002/spe.2476","Project: Execution-Time Distributions"],"references":["262641126_Skewless_Network_Clock_Synchronization_Without_Discontinuity_Convergence_and_Performance","243782903_Gprof_A_call_graph_execution_profiler","234807585_The_worst-case_execution_time_problem-Overview_of_methods_and_survey_of_tools","220782104_A_Scalable_Cross-Platform_Infrastructure_for_Application_Performance_Tuning_Using_Hardware_Counters","312602790_Performance_analysis_using_the_MIPS_R10000_performance_counters","310821979_DBMS_metrology_Measuring_query_time","300541540_Benchmarking_and_Resource_Measurement","289738575_AZDBLab_A_laboratory_information_system_for_large-scale_empirical_DBMS_studies","278256572_Gprof_A_call_graph_execution_profiler","276465243_AZDBLab","272829967_Windows_Management_Instrumentation","262405154_Measuring_and_reducing_the_impact_of_the_operating_system_kernel_on_end-to-end_latencies_in_synchronous_packet_switched_networks","262401242_DBMS_metrology_Measuring_query_time","255675210_Measuring_monitoring_and_enforcing_CPU_execution_time","248702733_An_Empirical_Time_Analysis_of_Evolutionary_Algorithms_as_C_Programs","239539660_Internet_time_synchronization_The_network_time_protocol","239027417_Unix_Network_Programming-Networking_APIs_Sockets_and_XTI","235709902_A_Guide_to_Experimental_Algorithmics","234793464_Advanced_Programming_in_the_UNIXR_Environment_2nd_Edition","227770410_Web_workload_generation_challenges_-_An_empirical_investigation","227055681_The_Hardware_Performance_Monitor_Toolkit","222520228_Branch_target_buffers_WCET_analysis_framework_and_timing_predictability","220910014_Continuous_Profiling_Where_Have_All_the_Cycles_Gone","220692824_Computer_systems_-_a_programmers_perspective","220281115_An_empirical_study_of_Java_bytecode_programs","220244863_SPEC_CPU2006_benchmark_tools","220244800_SPEC_CPU2006_benchmark_descriptions","220094392_Measuring_and_Policing_Blocking_Times_in_Real-Time_Systems","4204644_Using_Dynamic_Tracing_Sampling_to_Measure_Long_Running_Programs","3157871_Internet_Time_Synchronization_The_Network_Time_Protocol"]}