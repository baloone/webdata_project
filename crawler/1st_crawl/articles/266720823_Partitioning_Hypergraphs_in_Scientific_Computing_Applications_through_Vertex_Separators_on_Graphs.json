{"id":"266720823_Partitioning_Hypergraphs_in_Scientific_Computing_Applications_through_Vertex_Separators_on_Graphs","abstract":"The modeling flexibility provided by hypergraphs has drawn a lot of interest from the combinatorial scientific community, leading to novel models and algorithms, their applications, and development of associated tools. Hypergraphs are now a standard tool in combinatorial scientific computing. The modeling flexibility of hypergraphs, however, comes at a cost: algorithms on hypergraphs are inherently more complicated than those on graphs, which sometimes translates to nontrivial increases in processing times. Neither the modeling flexibility of hypergraphs nor the runtime efficiency of graph algorithms can be overlooked. Therefore, the new research thrust should be how to cleverly trade off between the two. This work addresses one method for this trade-off by solving the hypergraph partitioning problem by finding vertex separators on graphs. Specifically, we investigate how to solve the hypergraph partitioning problem by seeking a vertex separator on its net intersection graph (NIG), where each net of the hypergraph is represented by a vertex, and two vertices share an edge if their nets have a common vertex. We propose a vertex-weighting scheme to attain good node-balanced hypergraphs, since the NIG model cannot preserve node-balancing information. Vertex-removal and vertex-splitting techniques are described to optimize cut-net and connectivity metrics, respectively, under the recursive bipartitioning paradigm. We also developed implementations of our proposed hypergraph partitioning formulations by adopting and modifying a state-of-the-art graph partitioning by vertex separator tool onmetis. Experiments conducted on a large collection of sparse matrices demonstrate the effectiveness of our proposed techniques.","authors":["Enver Kayaaslan","Ali Pinar","Umit V. Catalyurek","Cevdet Aykanat"],"meta":["January 2012SIAM Journal on Scientific Computing 34(2)","DOI:10.1137/100810022"],"references":["255942763_Permuting_Sparse_Rectangular_Matrices_into_Block-Diagonal_Form","254424775_METIS-A_Software_Package_for_Partitioning_Unstructured_Graphs_Partitioning_Meshes_and_Computing_Fill-Reducing_Ordering_of_Sparse_Matrices","250405750_Revisiting_Hypergraph_Models_for_Sparse_Matrix_Partitioning","242931502_General_Techniques_for_Combinatorial_Approximations_Operations_Research_25920-936","267990513_A_Parallel_Hypergraph_Partitioning_Tool","265762974_Hypergraph_Partitioning_Based_Models_and_Methods_for_Exploiting_Cache_Locality_in_Sparse_Matrix-Vector_Multiplication","262911701_Computer_Solution_of_Large_Sparse_Positive_Dejnite_Systems","245695009_Combinatorial_Algorithms_for_Circuit_Layout","242589602_General_techniques_for_combinational_approximation","242362699_Nested_Dissection_of_a_Regular_Finite_Element_Mesh"]}