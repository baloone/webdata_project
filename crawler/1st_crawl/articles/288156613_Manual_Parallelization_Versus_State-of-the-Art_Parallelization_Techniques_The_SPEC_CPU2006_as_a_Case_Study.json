{"id":"288156613_Manual_Parallelization_Versus_State-of-the-Art_Parallelization_Techniques_The_SPEC_CPU2006_as_a_Case_Study","abstract":"Being multiprocessors (both on-chip and/or off-chip), modern computer systems can automatically exploit the benefits of parallel programs, but their resources remain underutilized in executing still-prevailing sequential applications. An obvious solution is in the parallelization of such applications. The first part overviews the broad issues in parallelization. Various parallelization approaches and contemporary software and hardware tools for extracting parallelism from sequential applications are studied. It also attempts to identify typical code patterns amenable for parallelization. The second part represents a case study where the SPEC CPU2006 suite is considered as a representative collection of typical sequential applications. Following that, it discusses the possibilities and potentials of automatic parallelization and vectorization of the sequential C++ applications from the CPU2006 suite. Since these potentials are generally limited, it explores the issues in manual parallelization of these applications. After previously identified patterns are applied by source-to-source code modifications, the effects of parallelization are evaluated by profiling and executing on two representative parallel machines. Finally, the presented results are carefully discussed.","authors":["Aleksandar Vitorovic","Milo Tomasevic","Veljko M. MilutinoviÄ‡"],"meta":["December 2014Advances in Computers 92:203-251","DOI:10.1016/B978-0-12-420232-0.00005-2"],"references":["225352101_STAPL_An_adaptive_generic_parallel_C_library","225104118_Semantic-Aware_Automatic_Parallelization_of_Modern_Applications_Using_High-Level_Abstractions","224090147_Cetus_A_Source-to-Source_Compiler_Infrastructure_for_Multicores","221643596_Open_Nesting_in_Software_Transactional_Memory","221497051_Compiler-Driven_Dependence_Profiling_to_Guide_Program_Parallelization","221235597_Compiler_and_runtime_support_for_enabling_generalized_reduction_computations_on_heterogeneous_parallel_configurations","220662641_Parallelization_of_DOALL_and_DOACROSS_Loops-a_Survey","220422260_The_Bulk_Multicore_Architecture_for_Improved_Programmability","220422248_A_closer_look_at_GPUs","220280075_A_Survey_of_Algorithmic_Skeleton_Frameworks_High-Level_Structured_Parallel_Programming_Enablers","3300336_The_LRPD_test_Speculative_run-time_parallelization_of_loops_with_privatization_and_reduction_parallelization","279401259_Kremlin","279346031_Merge","238799499_The_SPLASH2_programs_characterization_and_methodological_considerations","225669925_A_CompileRun-time_Environment_for_the_Automatic_Transformation_of_Linked_List_Data_Structures","225170873_Experiments_with_Auto-Parallelizing_SPEC2000FP_Benchmarks","224393332_Lightweight_predication_support_for_out_of_order_processors","221235547_Towards_automatic_translation_of_OpenMP_to_MPI","221059436_The_Cilk_Concurrency_Platform","220799196_Profile-assisted_Compiler_Support_for_Dynamic_Predication_in_Diverge-Merge_Processors","220696242_Transactional_Memory","220244854_Subroutine_Profiling_Results_for_the_CPU2006_Benchmarks","220244800_SPEC_CPU2006_benchmark_descriptions","215562040_Exposing_speculative_thread_parallelism_in_SPEC2000","213876533_Tight_analysis_of_the_performance_potential_of_thread_speculation_using_SPEC_CPU_2006","7542956_Scalable_molecular_dynamics_with_NAMD_Comp_Chem_26_1781-1802","4162491_Heuristics_for_profile-driven_method-level_speculative_parallelization","4095201_The_value_evolution_graph_and_its_use_in_memory_reference_analysis","3777949_Dynamic_Hammock_Predication_for_Non-predicated_Instruction_Set_Architectures","2954682_Maximizing_multiprocessor_performance_with_the_SUIF_compiler"]}