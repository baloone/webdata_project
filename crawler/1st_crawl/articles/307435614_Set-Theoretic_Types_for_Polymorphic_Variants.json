{"id":"307435614_Set-Theoretic_Types_for_Polymorphic_Variants","abstract":"Polymorphic variants are a useful feature of the OCaml language whose current definition and implementation rely on kinding constraints to simulate a subtyping relation via unification. This yields an awkward formalization and results in a type system whose behaviour is in some cases unintuitive and/or unduly restrictive.\nIn this work, we present an alternative formalization of polymorphic variants, based on set-theoretic types and subtyping, that yields a cleaner and more streamlined system. Our formalization is more expressive than the current one (it types more programs while preserving type safety), it can internalize some meta-theoretic properties, and it removes some pathological cases of the current implementation resulting in a more intuitive and, thus, predictable type system. More generally, this work shows how to add full-fledged union types to functional languages of the ML family that usually rely on the Hindley-Milner type system. As an aside, our system also improves the theory of semantic subtyping, notably by proving completeness for the type reconstruction algorithm.","authors":["Giuseppe Castagna","Tommaso Petrucciani","Kim Nguyá»…n"],"meta":["June 2016ACM SIGPLAN Notices","DOI:10.1145/2951913.2951928","Conference: the 21st ACM SIGPLAN International Conference"],"references":["276464918_Polymorphic_Functions_with_Set-Theoretic_Types_Part_2_Local_Type_Inference_and_Type_Reconstruction","259759993_Sound_and_Complete_Flow_Typing_with_Unions_Intersections_and_Negations","248185974_Typing_deep_pattern-matching_in_presence_of_polymorphic_variants","221241167_Set-theoretic_Foundation_of_Parametric_Polymorphism_and_Subtyping","220178563_CDuce_An_XML-centric_general-purpose_language","3965919_Semantic_Subtyping","2868087_Simple_Type_Inference_for_Structural_Polymorphism","2791220_Programming_with_Polymorphic_Variants","319394450_Programming_with_Intersection_Types_and_Bounded_Polymorphism","311478579_Set-theoretic_types_for_polymorphic_variants","296583552_Polymorphic_Functions_with_Set-Theoretic_Types","285234477_CDuce","280759252_A_certified_implementation_of_ML_with_structural_polymorphism_and_recursive_types","267719303_A_Unified_System_of_Type_Refinements","267470151_A_Coalgebraic_Foundation_for_Coinductive_Union_Types","262220879_Polymorphic_Functions_with_Set-Theoretic_Types_Part_1_Syntax_Semantics_and_Evaluation","221323146_Exception_Handlers_as_Extensible_Cases","221241087_Logical_Types_for_Untyped_Languages","220997765_The_design_and_implementation_of_typed_scheme","220676440_Warnings_for_pattern_matching","220431611_Semantic_subtyping_Dealing_set-theoretically_with_function_union_intersection_and_negation_types","213884945_The_Essence_of_ML_Type_Inference","2822274_Practical_Refinement-Type_Checking","2619629_Design_of_the_Programming_Language_Forsythe","2328977_A_Polymorphic_Record_Calculus_and_Its_Compilation"]}