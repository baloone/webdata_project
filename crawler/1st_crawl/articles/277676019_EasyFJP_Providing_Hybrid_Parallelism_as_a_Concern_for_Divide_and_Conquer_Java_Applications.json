{"id":"277676019_EasyFJP_Providing_Hybrid_Parallelism_as_a_Concern_for_Divide_and_Conquer_Java_Applications","abstract":"Because of the increasing availability of multi-core machines, clusters, Grids, and combinations of these there is now plenty of computational power, but today's programmers are not fully prepared to exploit parallelism. In particular, Java has helped in handling the heterogeneity of such environments. However, there is a lot of ground to cover regarding facilities to easily and elegantly parallelizing applications. One path to this end seems to be the synthesis of semi-automatic parallelism and Parallelism as a Concern (PaaC). The former allows users to be mostly unaware of parallel exploitation problems and at the same time manually optimize parallelized applications whenever necessary, while the latter allows applications to be separated from parallel-related code. In this paper, we present EasyFJP, an approach that implicitly exploits parallelism in Java applications based on the concept of fork-join synchronization pattern, a simple but effective abstraction for creating and coordinating parallel tasks. In addition, EasyFJP lets users to explicitly optimize applications through policies, or user-provided rules to dynamically regulate task granularity. Finally, EasyFJP relies on PaaC by means of source code generation techniques to wire applications and parallel-specific code together. Experiments with real-world applications on an emulated Grid and a cluster evidence that EasyFJP delivers competitive performance compared to state-of-the-art Java parallel programming tools.","authors":["Cristian Mateos","Alejandro Zunino","Mat√≠as Hirsch"],"meta":["June 2013Computer Science and Information Systems 10(3):1129-1163","DOI:10.2298/CSIS120712021M"],"references":["254201669_JAligner_Open_source_java_implementation_of_Smith-Waterman","238101882_P2P-MapReduce_Parallel_data_processing_in_dynamic_Cloud_environments","237388544_MUSKEL_an_expandable_skeleton_environment","224206747_A_Refactoring_Approach_to_Parallelism","277470507_Fault-Tolerant_Scheduling_of_Fine-Grained_Tasks_in_Grid_Environments","262493452_Parallel_Programming_in_OpenMP","262297330_A_ray_tracing_bibliography","229342474_Java_in_the_High_Performance_Computing_arena_Research_practice_and_experience","224712624_Dynamic_Load-Balancing_and_High_Performance_Communication_in_Jcluster","224176311_Python_An_Ecosystem_for_Scientific_Computing","223442909_On_the_evaluation_of_gridification_effort_and_runtime_aspects_of_JGRIM_applications","222704668_Dynamically_mapping_tasks_with_priorities_and_multiple_deadlines_in_a_heterogeneous_environment","222530481_The_javautilconcurrent_synchronizer_framework","222428333_Programming_with_Exceptions_in_JCilk","222229413_JavaSymphony_a_Programming_Model_for_the_Grid"]}