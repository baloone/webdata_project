{"id":"257643041_Mobile_Ambients","abstract":"There are two distinct areas of work in mobility: “mobile computing”, concerning computation that is carried out in mobile devices, and “mobile computation”, concerning mobile code that moves between devices. These distinctions are destined to vanish. We aim to describe all aspects of mobility within a single framework that encompasses mobile agents, the ambients where agents interact and the mobility of the ambients themselves. The main difficulty with mobile computation is not in mobility per se, but in the crossing of administrative domains. Mobile programs must be equipped to navigate a hierarchy of domains, at every step obtaining authorization to move further. Therefore, at the most fundamental level we need to capture notions of locations, of mobility and of authorization to move. We identify “mobile ambients” as a fundamental abstraction that generalizes both dynamic agents and the static domains they must cross. From a formal point of view we develop a simple but computationally powerful calculus that directly embodies domains and mobility (and little else). The calculus forms the basis of a small-language/Java-library. We demonstrate the expressiveness of the approach by a series of examples, including showing how a notion such as “crossing a firewall” has a direct and analizable interpretation.","authors":["Luca Cardelli","Andrew D. Gordon"],"meta":["June 2000Electronic Notes in Theoretical Computer Science 10(1):198–201","DOI:10.1016/S1571-0661(05)80699-1"],"references":["224001215_The_Java_Language_Specification","220917406_Locality_Based_Linda_Programming_with_Explicit_Localities","270956456_A_Calculus_of_Mobile_Processes_Parts_I_and_II","270956368_Mobile_Ambients","246985698_Object-Based_Models_and_Languages_for_Concurrent_Systems","235089022_Lambda-calculus_models_of_programming_languages","226356938_Functions_as_processes","222477350_Chemical_abstract_machine","220997418_Types_for_Mobile_Ambients","220997136_Reflexive_CHAM_and_the_join-calculus"]}