{"id":"222684215_Algorithmic_Analysis_of_Programs_with_Well_Quasi-ordered_Domains","abstract":"Over the past few years increasing research effort has been directed towards the automatic verification of infinite-state systems. This paper is concerned with identifying general mathematical structures which can serve as sufficient conditions for achieving decidability. We present decidability results for a class of systems (called well-structured systems) which consist of a finite control part operating on an infinite data domain. The results assume that the data domain is equipped with a preorder which is a well quasi-ordering, such that the transition relation is “monotonic” (a simulation) with respect to the preorder. We show that the following properties are decidable for well-structured systems: • Reachability: whether a certain set of control states is reachable. Other safety properties can be reduced to the reachability problem. • Eventuality: whether all executions eventually reach a given set of control states (represented as AFp in CTL). • Simulation: whether there exists a simulation between a finite automaton and a well-structured system. The simulation problem will be shown to be decidable in both directions. We also describe how these general principles subsume several decidability results from the literature about timed automata, relational automata, Petri nets, and lossy channel systems.","authors":["Parosh Aziz Abdulla","Karlis Cerans","Bengt Jonsson","Yih-Kuen Tsay"],"meta":["July 2000Information and Computation 160(1-2):109-127","DOI:10.1006/inco.1999.2843","Sourcedx.doi.org"],"references":["234803097_Abstract_interpretation_A_semantics-based_tool_for_program_analysis","220997507_Abstract_Interpretation_A_Unified_Lattice_Model_for_Static_Analysis_of_Programs_by_Construction_or_Approximation_of_Fixpoints","220673660_Property_Preserving_Abstractions_for_the_Verification_of_Concurrent_Systems","220404750_Abstract_Interpretation_of_Reactive_Systems","268501754_Parallel_program_schemata","266592109_Construction_of_complete_sample_systems_for_programs_with_direct_access_method","266424849_Feasibility_of_finite_and_infinite_paths_in_data_dependent_programs","251790329_Avoiding_The_State_Explosion_Problem_In_Temporal_Logic_Model_Checking_Algorithms","243772547_Abstract_interpretation_of_reactive_systems_Abstractions_preserving_8CTL_9CTL_and_CTL","243764858_Finiteness_of_the_odd_perfect_and_primitive_abundant_numbers_with_n_distinct_prime_factors","238717639_Ordering_by_Divisibility_in_Abstract_Algebras","234814503_Avoiding_the_state_explosion_problem_in_temporal_logic_model_checking","233598704_Undecidable_Verification_Problems_for_Programs_with_Unreliable_Channels","222850848_Parallel_program_schemata","222446361_Finite_State_Description_of_Communication_Protocols","222436931_Algebra_of_communicating_processes_with_abstraction","221329628_Automatic_Construction_of_Complete_Sample_System_for_Program_Testing","220897300_Deciding_Properties_of_Integral_Relational_Automata","220800002_Feasibility_of_Finite_and_Infinite_Paths_in_Data_Dependent_Programs","220700626_Checking_Regular_Properties_of_Petri_Nets","220700620_Decidability_of_Simulation_and_Bisimulation_between_Lossy_Channel_Systems_and_Finite_State_Systems_Extended_Abstract","220430671_On_Communicating_Finite-State_Machines","220248967_Reduction_and_covering_of_infinite_reachability_trees","220247935_Verifying_Programs_with_Unreliable_Channels","220247583_Bisimulation_Equivalence_Is_Decidable_for_All_Context-Free_Processes","220197323_Analysis_of_a_Class_of_Communicating_Finite_State_Machines","220152940_Decidability_of_a_Temporal_Logic_Problem_for_Petri_Nets","3556201_Verifying_programs_with_unreliable_channels","3505209_Model-Checking_for_Real_Time_Systems","3501902_Really_temporal_logic","2357346_Hybrid_Automata_with_Finite_Bisimulations","2265684_Model-checking_for_Probabilistic_Real-time_Systems","2242672_On_decidability_of_simulation_and_bisimulation_for_Lossy_Channel_Systems"]}