{"id":"333333382_What_Do_Package_Dependencies_Tell_Us_About_Semantic_Versioning","abstract":"The semantic versioning (semver) policy is commonly accepted by open source package management systems to inform whether new releases of software packages introduce possibly backward incompatible changes. Maintainers depending on such packages can use this information to avoid or reduce the risk of breaking changes in their own packages by specifying version constraints on their dependencies. Depending on the amount of control a package maintainer desires to have over her package dependencies, these constraints can range from very permissive to very restrictive. This article empirically compares semver compliance of four software packaging ecosystems (Cargo, npm, Packagist and Rubygems), and studies how this compliance evolves over time. We explore to what extent ecosystem-specific characteristics or policies influence the degree of compliance. We also propose an evaluation based on the \"wisdom of the crowds\" principle to help package maintainers decide which type of version constraints they should impose on their dependencies.","authors":["Alexandre Decan","Tom Mens"],"meta":["May 2019IEEE Transactions on Software Engineering PP(99):1-1","DOI:10.1109/TSE.2019.2918315"],"references":[]}