{"id":"301888889_Mutant_Reduction_Based_on_Dominance_Relation_for_Weak_Mutation_Testing","abstract":"Context: As a fault-based testing technique, mutation testing is effective at evaluating the quality of existing test suites. However, a large number of mutants result in the high computational cost in mutation testing. As a result, mutant reduction is of great importance to improve the efficiency of mutation testing.\n\nObjective: We aim to reduce mutants for weak mutation testing based on the dominance relation between mutant branches.\n\nMethod: In our method, a new program is formed by inserting mutant branches into the original program. By analyzing the dominance relation between mutant branches in the new program, the non-dominated one is obtained, and the mutant corresponding to the non-dominated mutant branch is the mutant after reduction.\n\nResults: The proposed method is applied to test ten benchmark programs and six classes from open-source projects. The experimental results show that our method reduces over 80% mutants on average, which greatly improves the efficiency of mutation testing.\n\nConclusion: We conclude that dominance relation between mutant branches is very important and useful in reducing mutants for mutation testing.","authors":["Dunwei Gong","Gongjie Zhang","Xiangjuan Yao","Fanlin Meng"],"meta":["May 2016Information and Software Technology 81","DOI:10.1016/j.infsof.2016.05.001"],"references":["289470008_A_new_approach_to_automated_test_data_generation_in_mutation_testing","266656267_A_study_of_equivalent_and_stubborn_mutation_operators_using_human_analysis_of_equivalence","262317868_Constraint-Based_Automatic_Test_Data_Generation","261079309_Using_Non-redundant_Mutation_Operators_and_Test_Suite_Prioritization_to_Achieve_Efficient_and_Scalable_Mutation_Analysis","254034644_Do_Redundant_Mutants_Affect_the_Effectiveness_and_Efficiency_of_Mutation_Analysis","251045186_A_New_Approach_to_Automated_Test_Data_Generation_in_Mutation_Testing_A_New_Approach_to_Automated_Test_Data_Generation_in_Mutation_Testing","239761017_Better_predicate_testing","235903508_Using_State_Infection_Conditions_to_Detect_Equivalent_Mutants_and_Speed_up_Mutation_Analysis","224332299_Constructing_Subtle_Faults_Using_Higher_Order_Mutation_Testing","224185157_Test_generation_via_Dynamic_Symbolic_Execution_for_mutation_testing","222989235_Evaluating_evolutionary_testability_for_structure-oriented_testing_with_software_measurements","221554380_Is_Mutation_an_Appropriate_Tool_for_Testing_Experiments","220773040_Evaluating_Mutation_Testing_Alternatives_A_Collateral_Experiment","220719886_An_Empirical_Evaluation_of_the_First_and_Second_Order_Mutation_Testing_Strategies","220635776_Automatically_performing_weak_mutation_with_the_aid_of_symbolic_execution_concolic_testing_and_search-based_testing","220516157_Efficiency_of_Mutation_Operators_and_Selective_Mutation_Strategies_An_Empirical_Study","220403784_Experimental_Results_from_an_Automatic_Test_Case_Generator","220166720_Using_Genetic_Algorithms_and_Dominance_Concepts_for_Generating_Reduced_Test_Data","220069671_An_Analysis_and_Survey_of_the_Development_of_Mutation_Testing","4200521_Is_mutation_an_appropriate_tool_for_testing_experiments","3556868_An_Experimental_Evaluation_of_Selective_Mutation","3189678_Using_Mutation_Analysis_for_Assessing_and_Comparing_Testing_Coverage_Criteria","316985252_A_Study_of_Equivalent_and_Stubborn_Mutation_Operators_using_Human_Analysis_of_Equivalence","293814532_Static_analysis_of_mutant_subsumption","289400619_Mutation-driven_generation_of_unit_tests_and_oracles","271455697_Establishing_Theoretical_Minimal_Sets_of_Mutants","269304192_Mutant_Subsumption_Graphs","269304186_Using_Data_Flow_Patterns_for_Equivalent_Mutant_Detection","267008664_Graph_Theory_With_Application","257391090_Mutation_based_test_case_generation_via_a_path_selection_strategy","251043390_Research_on_Software_Fault_Injection_Testing_Research_on_Software_Fault_Injection_Testing","243608560_Evolutionary_Search_for_Test_Data_in_the_Presence_of_State_Behaviour","238996897_Weak_mutation_is_probably_strong_mutation","234829988_An_extended_fault_class_hierarchy_for_specification-based_testing","234805233_Mutation_Analysis_of_Program_Test_Data","228553721_Mutation_Clustering","224177474_Automatic_detection_of_infeasible_paths_in_software_testing","222575770_Higher_Order_Mutation_Testing","220854647_How_Strong_is_Weak_Mutation","220854403_Mutation-Driven_Generation_of_Unit_Tests_and_Oracles","220691599_Introduction_to_Software_Testing","220609824_Evolutionary_mutation_testing","220609584_Automated_metamorphic_testing_on_the_analyses_of_feature_models","220516452_Decreasing_the_cost_of_mutation_testing_with_2-order_mutants","220375578_Multi_Objective_Higher_Order_Mutation_Testing_with_Genetic_Programming","220281668_An_Experimental_Evaluation_of_Data_Flow_and_Mutation_Testing","220071174_Correction_to_An_Empirical_Evaluation_of_Weak_Mutation''","220071015_Weak_Mutation_Testing_and_Completeness_of_Test_Sets","4279313_An_Empirical_Evaluation_of_the_MuJava_Mutation_Operators","3507955_Performance_effectiveness_and_reliability_issues_in_software_testing","3188371_Using_spanning_sets_for_coverage_testing","3187703_Automatic_generation_of_path_covers_based_on_the_control_flowanalysis_of_computer_programs","3187644_An_empirical_evaluation_of_weak_mutation_IEEE_Trans_Softw_Eng","3187406_Constraint-Based_Automatic_Test_Data_Generation","2762262_An_Empirical_Comparison_of_Mutation_and_Data_Flow_Based_Test_Adequacy_Criteria"]}