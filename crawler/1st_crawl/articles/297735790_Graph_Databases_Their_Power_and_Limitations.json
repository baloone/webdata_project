{"id":"297735790_Graph_Databases_Their_Power_and_Limitations","abstract":"Real world data offers a lot of possibilities to be represented as graphs. As a result we obtain undirected or directed graphs, multigraphs and hypergraphs, labelled or weighted graphs and their variants. A development of graph modelling brings also new approaches, e.g., considering constraints. Processing graphs in a database way can be done in many different ways. Some graphs can be represented as JSON or XML structures and processed by their native database tools. More generally, a graph database is specified as any storage system that provides index-free adjacency, i.e. an explicit graph structure. Graph database technology contains some technological features inherent to traditional databases, e.g. ACID properties and availability. Use cases of graph databases like Neo4j, OrientDB, InfiniteGraph, FlockDB, AllegroGraph, and others, document that graph databases are becoming a common means for any connected data. In Big Data era, important questions are connected with scalability for large graphs as well as scaling for read/write operations. For example, scaling graph data by distributing it in a network is much more difficult than scaling simpler data models and is still a work in progress. Still a challenge is pattern matching in graphs providing, in principle, an arbitrarily complex identity function. Mining complete frequent patterns from graph databases is also challenging since supporting operations are computationally costly. In this paper, we discuss recent advances and limitations in these areas as well as future directions.","authors":["Jaroslav Pokorn√Ω"],"meta":["September 2015","DOI:10.1007/978-3-319-24369-6_5","Conference: IFIP International Conference on Computer Information Systems and Industrial Management"],"references":["266655085_Experimental_Comparison_of_Graph_Databases","262159283_A_performance_evaluation_of_open_source_graph_databases","261076480_A_Comparison_of_Current_Graph_Database_Models","258317367_Performance_of_graph_query_languages_Comparison_of_cypher_gremlin_and_native_access_in_Neo4j","221941027_Finding_Connected_Components_on_Map-reduce_in_Logarithmic_Rounds","221676269_BSP_vs_MapReduce","221257383_Pregel_A_system_for_large-scale_graph_processing","40884504_Survey_of_graph_database_models","2915152_Graph_Indexing_A_Frequent_Structure-based_Approach"]}