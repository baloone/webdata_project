{"id":"234827941_Building_a_highlevel_dataflow_system_on_top_of_Map-Reduce_The_Pig_experience","abstract":"Increasingly, organizations capture, transform and analyze enormous data sets. Prominent examples include internet companies and e-science. The Map-Reduce scalable dataflow paradigm has become popular for these applications. Its simple, explicit dataflow programming model is favored by some over the traditional high-level declarative approach: SQL. On the other hand, the extreme simplicity of Map-Reduce leads to much low-level hacking to deal with the many-step, branching dataflows that arise in practice. Moreover, users must repeatedly code standard operations such as join by hand. These practices waste time, introduce bugs, harm readability, and impede optimizations.\nPig is a high-level dataflow system that aims at a sweet spot between SQL and Map-Reduce. Pig offers SQL-style high-level data manipulation constructs, which can be assembled in an explicit dataflow and interleaved with custom Map- and Reduce-style functions or executables. Pig programs are compiled into sequences of Map-Reduce jobs, and executed in the Hadoop Map-Reduce environment. Both Pig and Hadoop are open-source projects administered by the Apache Software Foundation.\nThis paper describes the challenges we faced in developing Pig, and reports performance comparisons between Pig execution and raw Map-Reduce execution.","authors":["Alan F. Gates","Olga Natkovich","Shubham Chopra","Pradeep Kamath"],"meta":["August 2009Proceedings of the VLDB Endowment 2(2):1414-1425","DOI:10.14778/1687553.1687568","SourceDBLP"],"references":["234786051_SCOPE_Easy_and_efficient_parallel_processing_of_massive_data_sets","220851822_DryadLINQ_A_System_for_General-Purpose_Distributed_Data-Parallel_Computing_Using_a_High-Level_Language","220515516_Hofmann_T_Latent_semantic_models_for_collaborative_filtering_ACM_Trans_Inf_Syst_TOIS_221_89-115","220060918_Interpreting_the_Data_Parallel_Analysis_with_Sawzall","242506554_Gaussian_latent_semantic_models_for_collaborative_filtering","238758136_Practical_skew_handling_algorithms_for_parallel_joins","235246933_Pig_Latin_A_Not-So-Foreign_Language_for_Data_Processing","221213590_Distributed_Query_Processing_in_a_Relational_Data_Base_System","221213453_Generating_example_data_for_dataflow_programs","220966946_Data_Cube_A_Relational_Aggregation_Operator_Generalizing_Group-By_Cross-Tab_and_Sub-Total","220851866_MapReduce_Simplified_Data_Processing_on_Large_Clusters","4234818_Compiled_Query_Execution_Engine_using_JVM","3296396_Volcano-An_Extensible_and_Parallel_Query_Evaluation_System","2817466_Data_Cube_A_Relational_Aggregation_Operator_Generalizing_Group-By_Cross-Tab_and_Sub-Totals","2380524_Java_Support_for_Data-Intensive_Systems_Experiences_Building_the_Telegraph_Dataflow_System","2350388_Practical_Skew_Handling_in_Parallel_Joins"]}