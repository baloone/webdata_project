{"id":"225818961_Space_Efficient_Hash_Tables_with_Worst_Case_Constant_Access_Time","abstract":"We generalize Cuckoo Hashing [16] to d-ary Cuckoo Hashing and show how this yields a simple hash table data structure that stores n elements in (1 + ∈) n memory cells, for any constant ∈ > 0. Assuming uniform hashing, accessing or deleting table entries takes at most d = O(ln 1/∈ ) probes and the expected amortized insertion time is constant. This is the first dictionary that has worst case\nconstant access time and expected constant update time, works with (1+∈) n space, and supports satellite information. Experiments indicate that d = 4 choices suffice for ∈ ≈ 0.03. We also describe a hash table data structure using explicit constant time hash functions,\nusing at most d = O(ln2 1/∈ ) probes in the worst case.\n\nA corollary is an expected linear time algorithm for finding maximum cardinality matchings in a rather natural model of sparse\nrandom bipartite graphs.","authors":["Dimitris Fotakis","Rasmus Pagh","Peter Sanders","Paul Spirakis"],"meta":["February 2003","DOI:10.1007/3-540-36494-3_25","Sourcedx.doi.org","Conference: STACS 2003, 20th Annual Symposium on Theoretical Aspects of Computer Science, Berlin, Germany, February 27 - March 1, 2003, Proceedings"],"references":["330274516_Simple_Minimal_Perfect_Hashing_in_Less_Space","314795899_Uniform_hashing_in_constant_time_and_linear_space","313644515_Multilevel_adaptive_hashing","245251165_Algorithm_for_maximum_matching_in_bipartite_graphs","242600743_An_n2_algorithm_for_maximum_matching_in_bipartite_graphs","234785388_Uniform_Hashing_Is_Optimal","228057840_Randomized_Algorithms","227318433_A_complexity_theory_of_efficient_parallel_algorithms","225133419_Simple_Minimal_Perfect_Hashing_in_Less_Space","225129414_Cuckoo_Hashing"]}