{"id":"268018965_On_Constructor_Rewrite_Systems_and_the_Lambda_Calculus","abstract":"We prove that orthogonal constructor term rewrite systems and λ-calculus with weak (i.e., no reduction is allowed under the scope of a λ-abstraction) call-by-value reduction can simulate each other with a linear overhead. In particular, weak call-by-value beta-reduction can be simulated by an orthogonal constructor term rewrite system in the same number of reduction steps. Conversely, each reduction in a term rewrite system can be simulated by a constant number of beta-reduction steps. This is relevant to implicit computational complexity, because the number of beta steps to normal form is polynomially related to the actual cost (that is, as performed on a Turing machine) of normalization, under weak call-by-value reduction. Orthogonal constructor term rewrite systems and lambda-calculus are thus both polynomially related to Turing machines, taking as notion of cost their natural parameters.","authors":["Ugo Dal Lago","Simone Martini"],"meta":["August 2012Logical Methods in Computer Science 8(3)","DOI:10.2168/LMCS-8(3:12)2012"],"references":["221351029_Lambda_Calculi_and_Linear_Speedups","220530607_The_Sequential_ASM_Thesis","270696227_Type_fixpoints","262361358_Type_fixpoints_Iteration_vs_recursion","242326094_Some_unusual_-calculus_numeral_systems","239061897_Ramified_Recurrence_and_Computational_Complexity_I_Word_Recurrence_and_Poly-time","228057915_Machine_Models_and_Simulations","226886771_A_new_recursion-theoretic_characterization_of_polytime_functions","226576955_Term_graph_rewriting","222120495_Call-by-name_call-by-value_and_the_l-calculus","221558001_On_the_Representation_of_Data_in_Lambda-Calculus","220896435_Efficient_First_Order_Functional_Program_Interpreter_with_Time_Bound_Certifications","220152286_The_weak_lambda_calculus_as_a_reasonable_machine","213879686_The_Implementation_of_Functional_Programming_Languages"]}