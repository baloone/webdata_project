{"id":"225312509_Space_Efficient_Hash_Tables_With_Worst_Case_Constant_Access_Time","abstract":"We generalize Cuckoo Hashing to d-ary Cuckoo\nHashing and show how this yields a simple hash table data structure that\nstores n elements in (1 + )n memory cells, for any constant > \n0. Assuming uniform hashing, accessing or deleting table entries takes at\nmost d=O (ln (1/)) probes and the expected amortized insertion\ntime is constant. This is the first dictionary that has worst case\nconstant access time and expected constant update time, works with\n(1 + )n space, and supports satellite information. Experiments\nindicate that d = 4 probes suffice for 0.03.\nWe also describe variants of the data structure\nthat allow the use of hash functions that can be evaluated in constant time.","authors":["Dimitris Fotakis","Rasmus Pagh","Peter Sanders","Paul Spirakis"],"meta":["February 2005Theory of Computing Systems 38(2):229-248","DOI:10.1007/s00224-004-1195-x","SourceOAI"],"references":["245251165_Algorithm_for_maximum_matching_in_bipartite_graphs","242600743_An_n2_algorithm_for_maximum_matching_in_bipartite_graphs","234785388_Uniform_Hashing_Is_Optimal","228057840_Randomized_Algorithms","227318433_A_complexity_theory_of_efficient_parallel_algorithms","225133419_Simple_Minimal_Perfect_Hashing_in_Less_Space","225129414_Cuckoo_Hashing","222680379_Reconciling_simplicity_and_realism_in_parallel_disk_models","221591810_Almost_random_graphs_with_simple_hash_functions","221590621_Uniform_hashing_in_constant_time_and_linear_space"]}