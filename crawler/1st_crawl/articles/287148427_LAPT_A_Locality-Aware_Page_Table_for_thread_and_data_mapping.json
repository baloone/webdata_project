{"id":"287148427_LAPT_A_Locality-Aware_Page_Table_for_thread_and_data_mapping","abstract":"The performance and energy efficiency of current systems is influenced by accesses to the memory hierarchy. One important aspect of memory hierarchies is the introduction of different memory access times, depending on the core that requested the transaction, and which cache or main memory bank responded to it. In this context, the locality of the memory accesses plays a key role for the performance and energy efficiency of parallel applications. Accesses to remote caches and NUMA nodes are more expensive than accesses to local ones. With information about the memory access pattern, pages can be migrated to the NUMA nodes that access them (data mapping), and threads that communicate can be migrated to the same node (thread mapping).In this paper, we present LAPT, a hardware-based mechanism to store the memory access pattern of parallel applications in the page table. The operating system uses the detected memory access pattern to perform an optimized thread and data mapping during the execution of the parallel application. Experiments with a wide range of parallel applications (from the NAS and PARSEC Benchmark Suites) on a NUMA machine showed significant performance and energy efficiency improvements of up to 19.2% and 15.7%, respectively, (6.7% and 5.3% on average).","authors":["Eduardo H.M. Cruz","Matthias Diener","Marco Antonio Zanata Alves","La√©rcio Lima Pilla"],"meta":["December 2015Parallel Computing","DOI:10.1016/j.parco.2015.12.001"],"references":["273320122_An_Efficient_Algorithm_for_Communication-Based_Task_Mapping","269410136_Optimizing_Memory_Locality_Using_a_Locality-Aware_Page_Table","266660543_kMAF_Automatic_kernel-level_management_of_thread_and_data_affinity","262159992_Traffic_Management_A_Holistic_Approach_to_Memory_Placement_on_NUMA_Systems","260525752_Process_Placement_in_Multicore_ClustersAlgorithmic_Issues_and_Practical_Techniques","242479489_Kumar_V_A_Fast_and_High_Quality_Multilevel_Scheme_for_Partitioning_Irregular_Graphs_SIAM_Journal_on_Scientific_Computing_201_359-392","224140663_Structuring_the_execution_of_OpenMP_applications_for_multicore_architectures","224122366_Analyzing_Parallel_Programs_with_PIN","224079756_Architectures_for_Extreme-Scale_Computing","221474583_A_communication_characterisation_of_SPLASH-2_and_parsec","220884781_The_PARSEC_benchmark_suite_Characterization_and_architectural_implications","220811610_Garnet_A_Detailed_on-Chip_Network_Model_inside_a_Full-System_Simulator","220623841_Enhancing_operating_system_support_for_multicore_processors_by_using_hardware_performance_monitoring","220244809_Multifacet's_general_execution-driven_multiprocessor_simulator_GEMS_toolset","2797268_A_Fast_And_High_Quality_Multilevel_Scheme_For_Partitioning_Irregular_Graphs","312791637_Autopin_-_Automated_optimization_of_thread-to-core_pinning_on_multicore_systems","268461720_Traffic_management","260358321_Thread_Assignment_of_Multithreaded_Network_Applications_in_MulticoreMultithreaded_Processors","259516048_Dynamic_thread_mapping_of_shared_memory_applications_by_exploiting_cache_coherence_protocols","221643572_Hardware_profile-guided_automatic_page_placement_for_ccNUMA_systems","221235532_Generic_topology_mapping_strategies_for_large-scale_parallel_architectures","220953502_Parallel_hypergraph_partitioning_for_scientific_computing","220379232_1_Feedback-Directed_Page_Placement_for_ccNUMA_via_Hardware-generated_Memory_Traces","220331796_On_the_Mapping_Problem","220284191_autopin_-_Automated_Optimization_of_Thread-to-Core_Pinning_on_Multicore_Systems","3560218_Static_mapping_by_dual_recursive_bipartitioning_of_process_architecture_graphs","3047738_On_the_Mapping_Problem","2955586_Simics_A_Full_System_Simulation_Platform","2317347_The_OpenMP_Implementation_of_NAS_Parallel_Benchmarks_and_Its_Performance"]}