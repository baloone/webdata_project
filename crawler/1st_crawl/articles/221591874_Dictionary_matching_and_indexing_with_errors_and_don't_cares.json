{"id":"221591874_Dictionary_matching_and_indexing_with_errors_and_don't_cares","abstract":"This paper considers various flavors of the following online problem: preprocess a text or collection of strings, so that given a query string p, all matches of p with the text can be reported quickly. In this paper we consider matches in which a bounded number of mismatches are allowed, or in which a bounded number of \"don't care\" characters are allowed. The specific problems we look at are: indexing, in which there is a single text t, and we seek locations where p matches a substring of t; dictionary queries, in which a collection of strings is given upfront, and we seek those strings which match p in their entirety; and dictionary matching, in which a collection of strings is given upfront, and we seek those substrings of a (long) p which match an original string in its entirety. These are all instances of an all-to-all matching problem, for which we provide a single solution.The performance bounds all have a similar character. For example, for the indexing problem with n=|t| and m=|p|, the query time for k substitutions is O(m + (c1 log n)k⁄k! + # matches), with a data structure of size O(n (c2 log n)k⁄k!) and a preprocessing time of O(n (c2 log n)k⁄k!), where c1,c2 > 1 are constants. The deterministic preprocessing assumes a weakly nonuniform RAM model; this assumption is not needed if randomization is used in the preprocessing.","authors":["Richard Cole","Lee-Ad Gottlieb","Moshe Lewenstein"],"meta":["January 2004","DOI:10.1145/1007352.1007374","SourceDBLP","Conference: Proceedings of the 36th Annual ACM Symposium on Theory of Computing, Chicago, IL, USA, June 13-16, 2004"],"references":["234793221_Verifying_Candidate_Matches_in_Sparse_and_Wildcard_Matching_Extended_Abstract","282204052_Approximate_dictionary_queries","277192762_An_Onloglogn_On-line_Algorithm_for_the_Insert-Exact_Min_Problem","266518295_Data_structures_and_efficient_algorithms_Vol_1_Sorting_and_searching_2_Aufl","256555275_Dynamic_dictionary_matching_with_failure_functions","255087736_On_finding_lowest_common_ancestors","248779657_Fast_algorithms_for_finding_nearest_common_ancestor","243575271_Data_structures_and_efficient_algorithms","235047912_String-Matching_and_Other_Products","234816932_Improved_string_matching_with_k_mismatches"]}