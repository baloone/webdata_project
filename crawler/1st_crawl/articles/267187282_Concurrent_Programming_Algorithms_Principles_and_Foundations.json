{"id":"267187282_Concurrent_Programming_Algorithms_Principles_and_Foundations","abstract":"The advent of new architectures and computing platforms means that synchronization and concurrent computing are among the most important topics in computing science. Concurrent programs are made up of cooperating entities - processors, processes, agents, peers, sensors - and synchronization is the set of concepts, rules and mechanisms that allow them to coordinate their local computations in order to realize a common task. This book is devoted to the most difficult part of concurrent programming, namely synchronization concepts, techniques and principles when the cooperating entities are asynchronous, communicate through a shared memory, and may experience failures. Synchronization is no longer a set of tricks but, due to research results in recent decades, it relies today on sane scientific foundations as explained in this book. In this book the author explains synchronization and the implementation of concurrent objects, presenting in a uniform and comprehensive way the major theoretical and practical results of the past 30 years. Among the key features of the book are a new look at lock-based synchronization (mutual exclusion, semaphores, monitors, path expressions); an introduction to the atomicity consistency criterion and its properties and a specific chapter on transactional memory; an introduction to mutex-freedom and associated progress conditions such as obstruction-freedom and wait-freedom; a presentation of Lamport's hierarchy of safe, regular and atomic registers and associated wait-free constructions; a description of numerous wait-free constructions of concurrent objects (queues, stacks, weak counters, snapshot objects, renaming objects, etc.); a presentation of the computability power of concurrent objects including the notions of universal construction, consensus number and the associated Herlihy's hierarchy; and a survey of failure detector-based constructions of consensus objects. The book is suitable for advanced undergraduate students and graduate students in computer science or computer engineering, graduate students in mathematics interested in the foundations of process synchronization, and practitioners and engineers who need to produce correct concurrent software. The reader should have a basic knowledge of algorithms and operating systems. Â© Springer-Verlag Berlin Heidelberg 2013. All rights are reserved.","authors":["Michel Raynal"],"meta":["January 2013","DOI:10.1007/978-3-642-32027-9"],"references":["262370528_From_a_Store-Collect_Object_and_O_to_Efficient_Asynchronous_Consensus","249954903_The_Little_Book_of_Semaphores","242100568_Implementing_the_Weakest_Failure_Detector_for_Solving_Consensus","236890953_Consistent_Global_States_of_Distributed_Systems_Fundamental_Concepts_and_Mechanisms","234819920_Shavit_N_The_Topological_Structure_of_Asynchronous_Computability_Journal_of_the_ACM_466_858-923","234797651_A_completeness_theorem_for_a_class_of_synchronization_objects","234796459_Fast_wait-free_2_k_-1-renaming","229031766_Common2_extended_to_stacks_and_unbounded_concurrency","225994861_An_optimistic_approach_to_lock-free_FIFO_queues","225789871_Fast_long-lived_renaming_improved_and_simplified","225552547_A_Lazy_Concurrent_List-Based_Set_Algorithm","225538415_Byzantine_disk_paxos_Optimal_resilience_with_byzantine_shared_memory","225158417_Group_Renaming","315634972_Contention-sensitive_data_structures_and_algorithms","291596849_Transactions_are_coming_back_but_are_they_the_same","284331730_A_short_introduction_to_failure_detectors_for_asynchronous_distributed_systems","280962668_Using_failure_detectors_to_solve_consensus_in_asynchronous_shared-memory_systems","280029462_Fast_long-lived_renaming_improved_and_simplified","267939735_Single-Version_STMs_can_be_Multi-Version_Permissive","267091059_Distributed_Computing_Principles_Algorithms_and_Systems","266063709_An_optimal_multi-writer_snapshot_algorithm","261021747_A_Simple_Asynchronous_Shared_Memory_Consensus_Algorithm_Based_on_Omega_and_Closing_Sets","257145056_Virtual_world_consistency_A_condition_for_STM_systems_with_a_versatile_protocol_with_invisible_read_operations","256181597_Predicate_transfer_and_timeout_in_message_passing_systems","254891616_A_proof_technique_for_register_atomicity_preliminary_version","254891207_A_brief_survey_of_concurrent_readers_and_writers","252064549_The_Universal_Transactional_Memory_Construction","247816199_A_Simple_Algorithmically_Reasoned_Characterization_of_Wait-free_Computations","246381074_Ho_w_to_construct_an_atomic_variable","243658626_Disentangling_Multi-object_Operations","242532775_Economical_solutions_to_the_critical_section_problem_in_a_distributed_system","239583375_Memory_requirements_for_agreement_among_unreliable_asynchronous_processes","239583264_A_Methodology_for_Implementing_H_ghly_Concurrent_Data_Objects","239538391_Is_TM_the_answer_for_improving_parallel_programming","238313014_Round-by-round_fault_detector-unifying_synchrony_and_asynchrony","237725731_Concurrent_Reading_and_Writing","234829558_An_alternative_to_event_queues_for_synchronization_in_monitors","234816293_Immediate_atomic_snapshots_and_fast_renaming","234809768_Failure_detectors_and_the_wait-free_hierarchy_extended_abstract","234798656_Constructing_1-writer_multireader_multivalued_atomic_variables_from_regular_variables","234782828_A_pleasant_stroll_through_the_land_of_infinitely_many_creatures","229909453_A_liveness_condition_for_concurrent_objects_X-wait-freedom","228057764_Introduction_To_Automata_Theory_Languages_And_Computation","227055722_Arbitration_without_common_modifiable_variables","227024788_Hierarchical_Ordering_of_Sequential_Processes","226975366_Renaming_with_k-Set-Consensus_An_Optimal_Algorithm_into_n_k_-_1_Slots","226570416_Linear-time_snapshot_using_multi-writer_multi-reader_registers","226484326_Space-optimum_conflict-free_construction_of_1-writer_1-reader_multivalued_atomic_variable","226082467_On_Interprocess_Communication_Part_II_Algorithms","225563283_Polynomial_and_Adaptive_Long-lived_2k-_1-Renaming"]}