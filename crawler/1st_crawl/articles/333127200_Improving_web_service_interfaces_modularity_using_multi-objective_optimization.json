{"id":"333127200_Improving_web_service_interfaces_modularity_using_multi-objective_optimization","abstract":"Service interface is a critical component in a service-oriented architecture (SOA). As first-class design artifact, a service interface should be properly designed to provide best practice of third-party reuse. However, a very common bad service design practice in existing SOAs is to place semantically unrelated operations implementing several abstractions in a single interface. Poorly designed service interfaces can have a negative effect on all client applications that use these services. Indeed, services with such poor interface structure tend to be difficult to comprehend, maintain and reuse in business processes, leading to unsuccessful services. Necessarily, then, service designers should “refactor”, i.e., restructure, their service interface into smaller, more cohesive interfaces, each representing a specific abstraction. To address this problem, we introduce a novel approach, namely WSIRem, to support service’s developers in improving the modularization of their service interfaces. WSIRem is based on a multi-objective search-based optimization approach to find the appropriate modularization of a service interface into smaller, more cohesive and loosely coupled interfaces, each implementing a distinct abstraction. WSIRem has been empirically evaluated on a benchmark of 22 real-world Web services provided by Amazon and Yahoo. Results show that the automatically identified interfaces improved the services interface structure. Qualitative evaluation of WSIRem with developers showed the performance of WSIRem in terms of understandability, where the new WSIRem interfaces were recognized as ‘relevant’ from developers point of view with more than 73% of precision and 77% of recall. Overall, the obtained results show that WSIRem outperforms state-of-the-art approaches relying on traditional partitioning techniques.","authors":["Sabrine Boukharata","Ali Ouni","Marouane Kessentini","Salah Bouktif"],"meta":["June 2019Automated Software Engineering 26(JUNE)","DOI:10.1007/s10515-019-00256-4"],"references":["314265561_MORE_A_multi-objective_refactoring_recommendation_approach_to_introducing_design_patterns_and_fixing_code_smells","329926221_A_Hybrid_Approach_for_Improving_the_Design_Quality_of_Web_Service_Interfaces","323424582_Statistical_power_analysis_for_the_behavioral_sciences","322060531_Interactive_Refactoring_of_Web_Service_Interfaces_Using_Computational_Search","320212058_Spotting_and_removing_WSDL_anti-pattern_root_causes_in_code-first_Web_Services_A_thorough_evaluation_of_impact_on_service_discoverability","318332200_Detecting_Android_Smells_Using_Multi-Objective_Genetic_Programming","316438605_A_Machine_Learning-Based_Approach_to_Detect_Web_Service_Design_Defects","316438582_Web_Service_Interface_Decomposition_Using_Formal_Concept_Analysis","316021372_An_Empirical_Study_of_Cohesion_and_Coupling_Balancing_Optimisation_and_Disruption","308854680_A_domain_independent_readability_metric_for_web_service_descriptions","286798730_Refactoring_Fat_Interfaces_Using_a_Genetic_Algorithm","286744731_A_Genetic_Algorithm_to_Find_the_Adequate_Granularity_for_Service_Interfaces","307573162_SIM_An_Automated_Approach_to_Improve_Web_Service_Interface_Modularization","304915785_Multi-Criteria_Code_Refactoring_Using_Search-Based_Software_Engineering_An_Industrial_Case_Study","291388420_Multi-objective_Module_Clustering_for_Kate"]}