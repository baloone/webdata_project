{"id":"308338218_Bi-level_Identification_of_Web_Service_Defects","abstract":"Successful Web services must evolve to remain relevant (e.g. requirements update, bugs fix, etc.), but this process of evolution increases complexity and can cause the Web service interface design to decay and lead to significantly reduced usability and popularity of the services. Maintaining a high level of design quality is extremely expensive due to monetary and time pressures that force programmers to neglect improving the quality of their interfaces. A more fundamental reason is that there is little support to automatically identify design defects at the Web service interface level and reduce the high calibration effort to determine manually the threshold value for each quality metric to identify design defects. In this paper, we propose to treat the generation of interface design defects detection rules as a bi-level optimization problem. To this end, the upper level problem generates a set of detection rules, as combination of quality metrics, which maximizes the coverage of a base of defects examples extracted from several Web services and artificial defects generated by the lower level. The lower level maximizes the number of generated artificial defects that cannot be detected by the rules produced by the upper level. The statistical analysis of our experiments over 30 runs on a benchmark of 415 Web services shows that 8 types of Web service defects were detected with an average of more than 93 % of precision and 98 % recall. The results confirm the outperformance of our bi-level proposal compared to state-of-art Web service design defects detection techniques and the survey performed by potential users and programmers also shows the relevance of the detected defects.","authors":["Hanzhang Wang","Marouane Kessentini","Ali Ouni"],"meta":["October 2016","DOI:10.1007/978-3-319-46295-0_22","Conference: 2016 International Conference on Service-Oriented Computing (ICSOC)"],"references":["278705987_Specification_and_Detection_of_SOA_Antipatterns_in_Web_Services","250306301_Multi-objective_Stackelberg_game_between_a_regulating_authority_and_a_mining_company_A_case_study_in_environmental_economics","238525419_Avoiding_WSDL_Bad_Practices_in_Code-First_Web_Services","236174038_Specification_and_Detection_of_SOA_Antipatterns","216852697_Automatically_Detecting_Opportunities_for_Web_Service_Descriptions_Improvement","2317940_Practical_Bilevel_Optimization_Algorithms_And_Applications","284274267_Search-Based_Web_Service_Antipatterns_Detection","261925069_A_tool_to_improve_code-first_Web_services_discoverability_through_text_mining_techniques","257636220_Genetic_programming_through_bi-objective_genetic_algorithms_with_a_study_of_a_simulated_moving_bed_process_involving_multiple_objectives","235977733_Best_Practices_for_Describing_Consuming_and_Discovering_Web_Services_A_Comprehensive_Toolset","233967787_Information_retrieval_Data_structures_and_algorithms","232637374_Popular_SOA_Antipatterns"]}