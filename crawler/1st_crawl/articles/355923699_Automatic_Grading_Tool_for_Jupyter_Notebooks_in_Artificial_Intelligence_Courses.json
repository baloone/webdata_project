{"id":"355923699_Automatic_Grading_Tool_for_Jupyter_Notebooks_in_Artificial_Intelligence_Courses","abstract":"Jupyter notebooks provide an interactive programming environment that allows writing code, text, equations, and multimedia resources. They are widely used as a teaching support tool in computer science and engineering courses. However, manual grading programming assignments in Jupyter notebooks is a challenging task, thus using an automatic grader becomes a must. This paper presents UNCode notebook auto-grader, that offers summative and formative feedback instantaneously. It provides instructors with an easy-to-use grader generator within the platform, without having to deploy a new server. Additionally, we report the experience of employing this tool in two artificial intelligence courses: Introduction to Intelligent Systems and Machine Learning. Several programming activities were carried out using the proposed tool. Analysis of students’ interactions with the tool and the students’ perceptions are presented. Results showed that the tool was widely used to evaluate their tasks, as a large number of submissions were performed. Students expressed positive opinions mostly, giving feedback about the auto-grader, highlighting the usefulness of the immediate feedback and the grading code, among other aspects that helped them to solve the activities. Results remarked on the importance of providing clear grading code and formative feedback to help the students to identify errors and correct them.","authors":["Cristian Gonzalez","Felipe Restrepo-Calle","J.J. Ramirez-Echeverry","Fabio A. González"],"meta":["October 2021Sustainability 13(21):12050","DOI:10.3390/su132112050"],"references":["350129183_Conceptual_Framework_for_Programming_Skills_Development_Based_on_Microlearning_and_Automated_Source_Code_Evaluation_in_Virtual_Learning_Environment","346004432_Using_an_interactive_software_tool_for_the_formative_and_summative_evaluation_in_a_computer_programming_course_an_experience_report","340103671_Teaching_on_Jupyter","336413265_Effect_of_an_Instructor-Centered_Tool_for_Automatic_Assessment_of_Programming_Assignments_on_Students'_Perceptions_and_Performance","335500187_Automated_Assessment_of_Computer_Programming_Practices_The_8-Years_UNED_Experience","341877738_An_Open-Source_API-Based_Framework_for_Assessing_the_Correctness_of_Code_in_CS50","339912668_Using_Peer_Code_Review_to_Support_Pedagogy_in_an_Introductory_Computer_Programming_Course","339510305_Auto-Grading_Jupyter_Notebooks","339510295_The_Effects_of_Compilation_Mechanisms_and_Error_Message_Presentation_on_Novice_Programmer_Behavior","336113323_Building_Machine_Learning_and_Deep_Learning_Models_on_Google_Cloud_Platform_A_Comprehensive_Guide_for_Beginners","331292041_Pensieve_Feedback_on_Coding_Process_for_Novices","330195083_nbgrader_A_Tool_for_Creating_and_Grading_Assignments_in_the_Jupyter_Notebook","326917999_Metacognitive_Difficulties_Faced_by_Novice_Programmers_in_Automated_Assessment_Tools","331401630_Using_the_Jupyter_Notebook_as_a_Tool_to_Support_the_Teaching_and_Learning_Processes_in_Engineering_Courses","328613542_Why_Jupyter_is_data_scientists'_computational_notebook_of_choice"]}