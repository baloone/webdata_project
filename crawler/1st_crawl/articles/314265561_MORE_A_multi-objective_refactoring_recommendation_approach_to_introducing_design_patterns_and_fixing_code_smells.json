{"id":"314265561_MORE_A_multi-objective_refactoring_recommendation_approach_to_introducing_design_patterns_and_fixing_code_smells","abstract":"Refactoring is widely recognized as a crucial technique applied when evolving object-oriented software systems. If applied well, refactoring can improve different aspects of software quality including readability, maintainability, and extendibility. However, despite its importance and benefits, recent studies report that automated refactoring tools are underused much of the time by software developers. This paper introduces an automated approach for refactoring recommendation, called MORE, driven by 3 objectives: (1) to improve design quality (as defined by software quality metrics), (2) to fix code smells, and (3) to introduce design patterns. To this end, we adopt the recent nondominated sorting genetic algorithm, NSGA-III, to find the best trade-off between these 3 objectives. We evaluated the efficacy of our approach using a benchmark of 7 medium and large open-source systems, 7 commonly occurring code smells (god class, feature envy, data class, spaghetti code, shotgun surgery, lazy class, and long parameter list), and 4 common design pattern types (visitor, factory method, singleton, and strategy). Our approach is empirically evaluated through a quantitative and qualitative study to compare it against 3 different state-of-the art approaches, 2 popular multiobjective search algorithms, and random search. The statistical analysis of the results confirms the efficacy of our approach in improving the quality of the studied systems while successfully fixing 84% of code smells and introducing an average of 6 design patterns. In addition, the qualitative evaluation shows that most of the suggested refactorings (an average of 69%) are considered by developers to be relevant and meaningful.","authors":["Ali Ouni","Marouane Kessentini","Mel Ó Cinnéide","Houari Sahraoui"],"meta":["March 2017Journal of Software: Evolution and Process 29(1)","DOI:10.1002/smr.1843"],"references":["281621130_Software_Refactoring_Metrics_are_Not_Enough","281291587_Web_Service_Antipatterns_Detection_Using_Genetic_Programming","329545396_WoSQ'11_-_Proceedings_of_the_8th_International_Workshop_on_Software_Quality_Preface","323424582_Statistical_power_analysis_for_the_behavioral_sciences","308731928_Scripting_parametric_refactorings_in_Java_to_retrofit_design_patterns","308338218_Bi-level_Identification_of_Web_Service_Defects","307573162_SIM_An_Automated_Approach_to_Improve_Web_Service_Interface_Modularization","304915785_Multi-Criteria_Code_Refactoring_Using_Search-Based_Software_Engineering_An_Industrial_Case_Study","285324907_Optimization_of_Object-Oriented_Programs_Using_Static_Class_Hierarchy_Analysis","284274267_Search-Based_Web_Service_Antipatterns_Detection","272362329_An_Empirical_Evaluation_of_Impact_of_Refactoring_on_Internal_and_External_Measures_of_Code_Quality","272194239_An_Empirical_Evaluation_of_Impact_of_Refactoring_On_Internal_and_External_Measures_of_Code_Quality","278719496_JunGL","275219054_Improving_multi-objective_code-smells_correction_using_development_history","271528890_Refactoring_Improving_the_Design_of_Existing_Code"]}