{"id":"220520502_Computing_All_Repeats_Using_Suffix_Arrays","abstract":"We describe an algorithm that identifies all the repeating substrings (tandem, overlapping, and split) in a given string x = X[1..n]. Given the suffix arrays of x and of the reversed string x, the algorithm requires Θ(n) time for its execution and represents its output in Θ(n) space, either as a reduced suffix array (called an NE array) or as a reduced suffix tree (called an NE tree). The output substrings u are nonextendible (NE); that is, any extension of some occurrence of u in x, either to the left or to the right, yields a string (λu or uλ) that is unequal to the same extension of some other occurrence of u. Thus the number of substrings output is the minimum required to identify all the repeating substrings in x. The output can be used in a straightforward way to identify only repeating substrings that satisfy some proximity or minimum length condition.","authors":["Frantisek Franek","William F Smyth","Yudong Tang"],"meta":["January 2003","SourceDBLP"],"references":["229067733_Linear_Pattern_Matching_Algorithm","221568230_On_the_implementation_of_compact_DAWG's","221314014_Finding_Maximal_Pairs_With_Bounded_Gap","221313684_Direct_Construction_of_Compact_Directed_Acyclic_Word_Graphs","220113559_An_Optimal_Algorithm_for_Computing_the_Repetitions_in_a_Word","222753839_An_On_log_n_algorithm_for_finding_all_repetitions_in_a_string","222171486_Optimal_off-line_dection_of_repetitions_in_a_string","221331470_Constructing_Suffix_Trees_On-Line_in_Linear_Time","220779327_Suffix_Arrays_a_New_Method_for_On-Line_String_Searches","48312289_Efficient_and_Elegant_Subword-Tree_Construction","3744099_A_fast_algorithm_for_making_suffix_arrays_and_for_Burrows-Wheeler_transformation","3728285_Optimal_suffix_tree_construction_with_large_alphabets","2675023_Reducing_the_Space_Requirement_of_Suffix_Trees"]}