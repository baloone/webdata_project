{"id":"318694227_Two-Phase_Assessment_Approach_to_Improve_the_Efficiency_of_Refactoring_Identification","abstract":"To automate the refactoring identification process, a large number of candidates need to be compared. Such an overhead can make the refactoring approach impractical if the software size is large and the computational load of a fitness function is substantial. In this paper, we propose a two-phase assessment approach to improving the efficiency of the process. For each iteration of the refactoring process, refactoring candidates are preliminarily assessed using a lightweight, fast delta assessment method called the Delta Table. Using multiple Delta Tables, candidates to be evaluated with a fitness function are selected. A refactoring can be selected either interactively by the developer or automatically by choosing the best refactoring, and the refactorings are applied one after another in a stepwise fashion. The Delta Table is the key concept enabling a two-phase assessment approach because of its ability to quickly calculate the varying amounts of maintainability provided by each refactoring candidate. Our approach has been evaluated for three large-scale open-source projects. The results convincingly show that the proposed approach is efficient because it saves a considerable time while still achieving the same amount of fitness improvement as the approach examining all possible candidates.","authors":["Ah-Rim Han","Sungdeok Cha"],"meta":["July 2017IEEE Transactions on Software Engineering PP(99):1-1","DOI:10.1109/TSE.2017.2731853"],"references":["311101104_Recommendation_system_for_software_refactoring_using_innovization_and_interactive_dynamic_optimization","287972729_On_the_use_of_many_quality_attributes_for_software_refactoring_a_many-objective_search-based_software_engineering_approach","265552506_High_Dimensional_Search-based_Software_Engineering_Finding_Tradeoffs_among_15_Objectives_for_Automating_Software_Refactoring_Using_NSGA-III","261216873_A_Survey_of_Decomposition_Methods_for_Multi-objective_Optimization","260709880_Conflict-aware_optimal_scheduling_of_prioritised_code_clone_refactoring","250133159_New_Goodness-of-Fit_Tests_for_Pareto_Distributions","239761791_A_Precise_Method-Method_Interaction-Based_Cohesion_Metric_for_Object-Oriented_Classes","235924392_Search-based_Refactoring_Towards_Semantics_Preservation","222413173_Search-Based_Refactoring_for_Software_Maintenance","221633070_Search_Space_Reduction_for_Constraint_Optimization_Problems","221553816_Object_Oriented_Reengineering_Patterns","221029460_Searching_for_Opportunities_of_Refactoring_Sequences_Reducing_the_Search_Space","220741669_A_novel_approach_to_optimize_clone_refactoring_activity","220703730_Conflict-Aware_Optimal_Scheduling_of_Code_Clone_Refactoring_A_Constraint_Programming_Approach","220673951_A_metric-based_approach_to_identifying_refactoring_opportunities_for_merging_code_clones_in_a_Java_software_system","220673934_Search-based_refactoring_An_empirical_study","4010973_A_metric-based_approach_to_enhance_design_quality_through_meta-pattern_transformations","308824589_An_Efficient_Method_for_Assessing_the_Impact_of_Refactoring_Candidates_on_Maintainability_Based_on_Matrix_Computation","305296096_Towards_a_Metrics_Suite_for_Object_Oriented_Design","289669270_Recommending_Refactoring_Operations_in_Large_Software_Systems","282551354_Assessing_the_Refactorability_of_Software_Clones","271528890_Refactoring_Improving_the_Design_of_Existing_Code","268883136_An_efficient_approach_to_identify_multiple_and_independent_Move_Method_refactoring_candidates","263813521_Methodbook_Recommending_Move_Method_Refactorings_via_Relational_Topic_Models","262239520_Boosting_Search_Based_Testing_by_Using_Constraint_Based_Testing","261496495_Refactoring_Clones_An_Optimization_Problem","261412280_Dynamic_adaptive_Search_Based_Software_Engineering_needs_fast_approximate_metrics_keynote","257391332_Dynamic_profiling-based_approach_to_identifying_cost-effective_refactorings","256991611_Identification_and_application_of_Extract_Class_refactorings_in_object-oriented_systems","255580363_Ecient_evolutionary_method_to_approximate_the_Pareto_optimal_set_in_multiobjective_optimization","247931827_Identifying_method_friendships_to_remove_the_feature_envy_bad_smell_NIER_track","245348706_An_Object-Oriented_Design_Quality_Assessment_Model","229030017_A_Unified_Framework_for_Cohesion_Measurement_in_Object-Oriented_Systems","224343009_Conflict-aware_schedule_of_software_refactoring","222825695_Identification_of_refactoring_opportunities_introducing_polymorphism","220996424_Metrics_for_class_cohesion_and_similarity_between_methods","220375938_Object-oriented_metrics_that_predict_maintainability","220281688_Automated_scheduling_for_clone-based_refactoring_using_a_competent_GA","220071214_Schedule_of_Bad_Smell_Detection_and_Resolution_A_New_Way_to_Save_Effort","220071038_Identification_of_Move_Method_Refactoring_Opportunities","220045421_Optimization_by_simulated_annealing","201976464_Epistasis_Variance_A_Viewpoint_on_GA-Hardness","4330227_JDeodorant_Identification_and_Removal_of_Type-Checking_Bad_Smells","4114677_Refactoring_-_Improving_coupling_and_cohesion_of_existing_code","3575263_Solving_constraint_satisfaction_problems_using_genetic_algorithms","2390488_Refactoring_To_Patterns"]}