{"id":"266660543_kMAF_Automatic_kernel-level_management_of_thread_and_data_affinity","abstract":"One of the main challenges for parallel architectures is the increasing complexity of the memory hierarchy, which consists of several levels of private and shared caches, as well as interconnections between separate memories in NUMA machines. To make full use of this hierarchy, it is necessary to improve the locality of memory accesses by reducing accesses to remote caches and memories, and using local ones instead. Two techniques can be used to increase the memory access locality: executing threads and processes that access shared data close to each other in the memory hierarchy (thread affinity), and placing the memory pages they access on the NUMA node they are executing on (data affinity). Most related work in this area focuses on either thread or data affinity, but not both, which limits the improvements. Other mechanisms require expensive operations, such as memory access traces or binary analysis, require changes to hardware or work only on specific parallel APIs.\nIn this paper, we introduce kMAF, a mechanism that automatically manages thread and data affinity on the kernel level. The memory access behavior of the running application is determined during its execution by analyzing its page faults. This information is used by kMAF to migrate threads and memory pages, such that the overall memory access locality is optimized. Extensive evaluation with 27 benchmarks from 4 benchmark suites shows substantial performance improvements, with results close to an oracle mechanism. Execution time was reduced by up to 35.7% (13.8% on average), while energy efficiency was improved by up to 34.6% (9.3% on average).","authors":["Matthias Diener","Eduardo H.M. Cruz","Philippe Olivier Alexandre. Navaux","Anselm Busse"],"meta":["August 2014Parallel Architectures and Compilation Techniques - Conference Proceedings, PACT","DOI:10.1145/2628071.2628085","Conference: Parallel Architectures and Compilation Techniques - Conference Proceedings, PACT"],"references":["303173062_Open_MPI_Goals_concept_and_design_of_a_next_generation_MPI_implementation","262159992_Traffic_Management_A_Holistic_Approach_to_Memory_Placement_on_NUMA_Systems","261357046_Communication-Based_Mapping_Using_Shared_Pages","280292422_Pin","268461720_Traffic_management","262412217_Optimizing_Process-to-Core_Mappings_for_Application_Level_Multi-dimensional_MPI_Communications","261355857_Understanding_Cache_Hierarchy_Contention_in_CMPs_to_Improve_Job_Scheduling","257252323_KNEM_a_Generic_and_Scalable_Kernel-Assisted_Intra-node_MPI_Communication_Framework","256918833_Rank_reordering_for_MPI_communication_optimization","254004687_Why_On-Chip_Cache_Coherence_is_Here_to_Stay"]}