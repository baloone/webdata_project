{"id":"261369013_Parallel_Support_Vector_Machines_in_Practice","abstract":"In this paper, we evaluate the performance of various parallel optimization\nmethods for Kernel Support Vector Machines on multicore CPUs and GPUs. In\nparticular, we provide the first comparison of algorithms with explicit and\nimplicit parallelization. Most existing parallel implementations for multi-core\nor GPU architectures are based on explicit parallelization of Sequential\nMinimal Optimization (SMO)---the programmers identified parallelizable\ncomponents and hand-parallelized them, specifically tuned for a particular\narchitecture. We compare these approaches with each other and with implicitly\nparallelized algorithms---where the algorithm is expressed such that most of\nthe work is done within few iterations with large dense linear algebra\noperations. These can be computed with highly-optimized libraries, that are\ncarefully parallelized for a large variety of parallel platforms. We highlight\nthe advantages and disadvantages of both approaches and compare them on various\nbenchmark data sets. We find an approximate implicitly parallel algorithm which\nis surprisingly efficient, permits a much simpler implementation, and leads to\nunprecedented speedups in SVM training.","authors":["Stephen Tyree","Jacob R. Gardner","Kilian Weinberger","Kunal Agrawal"],"meta":["April 2014","SourcearXiv"],"references":["251704511_Parallel_Support_Vector_Machines","319770183_Imagenet_classification_with_deep_convolutional_neural_networks","313154500_Parallelizing_support_vector_machines_on_distributed_computers","312538118_Support-vector_networks","307881957_LIBSVM_A_library_for_support_vector_machines","285861657_The_Lq_support_vector_machine","271513141_Support_Vector_Networks","267960550_ImageNet_Classification_with_Deep_Convolutional_Neural_Networks","239006410_Making_large-Scale_SVM_Learning_Practical_Advances_in_Kernel_Methods_-_Support_Vector_Learning","237045372_Parallel_Support_Vector_Machines_on_Multi-Core_and_Multiprocessor_Systems"]}