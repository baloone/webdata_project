{"id":"322352194_ConPredictor_Concurrency_Defect_Prediction_in_Real-World_Applications","abstract":"Concurrent programs are difficult to test due to their inherent non-determinism. To address this problem, testing often requires the exploration of thread schedules of a program; this can be time-consuming when applied to real-world programs. Software defect prediction has been used to help developers find faults and prioritize their testing efforts. Prior studies have used machine learning to build such predicting models based on designed features that encode the characteristics of programs. However, research has focused on sequential programs; to date, no work has considered defect prediction for concurrent programs, with program characteristics distinguished from sequential programs. In this paper, we present ConPredictor, an approach to predict defects specific to concurrent programs by combining both static and dynamic program metrics. Specifically, we propose a set of novel static code metrics based on the unique properties of concurrent programs. We also leverage additional guidance from dynamic metrics constructed based on mutation analysis. Our evaluation on four large open source projects shows that ConPredictor improved both within-project defect prediction and cross-project defect prediction compared to traditional features.","authors":["Tingting Yu","Wei Wen","Xue Han","Jane Huffman Hayes"],"meta":["January 2018IEEE Transactions on Software Engineering PP(99):1-1","DOI:10.1109/TSE.2018.2791521"],"references":["308841523_Revisiting_the_Impact_of_Classification_Techniques_on_the_Performance_of_Defect_Prediction_Models","307577762_Interval_Analysis_for_Concurrent_Trace_Programs_Using_Transaction_Sequence_Graphs","305026775_Mutation-aware_fault_prediction","279063667_MuJava_A_Mutation_System_for_Java","278029882_Online_Defect_Prediction_for_Imbalanced_Data","277664637_Are_Mutants_a_Valid_Substitute_for_Real_Faults_in_Software_Testing","265033788_ScottKnott_A_Package_for_Performing_the_Scott-Knott_Clustering_Algorithm_in_R","262003721_Researcher_Bias_The_Use_of_Machine_Learning_in_Software_Defect_Prediction","261498719_Mutation_Operators_for_Concurrent_Java_J2SE_50","261233389_CCmutator_A_mutation_generator_for_concurrency_constructs_in_multithreaded_CC_applications","261126019_Method-level_bug_prediction","261120442_Transfer_defect_learning","261120271_How_and_why_process_metrics_are_better","260648765_A_Large-Scale_Empirical_Study_of_Just-in-Time_Quality_Assurance","254040765_A_qualitative_study_on_performance_bugs","230562938_Recalling_the_Imprecision_of_Cross-Project_Defect_Prediction","227859297_Transfer_learning_for_cross-company_software_defect_prediction","225181368_Stable_Rankings_for_Different_Effort_Models","224260840_A_Systematic_Review_of_Fault_Prediction_Performance_in_Software_Engineering","224198235_A_Case_Study_of_Bias_in_Bug-Fix_Datasets","224185121_Studying_the_impact_of_dependency_network_measures_on_software_quality","223713209_Wrappers_for_Feature_Subset_Selection","221900777_The_WEKA_data_mining_software_An_update","221643600_Applications_of_synchronization_coverage","221560720_Fair_and_Balanced_Bias_in_Bug-Fix_Datasets","344728739_MUVI_automatically_inferring_multi-variable_access_correlations_and_detecting_related_semantic_and_concurrency_bugs","322715583_Data_Mining_practical_machine_learning_tools_and_techniques","321640364_On_the_Multiple_Sources_and_Privacy_Preservation_Issues_for_Heterogeneous_Defect_Prediction","316985429_Angels_and_monsters_An_empirical_investigation_of_potential_test_effectiveness_and_efficiency_improvement_from_strongly_subsuming_higher_order_mutation","310821310_Effort-aware_just-in-time_defect_prediction_simple_unsupervised_models_could_be_better_than_supervised_models","305525409_Predicting_Testability_of_Concurrent_Programs","305296096_Towards_a_Metrics_Suite_for_Object_Oriented_Design","298799391_HYDRA_Massively_Compositional_Model_for_Cross-Project_Defect_Prediction","288906520_Random_forests","283410159_Stepwise_logistic_regression_Applied_logistic_regression","264916913_Probability_Statistics_for_Engineers_Scientists","262352182_Interface_Mutation_An_Approach_for_Integration_Testing","262294961_Efficient_Concurrency-Bug_Detection_Across_Inputs","262236981_Selective_mutation_testing_for_concurrent_code","262165762_SimRacer_an_automated_framework_to_support_testing_for_process-level_races","261276656_Personalized_defect_prediction","258667441_Predicting_Defects_Using_Change_Genealogies","257390984_Software_fault_prediction_metrics_A_systematic_literature_review","247967088_The_Regression_Analysis_of_Binary_Sequences","238049144_Understanding_and_Detecting_Real-World_Performance_Bugs","236944400_Software_Metrics_A_Rigorous_Practical_Approach","232461613_Dominance_Statistics_Ordinal_Analyses_to_Answer_Ordinal_Questions","222575770_Higher_Order_Mutation_Testing","221936069_Introduction_to_Machine_Learning","221560758_ReLink_Recovering_links_between_bugs_and_changes","221560578_Micro_interaction_metrics_for_defect_prediction","221560573_LINKSTER_enabling_efficient_manual_inspection_and_annotation_of_mined_data","221560341_The_Missing_Links_Bugs_and_Bug-fix_Commits","221560256_Static_Data_Race_Detection_for_Concurrent_Programs_with_Asynchronous_Calls","221560151_Strong_higher_order_mutation-based_test_data_generation"]}