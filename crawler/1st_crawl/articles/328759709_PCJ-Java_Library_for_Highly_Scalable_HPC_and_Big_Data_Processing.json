{"id":"328759709_PCJ-Java_Library_for_Highly_Scalable_HPC_and_Big_Data_Processing","abstract":"PCJ is a Java library for scalable high performance and computing and Big Data processing. The library implements the partitioned global address space (PGAS) model. The PCJ application is run as a multi-threaded application with the threads distributed over multiple Java Virtual Machines. Each task has its own local memory to store and access variables locally. Selected variables can be shared between tasks and can be accessed, read and modified by other tasks. The library provides methods to perform basic operations like synchronization of tasks, get and put values in an asynchronous one-sided way. Additionally, PCJ offers methods for creating groups of tasks, broadcasting and monitoring variables. The library hides details of inter-and intra-node communication-making programming easy and feasible. The PCJ library allows for easy development of highly scalable (up to 200k cores) applications running on the large resources. PCJ applications can be also run on the systems designed for data analytics such as Hadoop clusters. In this case, performance is higher than for native applications. The PCJ library fully complies with Java standards, therefore, the programmer does not have to use additional libraries, which are not part of the standard Java distribution. In this paper, we present details of the PCJ library, its API and example applications. The results show good performance and scalability. It is noteworthy that the PCJ library due to its performance and ability to create simple code has great promise to be successful for the parallelization of HPC and Big Data applications.","authors":["Marek Nowicki","Łukasz Górski","Piotr Bała"],"meta":["November 2018","DOI:10.1109/HPCS.2018.00017","Conference: 2018 International Conference on High Performance Computing & Simulation (HPCS)At: Orleans (france)","Project: HPDCJ - Heterogenous parallel and distributed computing  with Java"],"references":["325533243_Performance_evaluation_of_parallel_computing_and_Big_Data_processing_with_Java_and_PCJ_library","321175176_Optimal_synaptic_signaling_connectome_for_locomotory_behavior_in_Caenorhabditis_elegans_Design_minimizing_energy_cost","301230091_PCJ_-a_Java_library_for_heterogenous_parallel_computing","262170315_One_VM_to_rule_them_all","315467866_Level-Synchronous_BFS_Algorithm_Implemented_in_Java_Using_PCJ_Library","306083754_Design_and_implementation_of_Java_bindings_in_Open_MPI","262345063_Away_from_the_sequential_paradigm_tarpit_modelling_and_programming_with_actors_concurrent_objects_and_agents","259799707_ProActive_an_Integrated_platform_for_programming_and_running_applications_on_Grids_and_P2P_systems","242386491_Titanium_language_reference_manual_v1","221552844_Benchmarking_Java_against_C_and_FORTRAN_for_scientific_applications","220105304_Benchmarking_Java_against_C_and_Fortran_for_scientific_applications","220104922_Benchmark_suite_for_high_performance_Java"]}