{"id":"45816606_Dynamic_Security_Labels_and_Noninterference_Extended_Abstract","abstract":"This paper presents a language in which information flow is securely controlled by a type system, yet the security class of data can vary dynamically. Information flow policies provide the means to express strong security requirements for data confidentiality and integrity. Recent work on security-typed programming languages has shown that information flow can be analyzed statically, ensuring that programs will respect the restrictions placed on data. However, real computing systems have security policies that vary dynamically and that cannot be determined at the time of program analysis. For example, a file has associated access permissions that cannot be known with certainty until it is opened. Although one security-typed programming language has included support for dynamic security labels, there has been no demonstration that a general mechanism for dynamic labels can securely control information flow. In this paper, we present an expressive language-based mechanism for reasoning about dynamic security labels. The mechanism is formally presented in a core language based on the typed lambda calculus; any well-typed program in this language is provably secure because it satisfies noninterference. Full Text at Springer, may require registration or fee","authors":["Lantian Zheng","Andrew C. Myers"],"meta":["January 2004IFIP Advances in Information and Communication Technology 173","DOI:10.1007/0-387-24098-5_3","SourceCiteSeer"],"references":["224001215_The_Java_Language_Specification","301914211_Department_of_Defense_Trusted_Computer_System_Evaluation_Criteria","277829210_Cryptography_and_data_security","246579351_Jif_Java_information_flow","245982787_Dynamic_principals_in_security-typed_languages","239561434_Security_controls_in_the_ADEPT50_time-sharing_system","234828768_Trust_in_the_l-Calculus","225218591_Static_Confidentiality_Enforcement_for_Distributed_Programs","221495478_Policies_for_Dynamic_Upgrading","221239246_Fine-Grained_Information_Flow_Analysis_for_a_lambda_Calculus_with_Sum_Types"]}