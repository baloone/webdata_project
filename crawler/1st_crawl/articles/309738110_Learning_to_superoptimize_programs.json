{"id":"309738110_Learning_to_superoptimize_programs","abstract":"Code super-optimization is the task of transforming any given program to a more efficient version while preserving its input-output behaviour. In some sense, it is similar to the paraphrase problem from natural language processing where the intention is to change the syntax of an utterance without changing its semantics. Code-optimization has been the subject of years of research that has resulted in the development of rule-based transformation strategies that are used by compilers. More recently, however, a class of stochastic search based methods have been shown to outperform these strategies. This approach involves repeated sampling of modifications to the program from a proposal distribution, which are accepted or rejected based on whether they preserve correctness, and the improvement they achieve. These methods, however, neither learn from past behaviour nor do they try to leverage the semantics of the program under consideration. Motivated by this observation, we present a novel learning based approach for code super-optimization. Intuitively, our method works by learning the proposal distribution using unbiased estimators of the gradient of the expected improvement. Experiments on benchmarks comprising of automatically generated as well as existing (\"Hacker's Delight\") programs show that the proposed method is able to significantly outperform state of the art approaches for code super-optimization.","authors":["Rudy Bunel","Alban Desmaison","M. Pawan Kumar","Philip Hilaire Torr"],"meta":["November 2016"],"references":["303970238_Learning_to_learn_by_gradient_descent_by_gradient_descent","319770411_Torch7_A_Matlab-like_Environment_for_Machine_Learning","314384411_Synthesis_of_loop-free_programs","308965179_The_informed_sampler_A_discriminative_approach_to_Bayesian_inference_in_generative_computer_vision_models","308842329_Picture_A_probabilistic_programming_language_for_scene_perception","303822011_Learning_to_Optimize","303521365_Adaptive_Neural_Compilation","301844598_Inference_Networks_for_Sequential_Monte_Carlo_in_Graphical_Models","279839725_Picture_A_Probabilistic_Programming_Language_for_Scene_Perception","278733843_Gradient_Estimation_Using_Stochastic_Computation_Graphs","269935079_Adam_A_Method_for_Stochastic_Optimization","268616113_HC-Search_A_Learning_Framework_for_Search-based_Structured_Prediction","267157056_Neural_Turing_Machines","264890087_Torch7_A_Matlab-like_Environment_for_Machine_Learning","262937144_Learning_to_Discover_Efficient_Mathematical_Identities","257196722_Handbooks_in_operations_research_and_management_science_vol_9_Finance","234814839_Hacker's_Delight","224877317_Equation_of_State_Calculations_by_Fast_Computing_Machines","221555359_Oracle-guided_component-based_program_synthesis","220752320_Eliminating_Branches_using_a_Superoptimizer_and_the_GNU_C_Compiler","220752103_Synthesis_of_Loop-free_Programs","220425134_Likelihood_Ratio_Gradient_Estimation_for_Stochastic_Systems","213893590_Superoptimizer_a_Look_at_the_Smallest_Program","3854162_Integrating_bottom-uptop-down_for_object_recognition_by_Data_Driven_Markov_Chain_Monte_Carlo","2933638_Eliminating_Branches_using_a_Superoptimizer_and_the_GNU_C_Compiler","2426555_Simple_Statistical_Gradient-Following_Algorithms_for_Connectionist_Reinforcement_Learning"]}