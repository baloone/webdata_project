{"id":"302386377_Playing_Logic_Programs_with_the_Alpha-Beta_Algorithm","abstract":"Alpha-Beta is a well known optimized algorithm used to compute the values of classical combinatorial games, like chess and checkers The known proofs of correctness of Alpha-Beta do rely on very specific properties of the values used in the classical context (integers or reals), and on the finiteness of the game tree. In this paper we prove that Alpha-Beta correctly computes the value of a game tree even when these values are chosen in a much wider set of partially ordered domains, which can be pretty far apart from integer and reals, like in the case of the lattice of idempotent substitutions or ex-equations used in logic programming. We do so in a more general setting that allows us to deal with infinite games, and we actually prove that for potentially infinite games Alpha-Beta correctly computes the value of the game whenever\nit terminates. This correctness proofs allows us to apply Alpha-Beta to new domains, like constraint logic programming.","authors":["Loddo Jean-Vincent","Roberto Di Cosmo"],"meta":["November 2000","DOI:10.1007/3-540-44404-1_14","Conference: International Conference on Logic for Programming Artificial Intelligence and Reasoning"],"references":["322808878_Research_Re_Search_and_Re-Search","288252996_A_game_semantics_foundation_for_logic_programming","265502371_A_Survey_on_Minimax_Trees_And_Associated_Algorithms","256618781_Constraint_Logic_Programming_A_Survey","245236740_AJM''s_games_is_a_Model_of_Classical_Linear_Logic","236389661_Heuristics_Intelligent_Search_Strategies_for_Computer_Problem_Solving","222464570_A_game_semantics_for_linear_logic","221443004_Believe_it_or_not_AJM's_Games_Model_is_a_Model_of_Classical_Linear_Logic","221278443_Computing_with_Abstract_Bohm_Trees","220404195_Denotational_Abstract_Interpretation_of_Logic_Programs","220118178_Constructive_Negation_by_Pruning","3650899_Games_semantics_for_full_propositional_linear_logic","2707206_S-Semantics_Approach_Theory_And_Applications"]}