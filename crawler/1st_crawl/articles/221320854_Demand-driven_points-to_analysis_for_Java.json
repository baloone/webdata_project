{"id":"221320854_Demand-driven_points-to_analysis_for_Java","abstract":"We present a points-to analysis technique suitable for environments with small time and memory budgets, such as just-in-time (JIT) compilers and interactive development environments (IDEs). Our technique is demand-driven, performing only the work necessary to answer each query (a request for a variable's points-to information) issued by a client. In cases where even the demand-driven approach exceeds the time budget for a query, we employ early termination, i.e., stopping the analysis prematurely and returning an over-approximated result to the client. Our technique improves on previous demand-driven points-to analysis algorithms [17, 33] by achieving much higher precision under small time budgets and early termination.We formulate Andersen's analysis [5] for Java as a CFL-reachability problem [33]. This formulation shows that Andersen's analysis for Java is a balanced-parentheses problem, an insight that enables our new techniques. We exploit the balanced parentheses structure to approximate Andersen's analysis by regularizing the CFL-reachability problem, yielding an asymptotically cheaper algorithm. We also show how to regain most of the precision lost in the regular approximation as needed through refinement. Our evaluation shows that our regularization and refinement approach achieves nearly the precision of field-sensitive Andersen's analysis in time budgets as small as 2ms per query. Our technique can yield speedups of up to 16x over computing an exhaustive Andersen's analysis for some clients, with little to no precision loss.","authors":["Manu Sridharan","Denis Gopan","Lexin Shan","Rastislav Bodik"],"meta":["October 2005ACM SIGPLAN Notices 40(10):59-76","DOI:10.1145/1103845.1094817","SourceDBLP","Conference: Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2005, October 16-20, 2005, San Diego, CA, USA"],"references":["221559463_Graph-Theoretic_Methods_in_Database_Theory","316476393_Off-line_variable_substitution_for_scaling_points-to_analysis","262399871_Ultra-fast_aliasing_analysis_using_CLA_a_million_lines_of_C_code_in_a_second","248517319_Ultra_-_fast_aliasing_analysis_using_CLA_A_million_lines_of_C_code","239574434_Soot-A_Java_Optimization_Framework","222539844_Error_checking_with_client-driven_pointer_analysis","222506415_Program_analysis_via_graph_reachability","221592676_Refactoring_Improving_the_Design_of_Existing_Code","221560708_Demand_Interprocedural_Dataflow_Analysis","221496573_Pointer_Analysis_in_the_Presence_of_Dynamic_Class_Loading"]}