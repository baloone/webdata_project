{"id":"300581098_Holistic_Indexing_in_Main-memory_Column-stores","abstract":"Great database systems performance relies heavily on index tuning, i.e., creating and utilizing the best indices depending on the workload. However, the complexity of the index tuning process has dramatically increased in recent years due to ad-hoc workloads and shortage of time and system resources to invest in tuning.\nThis paper introduces holistic indexing, a new approach to automated index tuning in dynamic environments. Holistic indexing requires zero set-up and tuning effort, relying on adaptive index creation as a side-effect of query processing. Indices are created incrementally and partially;they are continuously refined as we process more and more queries. Holistic indexing takes the state-of-the-art adaptive indexing ideas a big step further by introducing the notion of a system which never stops refining the index space, taking educated decisions about which index we should incrementally refine next based on continuous knowledge acquisition about the running workload and resource utilization. When the system detects idle CPU cycles, it utilizes those extra cycles by refining the adaptive indices which are most likely to bring a benefit for future queries. Such idle CPU cycles occur when the system cannot exploit all available cores up to 100%, i.e., either because the workload is not enough to saturate the CPUs or because the current tasks performed for query processing are not easy to parallelize to the point where all available CPU power is exploited.\nIn this paper, we present the design of holistic indexing for column-oriented database architectures and we discuss a detailed analysis against parallel versions of state-of-the-art indexing and adaptive indexing approaches. Holistic indexing is implemented in an open-source column-store DBMS. Our detailed experiments on both synthetic and standard benchmarks (TPC-H) and workloads (SkyServer) demonstrate that holistic indexing brings significant performance gains by being able to continuously refine the physical design in parallel to query processing, exploiting any idle CPU resources.","authors":["Eleni Petraki","Stratos Idreos","Stefan Manegold"],"meta":["May 2015","DOI:10.1145/2723372.2723719","Conference: the 2015 ACM SIGMOD International Conference"],"references":["275575114_Sort_vs_Hash_revisited","264396958_Indexing_for_Interactive_Exploration_of_Big_Data_Series","261706639_The_Uncracked_Pieces_in_Database_Cracking","261475264_Main_Memory_Adaptive_Indexing_for_Multi-core_Systems","254811109_MonetDB_Two_Decades_of_Research_in_Column-oriented_Database_Architectures","254006772_NoDB_Efficient_Query_Execution_on_Raw_Data_Files","224124459_Near-Optimal_Cache_Block_Placement_with_Reactive_Nonuniform_Cache_Architectures","221667886_Stochastic_Database_Cracking_Towards_Robust_Adaptive_Indexing_inMain-Memory_Column-Stores","221214563_Self-organizing_tuple_reconstruction_in_column-stores","221214251_Making_database_systems_usable","221214153_COLT_Continuous_on-line_tuning","221213320_Updating_a_cracked_database","220538838_H-Store_A_high-performance_distributed_main_memory_transaction_processing_system","220538785_Sort_vs_Hash_Revisited_Fast_Join_Implementation_on_Modern_Multi-Core_CPUs","220538761_Hadoop_Making_a_Yellow_Elephant_Run_Like_a_Cheetah_Without_It_Even_Noticing","220538462_The_Researcher's_Guide_to_the_Data_Deluge_Querying_a_Scientific_Database_in_Just_a_Few_Seconds","44795096_Shore-MT_A_Scalable_Storage_Manager_for_the_Multicore_Era","4297489_Autonomous_Management_of_Soft_Indexes","305261816_A_decomposition_storage_model","280292106_Hadoop","280113553_dbTouch_Analytics_at_your_Fingertips","276465044_Multi-core_main-memory_joins","274342770_Merging_what's_cracked_cracking_what's_merged","271923601_Towards_zero-overhead_static_and_adaptive_indexing_in_Hadoop","270411103_The_Design_and_Implementation_of_Modern_Column-Oriented_Database_Systems","269306441_DbTouch_in_action_database_kernels_for_touch-based_data_exploration","266660064_Database_cracking_fancy_scan_not_poor_man's_sort","266656633_A_comprehensive_study_of_main-memory_partitioning_and_its_application_to_large-scale_comparison-_and_radix-sort","266656509_H2O_A_hands-free_adaptive_store","264001275_Main_Memory_Adaptive_Indexing_for_Multi-core_Systems","263247079_Transactional_support_for_adaptive_indexing","262399103_Hazy_Making_it_Easier_to_Build_and_Maintain_Big-data_Analytics","262313356_Hazy_Making_It_Easier_to_Build_and_Maintain_Big-Data_Analytics","262285025_BitWeaving_Fast_scans_for_main_memory_data_processing","262166095_AutoAdmin_what-if_index_analysis_utility","262160713_HiNGE_Enabling_temporal_network_analytics_at_scale","261349838_Very_fast_estimation_for_result_and_accuracy_of_big_data_analytics_The_EARL_system","254861706_Multi-Core_Main-Memory_Joins_Sort_vs_Hash_Revisited","221966110_Concurrency_Control_for_Adaptive_Indexing","221311248_Automatic_SQL_Tuning_in_Oracle_10g","221214372_Implementing_database_operations_using_SIMD_instructions","221213879_Database_Tuning_Advisor_for_Microsoft_SQL_Server_2005","221213599_A_Decomposition_Storage_Model","221103647_Self-selecting_self-tuning_incrementally_optimized_indexes","220967320_HyPer_A_hybrid_OLTPOLAP_main_memory_database_system_based_on_virtual_memory_snapshots","220967142_Adaptive_indexing_for_relational_keys","220789398_Benchmarking_Adaptive_Indexing","220538601_Merging_What's_Cracked_Cracking_What's_Merged_Adaptive_Indexing_in_Main-Memory_Column-Stores","49459431_Here_are_my_Data_Files_Here_are_my_Queries_Where_are_my_Results","37467162_QPipe_A_Simultaneously_Pipelined_Relational_Query_Engine","4250899_An_Online_Approach_to_Physical_Design_Tuning","2952133_DB2_Design_AdvisorIntegrated_Automatic_Physical_Database_Design","2632980_An_Efficient_Cost-Driven_Index_Selection_Tool_for_Microsoft_SQL_Server","2564485_A_Case_for_Staged_Database_Systems"]}