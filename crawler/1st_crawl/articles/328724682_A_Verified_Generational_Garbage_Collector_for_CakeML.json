{"id":"328724682_A_Verified_Generational_Garbage_Collector_for_CakeML","abstract":"This paper presents the verification of a generational copying garbage collector for the CakeML runtime system. The proof is split into an algorithm proof and an implementation proof. The algorithm proof follows the structure of the informal intuition for the generational collector’s correctness, namely, a partial collection cycle in a generational collector is the same as running a full collection on part of the heap, if one views pointers to old data as non-pointers. We present a pragmatic way of dealing with ML-style mutable state, such as references and arrays, in the proofs. The development has been fully integrated into the in-logic bootstrapped CakeML compiler, which now includes command-line arguments that allow configuration of the generational collector. All proofs were carried out in the HOL4 theorem prover.","authors":["Adam Sandberg Ericsson","Magnus O. Myreen","Johannes Åman Pohjola"],"meta":["August 2019Journal of Automated Reasoning 63(2)","DOI:10.1007/s10817-018-9487-z"],"references":["328402005_Verifying_a_Concurrent_Garbage_Collector_with_a_Rely-Guarantee_Methodology","311223652_A_New_Verified_Compiler_Backend_for_CakeML","282485043_Relaxing_Safely_Verified_On-the-Fly_Garbage_Collection_for_x86-TSO","319203038_Verifying_a_Concurrent_Garbage_Collector_Using_a_Rely-Guarantee_Methodology","319202891_A_Verified_Generational_Garbage_Collector_for_CakeML","309092419_Functional_Big-Step_Semantics","307436269_A_new_verified_compiler_backend_for_CakeML","282926114_The_Reflective_Milawa_Theorem_Prover_is_Sound_Down_to_the_Machine_Code_that_Runs_it","257578003_The_HOL_light_theory_of_Euclidean_space","242367727_The_Mechanized_Verication_of_Garbage_Collector_Implementations"]}