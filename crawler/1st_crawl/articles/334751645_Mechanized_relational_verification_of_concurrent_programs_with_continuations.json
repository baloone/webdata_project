{"id":"334751645_Mechanized_relational_verification_of_concurrent_programs_with_continuations","abstract":"Concurrent higher-order imperative programming languages with continuations are very flexible and allow for the implementation of sophisticated programming patterns. For instance, it is well known that continuations can be used to implement cooperative concurrency. Continuations can also simplify web server implementations. This, in particular, helps simplify keeping track of the state of serverâ€™s clients. However, such advanced programming languages are very challenging to reason about. One of the main challenges in reasoning about programs in the presence of continuations is due to the fact that the non-local flow of control breaks the bind rule, one of the important modular reasoning principles of Hoare logic.\nIn this paper we present the first completely formalized tool for interactive mechanized relational verification of programs written in a concurrent higher-order imperative programming language with continuations (call/cc and throw). We develop novel logical relations which can be used to give mechanized proofs of relational properties. In particular, we prove correctness of an implementation of cooperative concurrency with continuations. In addition, we show that that a rudimentary web server implemented using the continuation-based pattern is contextually equivalent to one implemented without the continuation-based pattern. We introduce context-local reasoning principles for our calculus which allows us to regain modular reasoning principles for the fragment of the language without non-local control flow. These novel reasoning principles can be used in tandem with our (non-context-local) Hoare logic for reasoning about programs that do feature non-local control flow. Indeed, we use the combination of context-local and non-context-local reasoning to simplify reasoning about the examples.","authors":["Amin Timany","Lars Birkedal"],"meta":["July 2019Proceedings of the ACM on Programming Languages 3(ICFP):1-28","DOI:10.1145/3341709"],"references":["329122832_Iris_from_the_ground_up_A_modular_foundation_for_higher-order_concurrent_separation_logic","309424831_Higher-Order_Linearisability","322133414_A_logical_relation_for_monadic_encapsulation_of_state_proving_contextual_equivalences_in_the_presence_of_runST","315341494_The_Essence_of_Higher-Order_Concurrent_Separation_Logic","312013370_Interactive_proofs_in_higher-order_concurrent_separation_logic","311482791_Higher-order_ghost_state","311463980_Hoare-style_reasoning_with_algebraic_continuations","310824189_Higher-order_ghost_state","299690586_Compiling_Cooperative_Task_Management_to_Continuations","291411519_Views"]}