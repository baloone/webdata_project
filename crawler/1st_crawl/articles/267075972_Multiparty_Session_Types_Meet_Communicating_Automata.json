{"id":"267075972_Multiparty_Session_Types_Meet_Communicating_Automata","abstract":"Communicating finite state machines (CFSMs) represent processes which communicate by asynchronous exchanges of messages via FIFO channels. Their major impact has been in characterising essential properties of communications such as freedom from deadlock and communication error, and buffer boundedness. CFSMs are known to be computationally hard: most of these properties are undecidable even in restricted cases. At the same time, multiparty session types are a recent typed framework whose main feature is its ability to efficiently enforce these properties for mobile processes and programming languages. This paper ties the links between the two frameworks to achieve a two-fold goal. On one hand, we present a generalised variant of multiparty session types that have a direct semantical correspondence to CFSMs. Our calculus can treat expressive forking, merging and joining protocols that are absent from existing session frameworks, and our typing system can ensure properties such as safety, boundedness and liveness on distributed processes by a polynomial time type checking. On the other hand, multiparty session types allow us to identify a new class of CF-SMs that automatically enjoy the aforementioned properties, generalising Gouda et al’s work [13] (for two machines) to an arbitrary number of machines. 1","authors":["Pierre-Malo Deniélou","Nobuko Yoshida"],"meta":["May 2012","DOI:10.1007/978-3-642-28869-2_10","Conference: European Symposium on Programming"],"references":["281721417_Inference_of_Global_Progress_Properties_for_Dynamically_Interleaved_Multiparty_Sessions","255566853_Reliable_Contracts_for_Unreliable_Half-Duplex_Communications","225162052_On_Asynchronous_Session_Semantics","221668600_On_Global_Types_and_Multi-Party_Session","221602730_Language_Primitives_and_Type_Discipline_for_Structured_Communication-Based_Programming","221551128_Synchronizability_for_Verification_of_Asynchronously_Communicating_Systems","221241216_Secure_Distributed_Programming_with_Value-Dependent_Types","220997896_Multiparty_Asynchonous_Session_Types","220997804_Deciding_Choreography_Realizability","220993967_Efficient_Session_Type_Guided_Distributed_Interaction","220993960_Safe_Parallel_Programming_with_Session_Java","220702981_On_Global_Types_and_Multi-Party_Sessions","220700368_Global_Progress_in_Dynamically_Interleaved_Multiparty_Sessions","308956593_On_deciding_synchronizability_for_asynchronously_communicating_systems","303789186_Multiparty_asynchronous_session_types","255566854_Heaps_and_Hops","238073281_Examples_for_Multiparty_Asynchronous_Session_Types","230775307_Parameterised_Multiparty_Session_Types","221621685_Message_Sequence_Charts","220997222_Dynamic_Multirole_Session_Types","220700500_Buffered_Communication_Analysis_in_Distributed_Multiparty_Sessions","220430671_On_Communicating_Finite-State_Machines","220248800_Verification_of_programs_with_half-duplex_communication","220246357_On_the_Progress_of_Communications_between_Two_Finite_State_Machines","4260767_Secure_Implementations_for_Typed_Session_Abstractions"]}