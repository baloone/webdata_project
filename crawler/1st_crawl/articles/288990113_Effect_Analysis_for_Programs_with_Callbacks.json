{"id":"288990113_Effect_Analysis_for_Programs_with_Callbacks","abstract":"We introduce a precise interprocedural effect analysis for programs with mutable state, dynamic object allocation, and dynamic dispatch. Our analysis is precise even in the presence of dynamic dispatch where the context-insensitive estimate on the number of targets is very large. This feature makes our analysis appropriate for programs that manipulate first-class functions (callbacks). We present a framework in which programs are enriched with special effect statements, and define the semantics of both program and effect statements as relations on states. Our framework defines a program composition operator that is sound with respect to relation composition. Computing the summary of a procedure then consists of composing all its program statements to produce a single effect statement. We propose a strategy for applying the composition operator in a way that balances precision and efficiency.\nWe instantiate this framework with a domain for tracking read and write effects, where relations on program states are abstracted as graphs. We implemented the analysis as a plugin for the Scala compiler. We analyzed the Scala standard library containing 58000 methods and classified them into several categories according to their effects. Our analysis proves that over one half of all methods are pure, identifies a number of conditionally pure methods, and computes summary graphs and regular expressions describing the side effects of non-pure methods.","authors":["Etienne Kneuss","Viktor Kuncak","Philippe Suter"],"meta":["January 2014","DOI:10.1007/978-3-642-54108-7_3","Conference: Working Conference on Verified Software: Theories, Tools, and Experiments"],"references":["262156185_Lightweight_Polymorphic_Effects","255563502_Modular_Heap_Analysis_For_Higher_Order_Programs","250195648_Heap_Monotonic_Typestates_Extended_Abstract","242638125_Data_refinement_model-oriented_proof_methods_and_their_comparison","236160049_Heap_monotonic_typestate","234814521_Interprocedural_side-effect_analysis_in_linear_time","234810332_Resolving_and_Exploiting_the_k-CFA_Paradox_Illuminating_Functional_vs_Object-Oriented_Program_Analysis","221477361_Purity_Analysis_An_Abstract_Interpretation_Formulation","221477302_Interprocedural_Analysis_with_Lazy_Propagation","221321518_Ownership_encapsulation_and_the_disjointness_of_type_and_effect","221302664_Modular_Static_Program_Analysis","220878087_Reasoning_about_Function_Objects","220688782_Data_Refinement_Model-oriented_Proof_Theories_and_their_Comparison","220299401_Verification_of_Object-Oriented_Programs_with_Invariants","2891110_Compositional_Pointer_and_Escape_Analysis_for_Java_Programs","2887036_Ownership_Types_for_Object_Encapsulation","2391518_Algebraic_Reconstruction_of_Types_and_Effects","314828677_Parameterized_object_sensitivity_for_points-to_and_side-effect_analyses_for_Java","314824722_Adapting_side_effects_analysis_for_modular_program_model_checking","314396450_Ownership_encapsulation_and_the_disjointness_of_type_and_effect","234825871_Analysis_of_pointers_and_structures","234789640_Detecting_Conflicts_Between_Structure_Accesses","234786438_Control_flow_analysis_in_scheme","226014047_Purity_and_Side_Effect_Analysis_for_Java_Programs","225160465_Forward_Simulation_for_Data_Refinement_of_Classes","221602664_Data_Refinement_Refined","221560553_Adapting_side-effects_analysis_for_modular_program_model_checking","221496318_Implicit_Dynamic_Frames_Combining_Dynamic_Frames_and_Separation_Logic","221496251_State_Based_Ownership_Reentrance_and_Encapsulation","221496189_Concurrent_Abstract_Predicates","221402841_SLAyer_Memory_Safety_for_Systems-Level_Code","220997797_Generating_precise_and_concise_procedure_summaries","220752177_Interprocedural_side-effect_analysis_in_linear_time","213889765_Analysis_of_Pointers_and_Structures","35634775_Pointer_analysis_for_Java_programs_novel_techniques_and_applications","4104972_Precise_identification_of_side-effect-free_methods_in_Java","3510901_A_storeless_model_of_aliasing_and_its_abstractions_using_finite_representations_of_right-regular_equivalence_relations","2551706_Parameterized_Object_Sensitivity_for_Points-to_and_Side-Effect_Analyses_for_Java"]}