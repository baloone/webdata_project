{"id":"309371188_Optimizing_R_language_execution_via_aggressive_speculation","abstract":"The R language, from the point of view of language design and implementation, is a unique combination of various programming language concepts. It has functional characteristics like lazy evaluation of arguments, but also allows expressions to have arbitrary side effects. Many runtime data structures, for example variable scopes and functions, are accessible and can be modified while a program executes. Several different object models allow for structured programming, but the object models can interact in surprising ways with each other and with the base operations of R.\nR works well in practice, but it is complex, and it is a challenge for language developers trying to improve on the current state-of-the-art, which is the reference implementation -- GNU R. The goal of this work is to demonstrate that, given the right approach and the right set of tools, it is possible to create an implementation of the R language that provides significantly better performance while keeping compatibility with the original implementation.\nIn this paper we describe novel optimizations backed up by aggressive speculation techniques and implemented within FastR, an alternative R language implementation, utilizing Truffle -- a JVM-based language development framework developed at Oracle Labs. We also provide experimental evidence demonstrating effectiveness of these optimizations in comparison with GNU R, as well as Renjin and TERR implementations of the R language.","authors":["Lukas Stadler","Adam Welc","Christian Humer","Mick Jordan"],"meta":["November 2016ACM SIGPLAN Notices","DOI:10.1145/2989225.2989236","Conference: the 12th Symposium"],"references":["283470854_Tracing_vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_for_Self-Optimizing_Interpreters","282151815_Tracing_vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_for_Self-Optimizing_Interpreters","262170315_One_VM_to_rule_them_all","221241088_Cheap_eagerness_Speculative_evaluation_in_a_lazy_functional_language","200040260_RPython_a_Step_Towards_Reconciling_Dynamically_and_Statically_Typed_OO_Languages","2875497_Optimistic_Evaluation_An_Adaptive_Evaluation_Strategy_for_Non-Strict_Programs","311407775_Tracing_Vs_Partial_Evaluation_Comparing_Meta-Compilation_Approaches_For_Self-Optimizing_Interpreters","271453240_Optimistic_evaluation","262319963_ZipPy_on_truffle_a_fast_and_simple_implementation_of_python","262312504_A_Fast_Abstract_Syntax_Tree_Interpreter_for_R","262287178_Partial_Escape_Analysis_and_Scalar_Replacement_for_Java","262211171_Riposte_A_trace-driven_compiler_and_parallel_VM_for_vector_code_in_R","234783920_The_New_S_Language_A_Programming_Environment_for_Data_Analysis_and_Graphics","225122501_Projections_for_polymorphic_strictness_analysis","220606861_Partial_Evaluation_of_Computation_Process_Revisited","220606853_Partial_Evaluation_of_Computation_Process--An_Approach_to_a_Compiler-Compiler","216300830_R_A_Language_for_Data_Analysis_and_Graphics","213877106_Eager_Haskell_Resource-bounded_execution_yields_efficient_iteration","4065384_LLVM_A_Compilation_Framework_for_Lifelong_Program_Analysis_Transformation","2922046_LLVM_A_Compilation_Framework_for_Lifelong_Program_Analysis_Transformation","2257629_Projections_for_Strictness_Analysis"]}