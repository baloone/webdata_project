{"id":"320413333_An_Empirical_Comparison_of_Dependency_Network_Evolution_in_Seven_Software_Packaging_Ecosystems","abstract":"Nearly every popular programming language comes with one or more package managers. The software packages distributed by such package managers form large software ecosystems. These packaging ecosystems contain a large number of package releases that are updated regularly and that have many dependencies to other package releases. While packaging ecosystems are extremely useful for their respective communities of developers, they face challenges related to their scale, complexity, and rate of evolution. Typical problems are backward incompatible package updates, and the risk of (transitively) depending on packages that have become obsolete or inactive. This manuscript uses the libraries.io dataset to carry out a quantitative empirical analysis of the similarities and differences between the evolution of package dependency networks for seven packaging ecosystems of varying sizes and ages: Cargo for Rust, CPAN for Perl, CRAN for R, npm for JavaScript, NuGet for the .NET platform, Packagist for PHP, and RubyGems for Ruby. We propose novel metrics to capture the growth, changeability, resuability and fragility of these dependency networks, and use these metrics to analyse and compare their evolution. We observe that the dependency networks tend to grow over time, both in size and in number of package updates, while a minority of packages are responsible for most of the package updates. The majority of packages depend on other packages, but only a small proportion of packages accounts for most of the reverse dependencies. We observe a high proportion of fragile packages due to a high and increasing number of transitive dependencies. These findings are instrumental for assessing the quality of a package dependency network, and improving it through dependency management tools and imposed policies.","authors":["Alexandre Decan","Tom Mens","Philippe Grosjean"],"meta":["February 2019Empirical Software Engineering 24(5)","DOI:10.1007/s10664-017-9589-y","Projects: SECO-ASSISTECOS: Ecological Studies of Open Source Software Ecosystems"],"references":["318868791_Why_do_developers_use_trivial_packages_an_empirical_case_study_on_npm","318476594_Developer_Turnover_in_Global_Industrial_Open_Source_Projects_Insights_from_Applying_Survival_Analysis","312031435_On_the_Interaction_of_Relational_Database_Access_Technologies_in_Open_Source_Java_Projects","318123666_Structure_and_Evolution_of_Package_Dependency_Networks","312333741_An_Empirical_Comparison_of_Dependency_Issues_In_OSS_Packaging_Ecosystems","311664269_Socio-Technical_Evolution_of_the_Ruby_Ecosystem_in_GitHub","310821510_How_to_break_an_API_cost_negotiation_and_community_values_in_three_software_ecosystems","308902127_An_Ecosystemic_and_Socio-Technical_View_on_Software_Maintenance_and_Evolution","308833452_Measuring_Dependency_Freshness_in_Software_Systems","308761817_On_the_topology_of_package_dependency_networks_A_comparison_of_three_programming_language_ecosystems","301747124_On_the_Interaction_of_Relational_Database_Access_Technologies_in_Open_Source_Java_Projects","301746911_Anonymized_e-mail_interviews_with_R_package_maintainers_active_on_CRAN_and_GitHub","303413505_A_look_at_the_dynamics_of_the_JavaScript_package_ecosystem","301746965_When_GitHub_meets_CRAN_An_Analysis_of_Inter-Repository_Package_Dependency_Problems","300415517_When_It_Breaks_It_Breaks_How_Ecosystem_Developers_Reason_about_the_Stability_of_Dependencies"]}