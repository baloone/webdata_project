{"id":"304612151_A_Study_of_Causes_and_Consequences_of_Client-Side_JavaScript_Bugs","abstract":"Client-side JavaScript is widely used in web applications to improve user-interactivity and minimize client-server communications. Unfortunately, JavaScript is known to be error-prone. While prior studies have demonstrated the prevalence of JavaScript faults, no attempts have been made to determine their causes and consequences. The goal of our study is to understand the root causes and impact of JavaScript faults and how the results can impact JavaScript programmers, testers and tool developers. We perform an empirical study of 502 bug reports from 19 bug repositories. The bug reports are thoroughly examined to classify and extract information about each bug' cause (the error) and consequence (the failure and impact). Our results show that the majority (68 percent) of JavaScript faults are DOM-related, meaning they are caused by faulty interactions of the JavaScript code with the Document Object Model (DOM). Further, 80 percent of the highest impact JavaScript faults are DOM-related. Finally, most JavaScript faults originate from programmer mistakes committed in the JavaScript code itself, as opposed to other web application components. These results indicate that JavaScript programmers and testers need tools that can help them reason about the DOM. Additionally, developers can use the error patterns we found to design more powerful static analysis tools for JavaScript.","authors":["Frolin Santiago Ocariza","Kartik Bajaj","Karthik Pattabiraman","Ali Mesbah"],"meta":["January 2016IEEE Transactions on Software Engineering 43(2):1-1","DOI:10.1109/TSE.2016.2586066"],"references":["301428628_SAFEWAPI_web_API_misuse_detector_for_web_applications","275100413_Automatic_fault_localization_for_client-side_JavaScript","261464432_An_Empirical_Study_of_Client-Side_JavaScript_Bugs","309614365_Discovering_bug_patterns_in_JavaScript","308826623_TypeDevil_Dynamic_Type_Inconsistency_Analysis_for_JavaScript","268260125_An_Empirical_Analysis_of_XSS_Sanitization_in_Web_Application_Frameworks","266657933_Mining_questions_asked_by_web_developers","266657834_Works_for_me_characterizing_non-reproducible_bug_reports","262402695_Control-Flow_Integrity_in_Web_Applications","261487123_Efficient_JavaScript_Mutation_Testing"]}