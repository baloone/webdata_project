{"id":"266865185_The_ASSERT_Virtual_Machine_A_predictable_platform_for_real-time_systems","abstract":"The development of real-time control systems is a complex process which has to face often conflicting requirements, especially those related to the performance of the control methods and the real-time behaviour of the system. The ASSERT Virtual Machine provides a reliable execution platform for such systems, which allows developers to cope with functional and real-time aspects separately. In order to guarantee the required real-time properties, the virtual machine only accepts software components which have a predictable temporal behaviour which can be analysed at system design time. Such components can be automatically generated from a high-level description of a system which embodies the functional components (e.g. control algorithms) into a set of containers providing the appropriate concurrent and real-time behaviour. The ASSERT Virtual Machine has been implemented in Ada 2005, using a predictable tasking subset of the language known as the Ravenscar profile. A prototype has been validated on several pilot-scale spacecraft control systems, with good results.","authors":["Juan Antonio de la Puente","La Puente","Juan Zamorano","Jos√© Antonio Pulido"],"meta":["January 2008","DOI:10.3182/20080706-5-KR-1001.3469"],"references":["221432282_Integrated_Design_and_Implementation_of_Digital_Controllers","228763118_GNATORK_An_open_cross-development_environment_for_embedded_Ravenscar-ADA_software","225157178_A_Metamodel-Driven_Process_Featuring_Advanced_Model-Based_Timing_Analysis","224647006_Property-Preserving_Reuse-Geared_Approach_to_Model-Driven_Development","221033454_An_open_Ravenscar_real-time_kernel_for_GNAT","221033358_The_Ravenscar_Tasking_Profile_for_High_Integrity_Real-Time_Programs","221033234_Handling_Temporal_Faults_in_Ada_2005","221033051_Correctness_by_Construction_for_High-Integrity_Real-Time_Systems_A_Metamodel-Driven_Approach","3042674_Priority_Inheritance_Protocols_An_Approach_to_Real-Time_Synchronization","2821655_Working_Draft_36_-_Programming_Languages_-_Guide_for_the_Use_of_the_Ada_Programming_Language_in_High_Integrity_Systems"]}