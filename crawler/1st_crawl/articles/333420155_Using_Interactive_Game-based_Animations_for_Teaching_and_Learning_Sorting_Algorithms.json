{"id":"333420155_Using_Interactive_Game-based_Animations_for_Teaching_and_Learning_Sorting_Algorithms","abstract":"Understanding algorithms are one of the hardest tasks for novice computer science students. One of the reasons why algorithms are difficult to understand is because they use abstract concepts. Algorithm animations, especially animations with the conceptual view, can make a bridge between these abstract concepts and real world examples. We collected and developed interactive animations to help students understand some of the sorting algorithms. In this contribution, we focus on two of our interactive animations: the collection of card sorting animations, and the box sorting game. These kinds of interactive animations with the conceptual view can help students to understand the main features of different sorting algorithms, but they are not going into details. The collection of card sorting animations contains five animations of sorting algorithms: simple exchange sort, bubblesort, insertion sort, minsort, and maxsort. The learners' task is to sort the playing cards in ascending order. In the animation, only those steps are allowed, which are consistent with the steps of the given sorting algorithm. In this way, students recognize the main ideas of the algorithms while they learn the rules of the card sorting games. During the second semester of the academic year 2014/15 we conducted a pedagogical experiment, where first-year students were asked to fill out a pre-test, experiment with the card-sorting animations, and fill out a post-test. The results showed that students were able to recognize the main ideas of sorting algorithms, but they did not understand the algorithms in details. The second, interactive box sorting animation is a simple game, where students' task is to sort three, five, or seven boxes in ascending order. The boxes are identical, and only a two-pan balance scale is available to find the lighter/heavier box of two selected boxes. During the second semester of the academic year 2014/15, first-year students were asked to play with the animations and fill out a questionnaire. Their goal was to sort the boxes without unnecessary weighing. Some of the students were not able to minimize the number of weighing when they used bubblesort. Other students were able to minimize the number of weighing when they grouped the boxes and simultaneously used an algorithm similar to bubblesort, or when they used quicksort algorithm.","authors":["Ladislav VÃ©gh"],"meta":["April 2016","DOI:10.12753/2066-026X-16-083","Conference: eLearning and Software for Education: eLearning Vision 2020!At: Bucharest, Romania"],"references":["282644522_Using_a_game-based_learning_model_as_a_new_teaching_strategy_for_computer_engineering","220613467_Exploring_the_Role_of_Visualization_and_Engagement_in_Computer_Science_Education","238985095_Algorithm_animation_for_teaching_software_visualization","236841981_Toward_the_effective_use_of_educational_program_animations_The_roles_of_student's_engagement_and_topic_complexity","222691280_Rethinking_the_evaluation_of_algorithm_animations_as_learning_aids_An_observational_study","222667617_Designing_Educationally_Effective_Algorithm_Visualizations","222502979_Evaluating_animations_as_student_aids_in_learning_computer_algorithms","222447368_Integrating_algorithm_animation_into_a_learning_environment","222408779_A_Meta-Study_of_Algorithm_Visualization_Effectiveness","220955859_Algorithm_Visualization_in_CS_Education_Comparing_Levels_of_Student_Engagement"]}