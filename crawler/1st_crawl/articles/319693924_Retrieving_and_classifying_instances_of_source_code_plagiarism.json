{"id":"319693924_Retrieving_and_classifying_instances_of_source_code_plagiarism","abstract":"Automatic detection of source code plagiarism is an important research field for both the commercial software industry and within the research community. Existing methods of plagiarism detection primarily involve exhaustive pairwise document comparison, which does not scale well for large software collections. To achieve scalability, we approach the problem from an information retrieval (IR) perspective. We retrieve a ranked list of candidate documents in response to a pseudo-query representation constructed from each source code document in the collection. The challenge in source code document retrieval is that the standard bag-of-words (BoW) representation model for such documents is likely to result in many false positives being retrieved, because of the use of identical programming language specific constructs and keywords. To address this problem, we make use of an abstract syntax tree (AST) representation of the source code documents. While the IR approach is efficient, it is essentially unsupervised in nature. To further improve its effectiveness, we apply a supervised classifier (pre-trained with features extracted from sample plagiarized source code pairs) on the top ranked retrieved documents. We report experiments on the SOCO-2014 dataset comprising 12K Java source files with almost 1M lines of code. Our experiments confirm that the AST based approach produces significantly better retrieval effectiveness than a standard BoW representation, i.e., the AST based approach is able to identify a higher number of plagiarized source code documents at top ranks in response to a query source code document. The supervised classifier, trained on features extracted from sample plagiarized source code pairs, is shown to effectively filter and thus further improve the ranked list of retrieved candidate plagiarized documents.","authors":["Debasis Ganguly","Gareth J F Jones","Aarón Ramírez-de-la-Cruz","Gabriela Ramirez-de-la-Rosa"],"meta":["February 2018Information Retrieval Journal 21(4):1-23","DOI:10.1007/s10791-017-9313-y"],"references":["301454460_On_the_Detection_of_SOurce_COde_Re-use","286148325_Overview_of_the_6th_international_competition_on_plagiarism_detection","279556630_Do_we_Need_Hundreds_of_Classifiers_to_Solve_Real_World_Classification_Problems","268409895_Measuring_Whitespace_Pattern_Sequences_as_an_Indication_of_Plagiarism","262426534_Software_plagiarism_detection_A_graph-based_approach","318870586_A_Language_Modeling_Approach_to_Information_Retrieval","279760304_Similarity_estimation_techniques_from_rounding_algorithms","264828888_Uncovering_Source_Code_Reuse_in_Large-Scale_Academic_Environments","262275194_A_Field_Relevance_Model_for_Structured_Document_Retrieval","262220232_Software_plagiarism_detection_via_the_static_API_call_frequency_birthmark"]}