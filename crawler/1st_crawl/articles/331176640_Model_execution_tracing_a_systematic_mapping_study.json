{"id":"331176640_Model_execution_tracing_a_systematic_mapping_study","abstract":"Model-Driven Engineering is a development paradigm that uses models instead of code as primary development artifacts. In this paper, we focus on executable models, which are used to abstract the behavior of systems for the purpose of verifying and validating (V&V) a systemâ€™s properties. Model execution tracing (i.e., obtaining and analyzing traces of model executions) is an important enabler for many V&V techniques including testing, model checking, and system comprehension. This may explain the increase in the number of proposed approaches on tracing model executions in the last years. Despite the increased attention, there is currently no clear understanding of the state of the art in this research field, making it difficult to identify research gaps and opportunities. The goal of this paper is to survey and classify existing work on model execution tracing, and identify promising future research directions. To achieve this, we conducted a systematic mapping study where we examined 64 primary studies out of 645 found publications. We found that the majority of model execution tracing approaches has been developed for the purpose of testing and dynamic analysis. Furthermore, most approaches target specific modeling languages and rely on custom trace representation formats, hindering the synergy among tools and exchange of data. This study also revealed that most existing approaches were not validated empirically, raising doubts as to their effectiveness in practice. Our results suggest that future research should focus on developing a common trace exchange format for traces, designing scalable trace representations, as well as conducting empirical studies to assess the effectiveness of proposed approaches.","authors":["Fazilat Hojaji","Tanja Mayerhofer","Bahman Zamani","Abdelwahab Hamou-Lhadj"],"meta":["December 2019Software and Systems Modeling 18(4)","DOI:10.1007/s10270-019-00724-1","Project: Model Execution Tracing"],"references":["324417098_Execution_of_UML_models_a_systematic_review_of_research_and_practice","321030770_Omniscient_Debugging_for_Executable_DSLs","320299262_How_to_Efficiently_Build_a_Front-End_Tool_for_UPPAAL_A_Model-Driven_Approach","320016791_Model-based_testing_for_software_safety_a_systematic_mapping_study","317212286_Advanced_and_efficient_execution_trace_management_for_executable_domain-specific_modeling_languages","315737187_ProMoBox_A_Framework_for_Generating_Domain-Specific_Property_Languages","312416419_Towards_a_tracing_framework_for_Model-Driven_software_systems","309882723_Project_maturity_evaluation_model_for_SMEs_from_the_software_development_sub-sector","319394401_Outline_of_a_Mathematical_Theory_of_Computation","315953486_Model-Driven_Software_Engineering_in_Practice_Second_Edition","308901511_Execution_framework_of_the_GEMOC_studio_tool_demo","308008689_Analyzing_execution_traces_critical-path_analysis_and_distance_analysis","302924724_Guidelines_for_performing_Systematic_Literature_Reviews_in_Software_Engineering","309496277_Verifying_Linear_Temporal_Logic_Properties_in_UMLOCL_Class_Diagrams_Using_Filmstripping","306939810_A_survey_on_model-based_testing_approaches_A_systematic_review"]}