{"id":"228879672_The_next_700_data_description_languages","abstract":"1. THE CHALLENGES OF AD HOC DATA FORMATS XML. HTML. JPEG. MPEG. These data formats represent vast quantities of industrial, governmental, and scientific data. Because they have been standardized and are widely used, many reliable, efficient, and convenient tools for processing data in these formats are readily available. For instance, most programming languages have libraries for parsing XML and HTML as well as manipulating images in JPEG or movies in MPEG. Query en-gines are available for querying XML documents. Widely-used applications like Microsoft Word and Excel automatically translate documents between HTML and other standard for-mats. In short, life is good when working with standard data formats. In an ideal world, all data would be in such formats. In reality, however, we are not nearly so fortunate. An ad hoc data format is any nonstandard data format. Typically, such formats do not have parsing, querying, analysis, or transformation tools readily available. Every day, network administrators, financial analysts, computer scientists, biologists, chemists, as-tronomers, and physicists deal with ad hoc data in a myriad of complex formats. Figure 1 gives a partial sense of the range and pervasiveness of such data. Since off-the-shelf tools for processing these ad hoc data formats do not exist or are not readily available, talented scientists, data analysts, and programmers must waste their time on low-level chores like parsing and format translation to extract the valuable information they need from their data. Though the syntax of everyday programming languages might be considered \"ad hoc,\" we explicitly exclude programming language syntax from our domain of interest.","authors":["Kathleen Shanahan Fisher"],"meta":[],"references":["228550698_A_combinator_parser_for_Earley's_algorithm","222837975_Combinator_Parsers_From_Toys_to_Tools","221602786_Polytypic_Compact_Printing_and_Parsing","221602547_Adaptive_Pattern_Matching_on_Binary_Data","221512863_Fast_Error_Correcting_Parser_Combinators_A_Short_Tutorial","221241283_Generics_for_the_masses","221108676_DataScript-_A_Specification_and_Scripting_Language_for_Binary_Data","220997740_Parsing_Expression_Grammars_A_Recognition-Based_Syntactic_Foundation","220997056_PADSML_A_functional_data_description_language","220802781_Parser_Combinators_for_Ambiguous_Left-Recursive_Grammars","220752259_PADS_A_domain-specific_language_for_processing_Ad_hoc_data","220178457_Polish_parsers_step_by_step","213882271_Syntax_Definition_for_Language_Prototyping","2826193_PolyP_---_a_polytypic_programming_language_extension","2628309_Higher-Order_Functions_for_Parsing","2619685_Monadic_Parsing_in_Haskell","2594209_A_New_Approach_to_Generic_Functional_Programming","2534571_Parsec_Direct_Style_Monadic_Parser_Combinators_For_The_Real_World","2530527_Packrat_Parsing_Simple_Powerful_Lazy_Linear_Time","2367815_Deterministic_Error-Correcting_Combinator_Parsers","266249757_The_next_700_programming_languages","244418795_ASN1-Communication_Between_Heterogeneous_Systems","242405431_Featherweight_Java_A_minimal_core_calculus_for_Java_and_GJ","238715528_How_to_replace_failure_with_a_list_of_successes","238310625_S-Algebra_of_a_Formal_Language","234830196_PACKETTYPES_Abstract_specification_of_network_protocol_messages","234816325_Algebraic_Specification","226514063_Dual_syntax_for_XML_languages","222865821_Polytypic_Data_Conversion_Programs","221335760_XDTM_The_XML_data_type_and_mapping_for_specifying_datasets","220415553_A_Notation_and_System_for_Expressing_and_Executing_Cleanly_Typed_Workflows_on_Messy_Scientific_Data","213885965_The_next_700_data_description_languages","30760592_The_Gene_Ontology_GO_project_in_2006","4355870_Parsing_algorithms_with_backtrack","2813549_Polymorphic_Syntax_Definition","2513119_Featherweight_Java_-_A_Minimal_Core_Calculus_for_Java_and_GJ","2443043_ANTLR_A_Predicated-LLk_Parser_Generator"]}