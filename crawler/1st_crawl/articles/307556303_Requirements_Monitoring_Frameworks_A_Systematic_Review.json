{"id":"307556303_Requirements_Monitoring_Frameworks_A_Systematic_Review","abstract":"[Context] Software systems today often interoperate with each other, thus forming a system of systems (SoS). Due to the scale, complexity, and heterogeneity of SoS, determining compliance with their requirements is challenging, despite the range of existing monitoring approaches. The fragmented research landscape and the diversity of existing approaches, however, make it hard to understand and analyze existing research regarding its suitability for SoS.\n\n[Objective] The aims of this paper are thus to systematically identify, describe, and classify existing approaches for requirements-based monitoring of software systems at runtime. Specifically, we (i) analyze the characteristics and application areas of monitoring approaches proposed in different domains, we (ii) systematically identify frameworks supporting requirements monitoring, and finally (iii) analyze their support for requirements monitoring in SoS.\n\n[Method] We performed a systematic literature review (SLR) to identify existing monitoring approaches and to classify their key characteristics and application areas. Based on this analysis we selected requirements monitoring frameworks, following a definition by Robinson, and analyzed them regarding their support for requirements monitoring in SoS.\n\n[Results] We identified 330 publications, which we used to produce a comprehensive overview of the landscape of requirements monitoring approaches. We analyzed these publications regarding their support for Robinson’s requirements monitoring layers, resulting in 37 identified frameworks. We investigated how well these frameworks support requirements monitoring in SoS.\n\n[Conclusions] We conclude that most existing approaches are restricted to certain kinds of checks, particular types of events and data, and mostly also limited to one particular architectural style and technology. This lack of flexibility makes their application in an SoS context difficult. Also, systematic and automated variability management is still missing. Regarding their evaluation, many existing frameworks focus on measuring the performance overhead, while only few frameworks have been assessed in cases studies with real-world systems.","authors":["Michael Vierhauser","Rick Rabiser","Paul Grünbacher"],"meta":["August 2016Information and Software Technology 80","DOI:10.1016/j.infsof.2016.08.005"],"references":["301454115_Hierarchical_software_landscape_visualization_for_system_comprehension_A_controlled_experiment","283580563_Elastic_Application-Level_Monitoring_for_Large_Software_Landscapes_in_the_Cloud","282960535_A_systematic_mapping_of_the_research_literature_on_system-of-systems_engineering","282647403_Requirements_Modelling_Languages_for_Software_Product_Lines_a_Systematic_Literature_Review","282350448_Systems_of_Systems_Engineering","262275694_A_Comparison_of_the_Influence_of_Different_Multi-core_Processors_on_the_Runtime_Overhead_for_Application-Level_Monitoring","261072571_Live_trace_visualization_for_comprehending_large_software_landscapes_The_ExplorViz_approach","254008880_Kieker_A_framework_for_application_performance_monitoring_and_dynamic_software_analysis","226322247_A_logic-based_calculus_of_events","224401954_A_Systematic_Survey_of_Program_Comprehension_through_Dynamic_Analysis","222673849_Systematic_literature_reviews_in_software_engineering-A_systematic_literature_review","222555385_Lessons_from_applying_the_systematic_literature_review_process_within_the_software_engineering_domain_J_Syst_Softw","221631736_Cool_features_and_tough_decisions_A_comparison_of_variability_modeling_approaches","221553964_Requirements_reflection_Requirements_as_runtime_entities","221494840_Using_Visual_Text_Mining_to_Support_the_Study_Selection_Activity_in_Systematic_Literature_Reviews","221393149_Autonomic_SLA-Aware_Service_Virtualization_for_Distributed_Systems","221201660_Wide_Area_Cluster_Monitoring_with_Ganglia","221108567_A_scenario_based_notation_for_specifying_temporal_properties","220660693_A_temporal_logic-based_planning_and_execution_monitoring_framework_for_unmanned_aircraft_systems","220613636_Weak_Alternating_Automata_Are_Not_that_Weak","220595104_Runtime_Monitoring_of_Web_Service_Conversations","42800050_Monitoring_and_diagnosing_software_requirements","4279060_Applying_Systematic_Reviews_to_Diverse_Study_Types_An_Experience_Report","3282450_Monitoring_distributed_systems","2623069_The_Event_Calculus_Explained","2258189_A_Logic_for_Reasoning_about_Time_and_Reliability","304750276_Architecting_Principles_for_Systems-of-Systems","299911858_Evolution_in_dynamic_software_product_lines","282628153_ReMinds_A_Flexible_Runtime_Monitoring_Framework_for_Systems_of_Systems","278638197_Mop","269930164_Run-Time_Monitoring_and_Real-Time_Visualization_of_Software_Architectures","261313307_ITC-IRST_Trento","259137324_A_systematic_review_of_systematic_review_process_research_in_software_engineering","225106306_Laws_of_software_evolution_revisited","224124963_Self-supervising_BPEL_processes","224083533_A_Roadmap_for_Comprehensive_Requirements_Modeling","222559759_On_the_generation_of_requirements_specifications_from_software_engineering_models_A_systematic_literature_review","222409560_Systematic_literature_reviews_in_software_engineering_-_A_tertiary_study","221050506_Monere_Monitoring_of_Service_Compositions_for_Failure_Diagnosis","220609758_A_systematic_review_of_software_architecture_evolution_research","220428014_Robinson_W_A_requirements_monitoring_framework_for_enterprise_systems_Requirements_Engineering_111_17-41","4334653_Understanding_the_Current_State_of_US_Defense_Systems_of_Systems_and_the_Implications_for_Systems_Engineering","3846344_Patterns_in_property_specifications_for_finite-state_verification","3693203_Weak_alternating_automata_are_not_that_weak","3646602_Requirements_monitoring_in_dynamic_environments","3188462_A_taxonomy_and_catalog_of_runtime_software-fault_monitoring_tools","3188350_Event-Based_Traceability_for_Managing_Evolutionary_Change","3188033_Seaman_C_Qualitative_methods_in_empirical_studies_of_software_engineering_IEEE_Transactions_on_Software_Engineering_254_557-572"]}