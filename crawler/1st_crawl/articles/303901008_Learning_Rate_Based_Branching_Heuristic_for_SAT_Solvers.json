{"id":"303901008_Learning_Rate_Based_Branching_Heuristic_for_SAT_Solvers","abstract":"In this paper, we propose a framework for viewing solver branching heuristics as optimization algorithms where the objective is to maximize the learning rate, defined as the propensity for variables to generate learnt clauses. By viewing online variable selection in SAT solvers as an optimization problem, we can leverage a wide variety of optimization algorithms, especially from machine learning, to design effective branching heuristics. In particular, we model the variable selection optimization problem as an online multi-armed bandit, a special-case of reinforcement learning, to learn branching variables such that the learning rate of the solver is maximized. We develop a branching heuristic that we call learning rate branching or LRB, based on a well-known multi-armed bandit algorithm called exponential recency weighted average and implement it as part of MiniSat and CryptoMiniSat. We upgrade the LRB technique with two additional novel ideas to improve the learning rate by accounting for reason side rate and exploiting locality. The resulting LRB branching heuristic is shown to be faster than the VSIDS and conflict history-based (CHB) branching heuristics on 1975 application and hard combinatorial instances from 2009 to 2014 SAT Competitions. We also show that CryptoMiniSat with LRB solves more instances than the one with VSIDS. These experiments show that LRB improves on state-of-the-art.","authors":["Jia Hui Liang","Vijay Ganesh","Pascal Poupart","Krzysztof Czarnecki"],"meta":["July 2016","DOI:10.1007/978-3-319-40970-2_9","Conference: International Conference on Theory and Applications of Satisfiability Testing"],"references":["279633448_Understanding_VSIDS_Branching_Heuristics_in_Conflict-Driven_Clause-Learning_SAT_Solvers","266859239_Impact_of_Community_Structure_on_SAT_Solver_Performance","262209710_The_Community_Structure_of_SAT_Formulas","225178220_Bounded_Model_Checking_Using_Satisfiability_Solving","221609315_EXE_Automatically_Generating_Inputs_of_Death","220944633_A_Lightweight_Component_Caching_Scheme_for_Satisfiability_Solvers","220944527_Using_Rewarding_Mechanisms_for_Improving_Branching_Heuristics","220944416_Adaptive_Restart_Strategies_for_Conflict_Driven_SAT_Solvers","220593611_EXE_Automatically_Generating_Inputs_of_Death","4901434_'Predicting_How_People_Play_Games_with_Unique_Mixed_Strategy_Equilibria","2535775_Bounded_Model_Checking_Using_Satisfiability_Solving","300349003_Evaluating_CDCL_Variable_Scoring_Schemes","285033852_Glucose_23_in_the_sat_2013_competition","284411763_An_extensible_SAT-solver","280046824_Bandit-Based_Search_for_Constraint_Programming","272161307_Reinforcement_Learning_An_Introduction","266984900_StarExec_A_Cross-Community_Infrastructure_for_Logic_Solving","262321197_Refining_restarts_strategies_for_SAT_and_UNSAT_formulae","244424918_EFFICIENT_ALGORITHMS_FOR_CLAUSE-LEARNING_SAT_SOLVERS","242930167_The_Solution_of_a_Certain_Two-Person_Zero-Sum_Game","229031781_Haifasat_A_new_robust_SAT_solver","222706268_BerkMin_A_fast_and_robust_Sat-solver","221471869_HaifaSat_A_New_Robust_SAT_Solver","220944464_Lecture_Notes_in_Computer_Science","220812877_Predicting_Learnt_Clauses_Quality_in_Modern_SAT_Solvers","220642599_Solving_Propositional_Satisfiability_Problems","39995906_Lecture_Notes_in_Computer_Science","7530132_Comparison_of_basic_assumptions_embedded_in_learning_models_for_experience-based_decision_making","5596000_Reinforcement_Learning_An_Introduction","3927197_Efficient_Conflict_Driven_Learning_in_a_Boolean_Satisfiability_Solver","3904486_Chaff_Engineering_an_efficient_SAT_solver","3674796_GRASP-A_new_search_algorithm_for_satisfiability","2409503_Chaff_Engineering_an_Efficient_SAT_Solver","2361686_Learning_to_Select_Branching_Rules_in_the_DPLL_Procedure_for_Satisfiability"]}