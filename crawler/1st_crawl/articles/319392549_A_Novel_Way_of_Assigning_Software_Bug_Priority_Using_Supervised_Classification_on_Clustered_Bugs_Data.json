{"id":"319392549_A_Novel_Way_of_Assigning_Software_Bug_Priority_Using_Supervised_Classification_on_Clustered_Bugs_Data","abstract":"Bug Triaging is an important part of testing process in software development organizations. But it takes up considerable amount of time of the Bug Triager, costing time and resources of the organization. Hence it is worth while to develop an automated system to address this issue. Researchers have addressed various aspects of this by using techniques of data mining, like classification etc. Also there is a study which claims that when classification is done on the data which is previously clustered; it significantly improves its performance. In this work, this approach has been used for the first time in the field of software testing for predicting the priority of the software bugs to find if classifier performance improves when it is preceded with clustering. Using this system, clustering was performed on problem title attribute of the bugs to group similar bugs together using clustering algorithms. Classification was then applied to the clusters obtained, to assign priority to the bugs based on their attributes severity or component using classification algorithms. It was then studied that which combination of clustering and classification algorithms used provided the best results.","authors":["Neetu Goyal","Naveen Aggarwal","Maitreyee Dutta"],"meta":["January 2015Advances in Intelligent Systems and Computing 320):493-501","DOI:10.1007/978-3-319-11218-3_44"],"references":["267247705_CLUBAS_An_Algorithm_and_Java_Based_Tool_for_Software_Bug_Classification_Using_Bug_Attributes_Similarities","261021758_An_Automated_Approach_for_Software_Bug_Classification","257680560_Bug_Prioritization_to_Facilitate_Bug_Report_Triage","254041628_ReBucket_A_method_for_clustering_duplicate_crash_reports_based_on_call_stack_similarity","234786663_Fast_Training_of_Support_Vector_Machines_Using_Sequential_Minimal_Optimization","224137700_Identifying_security_bug_reports_via_text_mining_An_industrial_case_study","224137662_Predicting_the_severity_of_a_reported_bug","221554685_Who_should_fix_this_bug","221554559_An_approach_to_detecting_duplicate_bug_reports_using_natural_language_and_execution_information","221391130_Clustering_of_Defect_Reports_Using_Graph_Partitioning_Algorithms","221158842_Automatic_Software_Bug_Triage_System_BTS_Based_on_Latent_Semantic_Indexing_and_Support_Vector_Machine","221112691_Cascade_Evaluation_of_Clustering_Algorithms","220267089_Predicting_Defect_Priority_Based_on_Neural_Networks","4251355_Detection_of_Duplicate_Defect_Reports_Using_Natural_Language_Processing","4047548_Class_decomposition_via_clustering_a_new_framework_for_low-variance_classifiers","4016737_Automated_support_for_classifying_software_failure_reports","2532744_X-means_Extending_K-means_with_Efficient_Estimation_of_the_Number_of_Clusters","316921690_ReBucket_a_method_for_clustering_duplicate_crash_reports_based_on_call_stack_similarity","278646210_Reducing_the_effort_of_bug_report_triage","277286027_Automatic_bug_triage_using_text_categorization","261524244_Predicting_the_priority_of_a_reported_bug_using_machine_learning_techniques_and_cross_project_validation","261488956_A_Clustered_Approach_to_Analyze_the_Software_Quality_Using_Software_Defects","261428187_Classifying_the_bugs_using_multi-class_semi_supervised_support_vector_machine","261391251_Automated_Duplicate_Bug_Report_Classification_Using_Subsequence_Matching","261260509_Determining_Bug_severity_using_machine_learning_techniques","240645479_Defect_classification_as_problem_classification_for_quality_control_in_the_software_project_management_by_DTL","221569897_Comparing_Mining_Algorithms_for_Predicting_the_Severity_of_a_Reported_Bug","221389601_Automatic_bug_triage_using_text_categorization","4371250_Automated_Duplicate_Detection_for_Bug_Tracking_Systems"]}