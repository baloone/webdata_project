{"id":"277326095_Large-scale_Distributed_Sorting_for_GPU-based_Heterogeneous_Supercomputers","abstract":"Splitter-based parallel sorting algorithms are known to be highly efficient for distributed sorting due to their low communication complexity. Although using GPU accelerators could help to reduce the computation cost in general, their effectiveness in distributed sorting algorithms on large-scale heterogeneous GPU-based systems remains unclear. We investigate applicability of using GPU devices to the splitter-based algorithms and extend HykSort, an existing splitter-based algorithm by offloading costly computation phases to GPUs. We also handle GPU memory overflows by introducing an iterative approach which sorts multiple chunks and merges them into one array. We evaluate the performance of our implementation with local sort acceleration on the TSUBAME2.5 supercomputer that comprises over 4000 NVIDIA K20x GPUs. Performance evaluation of weak scaling shows that we achieve 389 times speedup with 0.25TB/s throughput when sorting 4TB 64bit integer on 1024 nodes compared to running on 1 node; on the other hand, for CPU vs. GPU comparison, our implementation achieves only 1.40 times speedup using 1024 nodes. Detailed analysis however reveals that the limitation is almost entirely due to the bottleneck in CPU-GPU host-to-device bandwidth. With orders of magnitude improvements planned for next generation GPUs, the performance boost will be tremendous in accordance with other successful GPU accelerations.","authors":["Hideyuki Shamoto","Koichi Shirahata","Aleksandr Drozd","Hitoshi Sato"],"meta":["October 2014","DOI:10.1109/BigData.2014.7004268","Conference: 2014 IEEE Conference of Big Data"],"references":["262290699_Comparison_based_sorting_for_systems_with_multiple_GPUs","261322325_Merge_Path_-_Parallel_Merging_Made_Simple","254462662_GPU_merge_path_a_GPU_merging_algorithm","254006479_CloudRAMSort_Fast_and_efficient_large-scale_distributed_RAM_sort_on_shared-nothing_cluster","249950348_A_Novel_Parallel_Sorting_Algorithm_for_Contemporary_Architectures","224264428_Quartile_and_Outlier_Detection_on_Heterogeneous_Clusters_Using_Distributed_Radix_Sort","221511280_Parallelizing_Merge_Sort_onto_Distributed_Memory_Parallel_Computers","221395578_Sorting_networks_and_their_applications","221236169_Load_Balanced_Parallel_Radix_Sort","221214289_GPUTeraSort_High_Performance_Graphics_Coprocessor_Sorting_for_Large_Database_Management","220782216_A_Massively_Parallel_Adaptive_Fast_Multipole_Method_on_Heterogeneous_Architectures","271416717_GPUTeraSort","262280529_HykSort_A_new_variant_of_hypercube_quicksort_on_distributed_memory_architectures","258729157_Thrust_Productivity-Oriented_Library_for_CUDA","258224366_Efficient_Parallel_Merge_Sort_for_Fixed_and_Variable_Length_Keys","242538316_Hyperquicksort_a_fast_sorting_algorithm_for_hypercubes","225806341_A_Practical_Quicksort_Algorithm_for_Graphics_Processors","224140665_GPU_sample_sort","224140629_Highly_Scalable_Parallel_Sorting","222468695_Parallel_sorting_by_regular_sampling","220950749_Parallel_external_sorting_for_CUDA-enabled_GPUs_with_load_balancing_and_low_transfer_overhead","220440139_High_Performance_and_Scalable_Radix_Sorting_a_Case_Study_of_Implementing_Dynamic_Parallelism_for_GPU_Computing","2811133_A_Comparison_of_Sorting_Algorithms_for_the_Connection_Machine_CM-2"]}