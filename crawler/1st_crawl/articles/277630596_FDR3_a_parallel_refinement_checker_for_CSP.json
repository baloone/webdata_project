{"id":"277630596_FDR3_a_parallel_refinement_checker_for_CSP","abstract":"Failures divergence refinement 3 (FDR3) is a complete rewrite of the CSP refinement checker FDR2 that incorporates a significant number of enhancements. In this paper, we describe the operation of FDR3 at a high level and give a detailed description of several of the more important innovations. FDR3 has a new parallel refinement-checking algorithm that is able to achieve a near linear speedup as the number of cores increases. This algorithm scales linearly not only on shared-memory systems, but also on distributed systems (i.e. clusters). In particular, this paper presents experimental results that show FDR3 can achieve a speedup factor in excess of 1000 versus the sequential case on a cluster of 64, 16-core machines (i.e. 1024 cores): we obtain similar performance improvements on a supercomputer and, more interestingly, on a commodity cloud computing provider. We also present experimental results that compare FDR3 to related tools, and indicate that (as far as we know) FDR3 is unique in being able to scale beyond the bounds of main memory. This paper also describes the new algorithm that FDR3 uses to construct its internal representation of CSP processes, one of the key problems to solve in order to efficiently model-check process algebras.","authors":["Thomas Gibson-Robinson","Philip Armstrong","Alexandre Boulgakov","A. W. Roscoe"],"meta":["April 2015International Journal on Software Tools for Technology Transfer 18(2)","DOI:10.1007/s10009-015-0377-y"],"references":["267767495_Model_checking_Timed_CSP","262345386_Parallelizing_the_Spin_Model_Checker","250772972_SVA_a_tool_for_analysing_shared-variable_programs","221413038_Multi-Core_LTSmin_Marrying_Modularity_and_Scalability","221403222_PAT_Towards_Flexible_Verification_under_Fairness","221257307_A_work-efficient_parallel_breadth-first_search_algorithm_or_how_to_cope_with_the_nondeterminism_of_reducers","220897757_A_Timed_Model_for_Communicating_Sequential_Processes","220883777_Cluster-based_IO-efficient_LTL_model_checking","200032080_The_Theory_and_Practice_of_Concurrency","45912292_Boosting_Multi-Core_Reachability_Performance_with_Shared_Hash_Tables","30816104_Efficient_Large-Scale_Model_Checking","312828959_Practical_Partial_Order_Reduction_for_CSP","304585236_Casper_A_compiler_for_the_analysis_of_security_protocols","301950353_Computing_Maximal_Bisimulations","298907659_Computing_maximal_weak_and_other_bisimulations","291128115_Concurrent_Depth-First_Search_Algorithms","289880862_DiVinE_30_-_An_Explicit-State_Model_Checker_for_Multithreaded_C_C_Programs","286299203_FDR3_-_A_Modern_Refinement_Checker_for_CSP","277900408_Concurrent_depth-first_search_algorithms_based_on_Tarjan's_Algorithm","266044503_Discrete_Analysis_of_Continuous_Behaviour_in_Real-Time_Concurrent_Systems_Discrete_Analysis_of_Continuous_Behaviour_in_Real-Time_Concurrent_Systems","262289896_Slow_Abstraction_via_Priority","258561035_Understanding_Concurrent_Systems","251150043_Building_a_Simple_Sequential_Process","245805381_Communicating_Sequential_Processes","242504479_Communicating_Sequential_Processes","242353779_Graph_reduciion_with_super-combinaiors","234820819_Model-checking_CSP","222268627_Model-checking_CSP-Z_Strategy_tool_support_and_industrial_application","221603804_Large-Scale_Parallel_Breadth-First_Search","221351246_Practical_Application_of_CSP_and_FDR_to_Software_Design","221350015_Operational_Semantics_for_Fun_and_Profit","221108899_model-checking_CSP-OZ_Specifications_with_FDR","220997745_A_Really_Abstract_Concurrent_Model_and_its_Temporal_Logic","220695682_The_Spin_Model_Checker_Primer_and_Reference_Manual","220152804_A_Timed_Model_for_Communicating_Sequential_Processes","39994313_ProB_An_Automated_Analysis_Toolset_for_the_B_Method","2381287_Casper_A_Compiler_for_the_Analysis_of_Security_Protocols"]}