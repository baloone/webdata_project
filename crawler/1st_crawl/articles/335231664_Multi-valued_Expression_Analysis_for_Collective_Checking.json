{"id":"335231664_Multi-valued_Expression_Analysis_for_Collective_Checking","abstract":"Determining if a parallel program behaves as expected on any execution is challenging due to non-deterministic executions. Static analyses help to detect all execution paths that can be executed concurrently by identifying multi-valued expressions, i.e. expressions evaluated differently among processes. This can be used to find collective errors in parallel programs. In this paper, we propose a new method that combines a control-flow analysis with a multi-valued expressions detection to find such errors. We implemented our method in the PARCOACH framework and successfully analyzed parallel applications using MPI, OpenMP, UPC and CUDA.","authors":["Pierre Huchant","Emmanuelle Saillard","Denis Barthou","Patrick Carribault"],"meta":["August 2019","DOI:10.1007/978-3-030-29400-7_3","In book: Euro-Par 2019: Parallel Processing (pp.29-43)"],"references":["331041186_PARCOACH_Extension_for_a_Full-Interprocedural_Collectives_Verification","317487665_Replicated_Synchronization_for_Imperative_BSP_Programs","310426370_Pinpointing_Scale-Dependent_Integer_Overflow_Bugs_in_Large-Scale_Parallel_Applications","284177628_CIVL_The_Concurrency_Intermediate_Verification_Language","275383763_Detecting_Memory_Leaks_Statically_with_Full-Sparse_Value-Flow_Analysis","262291682_PARCOACH_Combining_static_and_dynamic_validation_of_MPI_collective_communications","262176108_Accelerating_Dynamic_Detection_of_Uses_of_Undefined_Values_with_Static_Value-Flow_Analysis","261165162_Symbolic_Analysis_of_Concurrency_Errors_in_OpenMP_Programs","257428491_UPC-CHECK_A_scalable_tool_for_detecting_run-time_errors_in_Unified_Parallel_C","221609460_Panorama_Capturing_system-wide_information_flow_for_malware_detection_and_analysis","221351658_Pointless_tainting_Evaluating_the_practicality_of_pointer_tainting","220799257_Flow-sensitive_pointer_analysis_for_millions_of_lines_of_code","220751872_TAJ_Effective_Taint_Analysis_of_Web_Applications","220703673_User-Input_Dependence_Analysis_via_Graph_Reachability","47812863_MPI-PHYLIP_Parallelizing_Computationally_Intensive_Phylogenetic_Analysis_Routines_for_the_Analysis_of_Large_Protein_Families","30816048_Parfait_-_Designing_a_Scalable_Bug_Checker","2879562_Language-Based_Information-Flow_Security","2425315_Dataflow_Analysis_of_Array_and_Scalar_References","320759800_Verifying_MPI_Applications_with_SimGridMC","315365835_Pinpointing_Scale-Dependent_Integer_Overflow_Bugs_in_Large-Scale_Parallel_Applications","311492133_SVF_interprocedural_static_value-flow_analysis_in_LLVM","278412136_GPUVerify","277673495_FlowDroid","266657650_FlowDroid_Precise_Context_Flow_Field_Object-sensitive_and_Lifecycle-aware_Taint_Analysis_for_Android_Apps","262213581_GPUVerify_a_verifier_for_GPU_kernels","258859418_Runtime_MPI_Collective_Checking_with_Tree-Based_Overlay_Networks","255219213_Improving_performance_via_mini-applications","228572214_Analyzing_Millions_of_Lines_of_Code_with_Sparse_Flow-Sensitive_Pointer_Analysis","221643665_Barrier_matching_for_programs_with_textually_unaligned_barriers","221643577_Automatic_formal_verification_of_MPI-based_parallel_programs","220997514_Barrier_Inference","220854378_Strict_Control_Dependence_and_Its_Effect_on_Dynamic_Information_Flow_Analyses","213888035_Certification_of_programs_for_secure_information_flow","2577853_The_SLam_Calculus_Programming_with_Secrecy_and_Integrity","2361207_Detecting_Format_String_Vulnerabilities_with_Type_Qualifiers"]}