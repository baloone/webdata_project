{"id":"273480303_An_analysis_of_metamodeling_practices_for_MOF_and_OCL","abstract":"The definition of a metamodel that precisely captures domain knowledge for effective know-how capitalization is a challenging task. A major obstacle for domain experts who want to build a metamodel is that they must master two radically different languages: an object-oriented, MOF-compliant, modeling language to capture the domain structure and first order logic (the Object Constraint Language) for the definition of well-formedness rules. However, there are no guidelines to assist the conjunct usage of both paradigms, and few tools support it. Consequently, we observe that most metamodels have only an object-oriented domain structure, leading to inaccurate metamodels. In this paper, we perform the first empirical study, which analyzes the current state of practice in metamodels that actually use logical expressions to constrain the structure. We analyze 33 metamodels including 995 rules coming from industry, academia and the Object Management Group, to understand how metamodelers articulate both languages. We implement a set of metrics in the OCLMetrics tool to evaluate the complexity of both parts, as well as the coupling between both. We observe that all metamodels tend to have a small, core subset of concepts, which are constrained by most of the rules, in general the rules are loosely coupled to the structure and we identify the set of OCL constructs actually used in rules.","authors":["Juan Cadavid","BenoiË†t Combemale","Benoit Baudry"],"meta":["March 2015Computer Languages Systems & Structures 41","DOI:10.1016/j.cl.2015.02.002"],"references":["265469386_Design_Guidelines_for_Domain_Specific_Languages","254034255_Searching_the_Boundaries_of_a_Modeling_Space_to_Test_Metamodels","226550191_Automated_Measurement_of_Models_of_Requirements","225954093_Validating_UML_and_OCL_models_in_USE_by_automatic_snapshot_generation","225147824_Model-driven_Generative_Development_of_Measurement_Software","221560600_Quantitative_assessment_of_UML_dynamic_models","221350095_On_the_Evolution_of_OCL_for_Capturing_Structural_Constraints_in_Modelling_Languages","221320460_MetaEdit_defining_and_using_integrated_domain-specific_modeling_languages","221258536_Managing_Model_Quality_in_UML-Based_Software_Development","221223835_A_Benchmark_for_OCL_Engine_Accuracy_Determinateness_and_Efficiency","221223683_Empirical_evaluation_of_the_conjunct_use_of_MOF_and_OCL","220868288_Weaving_Executability_into_Object-Oriented_Meta-languages","220117954_On_Automata_and_Language_Based_Grammar_Metrics","220054190_Generation_of_Formal_Model_Metrics_for_MOF_based_Domain_Specific_Languages","200040446_When_and_How_to_Develop_Domain-Specific_Languages","47529134_FAML_a_generic_metamodel_for_MAS_development","45341478_Inquiring_the_Usage_of_Aspect-Oriented_Programming_An_Empirical_Study","42741812_Meta-model_Pruning","4250888_Model-driven_Development_of_Complex_Software_A_Research_Roadmap","271475120_An_empirical_assessment_of_completeness_in_UML_designs","250033098_The_Eclipse_Modeling_Framework","234783291_The_Object_Constraint_Language_Second_Edition_Getting_Your_Models_Ready_for_MDA","232639532_A_Methodology_and_Framework_for_Creating_Domain-Specific_Development_Infrastructures","228795507_An_empirical_assessment_of_completeness_in_UML_designs","228350611_ABSTRACT_Some_observations_on_the_application_of_software_metrics_to_UML_models","221223786_On_the_Application_of_Software_Metrics_to_UML_Models","220349620_A_MOF-Based_Metamodeling_Environment","29608310_Essay_on_Semantics_Definition_in_MDE_An_Instrumented_Approach_for_Model_Verification"]}