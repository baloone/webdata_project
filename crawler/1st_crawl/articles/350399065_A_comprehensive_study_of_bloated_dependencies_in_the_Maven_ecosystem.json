{"id":"350399065_A_comprehensive_study_of_bloated_dependencies_in_the_Maven_ecosystem","abstract":"Build automation tools and package managers have a profound influence on software development. They facilitate the reuse of third-party libraries, support a clear separation between the application’s code and its external dependencies, and automate several software development tasks. However, the wide adoption of these tools introduces new challenges related to dependency management. In this paper, we propose an original study of one such challenge: the emergence of bloated dependencies. Bloated dependencies are libraries that are packaged with the application’s compiled code but that are actually not necessary to build and run the application. They artificially grow the size of the built binary and increase maintenance effort. We propose DepClean, a tool to determine the presence of bloated dependencies in Maven artifacts. We analyze 9,639 Java artifacts hosted on Maven Central, which include a total of 723,444 dependency relationships. Our key result is as follows: 2.7% of the dependencies directly declared are bloated, 15.4% of the inherited dependencies are bloated, and 57% of the transitive dependencies of the studied artifacts are bloated. In other words, it is feasible to reduce the number of dependencies of Maven artifacts to 1/4 of its current count. Our qualitative assessment with 30 notable open-source projects indicates that developers pay attention to their dependencies when they are notified of the problem. They are willing to remove bloated dependencies: 21/26 answered pull requests were accepted and merged by developers, removing 140 dependencies in total: 75 direct and 65 transitive.","authors":["César Soto-Valero","Nicolas Harrand","Martin Monperrus","Benoit Baudry"],"meta":["May 2021Empirical Software Engineering 26(3)","DOI:10.1007/s10664-020-09914-8"],"references":["337194147_CrossRec_Supporting_Software_Developers_by_Recommending_Third-party_Libraries","335499638_The_Maven_Dependency_Graph_A_Temporal_Graph-Based_Representation_of_Maven_Central","331629682_The_Emergence_of_Software_Diversity_in_Maven_Central","330609209_A_comparison_of_tree-_and_line-oriented_observational_slicing","328502473_Slimming_JavaScript_Applications_an_Approach_for_Removing_Unused_Functions_from_JavaScript_Libraries","327123052_TRIMMER_application_specialization_for_code_debloating","320413333_An_Empirical_Comparison_of_Dependency_Network_Evolution_in_Seven_Software_Packaging_Ecosystems","335369516_Surviving_software_dependencies","333845500_A_Double-Edged_Sword_Software_Reuse_and_Potential_Security_Vulnerabilities","320744888_A_Multi-OS_Cross-Layer_Study_of_Bloating_in_User_Programs_Kernel_and_Managed_Execution_Environments"]}