{"id":"307090526_Automatic_runtime_recovery_via_error_handler_synthesis","abstract":"Software systems are often subject to unexpected runtime errors. Automatic runtime recovery (ARR) techniques aim at recovering them from erroneous states and maintaining them functional in the field. This paper proposes Ares , a novel, practical approach to performing ARR. Our key insight is to leverage a system's already built-in error handling support to recover from unexpected errors. To this end, we synthesize error handlers via two methods: error transformation and early return. We also equip Ares with a lightweight in-vivo testing infrastructure to select the right synthesis methods and avoid potentially dangerous error handlers. Unlike existing ARR techniques based on heavyweight mechanisms (e.g., checkpoint-restart and runtime monitoring), our approach expands the intrinsic capability of runtime error resilience already existing in software systems to handle unexpected errors. Ares's lightweight mechanism makes it practical and easy to be integrated into production environments. We have implemented Ares on top of both the Java HotSpot VM and Android ART, and applied it to 52 real-world bugs. The results are promising — Ares successfully recovers from 39 of them and incurs low overhead.","authors":["Tianxiao Gu","Chengnian Sun","Xiaoxing Ma","Jian Lü"],"meta":["August 2016","DOI:10.1145/2970276.2970360","Conference: the 31st IEEE/ACM International Conference"],"references":["288060022_NPEFix_Automatic_Runtime_Repair_of_Null_Pointer_Exceptions_in_Java","266722925_Simple_Testing_Can_Prevent_Most_Critical_Failures_---_An_Analysis_of_Production_Failures_in_Distributed_Data-intensive_Systems","241632971_Automated_repair_of_HTML_generation_errors_in_PHP_applications_using_string_constraint_solving","236116120_Automatic_Recovery_from_Runtime_Failures","232653335_Recent_advances_in_checkpointrecovery_systems","228940823_Unchecked_exceptions_can_the_programmer_be_trusted_to_document_exceptions","221496451_Exception_Handling_A_Field_Study_in_Java_and_NET","221496277_Detecting_and_Escaping_Infinite_Loops_with_Jolt","220938725_ASSURE_Automatic_software_self-healing_using_REscue_points","220910210_Automatically_Patching_Errors_in_Deployed_Software","346365331_Rx_treating_bugs_as_allergies---a_safe_method_to_survive_software_failures","309050324_Simple_testing_can_prevent_most_critical_failures_An_analysis_of_production_failures_in_distributed_data-intensive_systems","303099279_Angelix_Scalable_Multiline_Program_Patch_Synthesis_via_Symbolic_Analysis","290041276_Towards_self-healing_smartphone_software_via_automated_patching","279835496_An_Analysis_of_Patch_Plausibility_and_Correctness_for_Generate-And-Validate_Patch_Generation_Systems","278916826_ASSURE","266657664_Automatic_Runtime_Error_Repair_and_Containment_via_Recovery_Shepherding","262205542_Exception_Handlers_for_Healing_Component-Based_Systems","261230128_Automatic_patch_generation_learned_from_human-written_patches","254041670_A_systematic_study_of_automated_program_repair_Fixing_55_out_of_105_bugs_for_8_each","234801914_Enhancing_server_availability_and_security_through_failure-oblivious_computing","231553436_A_transactional_model_for_automatic_exception_handling","221553516_Automatically_finding_patches_using_genetic_programming","221542024_Changing_Java's_Semantics_for_Handling_Null_Pointer_Exceptions","221032847_Self-recovery_in_server_programs","220910068_Rx_Treating_bugs_as_allergies_-_-a_safe_method_to_survive_software_failures","220687192_A_transactional_model_for_automatic_exception_handling","220439162_Rx_Treating_bugs_as_allergies-_A_safe_method_to_survive_software_failures","220426372_Exception_Handling_Issues_and_a_Proposed_Notation","220328269_Exception_Handling_and_Software_Fault_Tolerance","3048022_Exception_Handling_and_Software_Fault_Tolerance","2563411_Automatic_Detection_and_Repair_of_Errors_in_Data_Structures","2550152_A_Survey_of_Rollback-Recovery_Protocols_in_Message-Passing_Systems"]}