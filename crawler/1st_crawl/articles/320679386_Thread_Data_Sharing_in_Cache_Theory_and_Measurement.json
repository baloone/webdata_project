{"id":"320679386_Thread_Data_Sharing_in_Cache_Theory_and_Measurement","abstract":"On modern multi-core processors, independent workloads often interfere with each other by competing for shared cache space. However, for multi-threaded workloads, where a single copy of data can be accessed by multiple threads, the threads can cooperatively share cache. Because data sharing consolidates the collective working set of threads, the effective size of shared cache becomes larger than it would have been when data are not shared. This paper presents a new theory of data sharing. It includes (1) a new metric called the shared footprint to mathematically compute the amount of data shared by any group of threads in any size cache, and (2) a linear-time algorithm to measure shared footprint by scanning the memory trace of a multi-threaded program. The paper presents the practical implementation and evaluates the new theory using 14 PARSEC and SPEC OMP benchmarks, including an example use of shared footprint in program optimization.","authors":["Hao Luo","Pengcheng Li","Chen Ding"],"meta":["January 2017ACM SIGPLAN Notices 52(8):103-115","DOI:10.1145/3155284.3018759"],"references":["274837470_Efficient_MRC_Construction_with_SHARDS","261355742_PARDA_A_fast_parallel_reuse_distance_analysis_algorithm","260739531_No_More_Backstabbing_A_Faithful_Scheduling_Policy_for_Multithreaded_Programs","236210392_SPEC_OMP2012_-_An_Application_Benchmark_Suite_for_Parallel_Systems_Using_OpenMP","234805713_Analytical_cache_model","224199343_Fidelity_and_scaling_of_the_PARSEC_benchmark_inputs","221643734_All-Window_Profiling_and_Composable_Models_of_Cache_Sharing","221615714_Combining_Locality_Analysis_with_Online_Proactive_Job_Co-scheduling_in_Chip_Multiprocessors","221302871_Is_Reuse_Distance_Applicable_to_Data_Locality_Analysis_on_Chip_Multiprocessors","220938765_Dynamic_tracking_of_page_miss_ratio_curve_for_memory_management","220938703_RapidMRC_Approximating_L2_Miss_Rate_Curves_on_Commodity_Systems_for_Online_Optimizations","220884829_Multiple_Page_Size_Modeling_and_Optimization","220884781_The_PARSEC_benchmark_suite_Characterization_and_architectural_implications","220884631_Linear-time_Modeling_of_Program_Working_Set_in_Shared_Cache","220752268_9_8_Pin_Building_Customized_Program_Analysis_Tools_with_Dynamic_Instrumentation","220623422_Online_Cache_Modeling_for_Commodity_Multicore_Processors","220404256_Program_Locality_Analysis_Using_Reuse_Distance","4119888_Predicting_inter-thread_cache_contention_on_a_chip_multi-processor_architecture","307695628_Optimal_Cache_Partition-Sharing","305261374_Properties_of_the_Working-Set_Model","280292422_Pin","279401579_PACER","279339372_RapidMRC","270453808_Characterizing_storage_workloads_with_counter_stacks","266657115_Analytical_cache_models_with_applications_to_cache_partitioning","265454137_BENCHMARKING_MODERN_MULTIPROCESSORS","263441883_A_Detailed_GPU_Cache_Model_Based_on_Reuse_Distance_Theory","262321304_Reuse-based_online_models_for_caches","262320917_Studying_multicore_processor_scaling_via_reuse_distance_analysis","262170785_HOTL_A_higher_order_theory_of_locality","262168175_Resource_Elasticity_Fairness_with_Sharing_Incentives_for_Multiprocessors","261355877_A_Highly_Parallel_Reuse_Distance_Analysis_Algorithm_on_GPUs","254495894_A_Composable_Model_for_Analyzing_Locality_of_Multi-threaded_Programs","242372885_Efficient_methods_for_calculating_the_success_function_of_fixed_space_replacement_polities","239067023_Dynamically_tracking_miss-ratio-curve_for_memory_management","223919662_Generating_cache_hints_for_improved_program_efficiency","221643630_All-Window_Profiling_of_Concurrent_Executions","221615736_Fast_modeling_of_shared_caches_in_multicore_systems","221554049_On_the_Effectiveness_of_Set_Associative_Page_Mapping_and_Its_Application_to_Main_Memory_Management","221236007_Estimating_Cache_Misses_and_Locality_Using_Stack_Distances","221235730_Static_reuse_distances_for_locality-based_optimizations_in_MATLAB","221149130_Discovery_of_Locality-Improving_Refactorings_by_Reuse_Path_Analysis","221032972_Calculating_stack_distances_efficiently","221032826_Sampling-based_program_locality_approximation","220885004_Accelerating_Multicore_Reuse_Distance_Analysis_with_Sampling_and_Parallelization","220884562_Coherent_Profiles_Enabling_Efficient_Reuse_Distance_Analysis_of_Multicore_Scaling_for_Loop-based_Parallel_Programs","220752312_PACER_Proportional_detection_of_data_races","220751876_Dynamic_Hot_Data_Stream_Prefetching_for_General-Purpose_Programs","220439149_Footprints_in_the_Cache","220419879_Properties_of_the_Working_Set_Model","2762329_Adaptive_Software_Cache_Management_for_Distributed_Shared_Memory_Architectures","4071678_StatCache_A_probabilistic_approach_to_efficient_and_accurate_data_locality_analysis","3503876_Adaptive_software_cache_management_for_distributed_shared_memoryarchitectures","3189287_Working_Sets_Past_and_Present","3042519_Evaluating_associativity_in_CPU_caches"]}