{"id":"262345386_Parallelizing_the_Spin_Model_Checker","abstract":"We describe an extension of the Spin model checker that allows us to take advantage of the increasing number of cpu-cores available on standard desktop systems. Our main target is to speed up the verification process for safety properties, the mode used most frequently, but we also describe a small modification of the parallel search algorithm, called the piggyback algorithm, that is remarkably effective in catching violations for an interesting class of liveness properties at little cost.","authors":["Gerard Holzmann"],"meta":["July 2012","DOI:10.1007/978-3-642-31759-0_12","Conference: Proceedings of the 19th international conference on Model Checking Software"],"references":["226376058_Parallel_Recursive_State_Compression_for_Free","225589560_Scalable_Shared-Memory_LTL_Model_Checking","225479248_Improving_Spin's_Partial-Order_Reduction_for_Breadth-First_Search","221105723_Improving_Spin's_Partial-Order_Reduction_for_Breadth-First_Search","221105686_BEEM_Benchmarks_for_Explicit_Model_Checkers","220884450_Boosting_multi-core_reachability_performance_with_shared_hash_tables","45912292_Boosting_Multi-Core_Reachability_Performance_with_Shared_Hash_Tables","3189776_The_Design_of_a_Multicore_Extension_of_the_SPIN_Model_Checker","222450697_Defining_liveness","220695682_The_Spin_Model_Checker_Primer_and_Reference_Manual","2773161_An_Improvement_in_Formal_Verification","2700403_Tools_and_Rules_for_the_Practicing_Verifier"]}