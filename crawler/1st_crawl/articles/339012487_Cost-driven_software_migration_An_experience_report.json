{"id":"339012487_Cost-driven_software_migration_An_experience_report","abstract":"Software migration projects are often bound either by time or cost or by both. If the project is bound by both time and cost, the user must sacrifice something else, usually the quality. The migration strategy depends on how the project is bound. Most migration projects are bound by time. The new system must be in operation by a given date, no matter what it costs. The project described here—a state employee payroll system—is bound by cost. It must remain within the budget, no matter how long it takes. The original costs were estimated based on the code size and the productivity measured in previous migration projects using three different approaches: conversion, redevelopment, and reimplementation. The conversion approach would have been the cheapest, but it had already been tried and failed. The redevelopment approach was considered to be out of the question due to the high costs. Thus, reimplementation remained as the only alternative. The costs of this approach were estimated using three different estimation methods and approved by the state government. The project has been in progress for 4 years, and until now, the estimated costs and actual costs are in the same order of magnitude: the costs have remained within budget. In fact, the costs are less than what was estimated with some methods. As this particular project is not bound by time, it is a good example of continuous migration. Redevelopment is often prohibitively expensive and/or fails. Automated conversion is error prone, delivers unmaintainable code, and is high risk. Reimplemention sits between conversion and redevelopment: the old business‐logic remains, only the underlying technology is changed (see Figure 1). Reimplementation is often tried after (several) failed attempts to redevelop and/or convert. We illustrate this for a state employee payment system. Our cost/risk estimates turned out to be reasonable; its migration progresses as expected without significant problems.","authors":["Harry Sneed","Chris Verhoef"],"meta":["February 2020Journal of Software: Evolution and Process 32(4):e2236","DOI:10.1002/smr.2236"],"references":["344484889_Software_Sizing_Estimation_and_Risk_Management_When_Performance_is_Measured_Performance_Improves","344165428_The_Politics_of_Information_Management","333832167_Foundations_for_measuring_IT-outsourcing_success_and_failure","332941493_Re-implementing_a_Legacy_System","328911074_COBOL_to_Java_and_Newspapers_Still_Get_Delivered","321944643_Software_engineering_economics","319394075_The_Mythical_Man-Month","303112223_A_general_empirical_solution_to_the_macrosoftware_sizing_and_estimating_problem","301734492_Lessons_from_Dutch_IT-outsourcing_success_and_failure","298600663_IT_Portfolio_Management_A_Banker's_Perspective_on_IT"]}